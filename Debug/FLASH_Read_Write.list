
FLASH_Read_Write.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ef4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003160  08003160  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003160  08003160  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003160  08003160  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000070  080031d8  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  080031d8  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008382  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000209b  00000000  00000000  0002841b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  0002a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f8  00000000  00000000  0002acd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019677  00000000  00000000  0002b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ae3e  00000000  00000000  00044a47  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00087631  00000000  00000000  0004f885  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6eb6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002108  00000000  00000000  000d6f34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fe8 	.word	0x08002fe8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002fe8 	.word	0x08002fe8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <__NVIC_GetPriorityGrouping+0x18>)
 8000162:	68db      	ldr	r3, [r3, #12]
 8000164:	0a1b      	lsrs	r3, r3, #8
 8000166:	f003 0307 	and.w	r3, r3, #7
}
 800016a:	4618      	mov	r0, r3
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	e000ed00 	.word	0xe000ed00

08000178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	2b00      	cmp	r3, #0
 8000188:	db0b      	blt.n	80001a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	f003 021f 	and.w	r2, r3, #31
 8000190:	4906      	ldr	r1, [pc, #24]	; (80001ac <__NVIC_EnableIRQ+0x34>)
 8000192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000196:	095b      	lsrs	r3, r3, #5
 8000198:	2001      	movs	r0, #1
 800019a:	fa00 f202 	lsl.w	r2, r0, r2
 800019e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	e000e100 	.word	0xe000e100

080001b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	6039      	str	r1, [r7, #0]
 80001ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	db0a      	blt.n	80001da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	490c      	ldr	r1, [pc, #48]	; (80001fc <__NVIC_SetPriority+0x4c>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	0112      	lsls	r2, r2, #4
 80001d0:	b2d2      	uxtb	r2, r2
 80001d2:	440b      	add	r3, r1
 80001d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d8:	e00a      	b.n	80001f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4908      	ldr	r1, [pc, #32]	; (8000200 <__NVIC_SetPriority+0x50>)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f003 030f 	and.w	r3, r3, #15
 80001e6:	3b04      	subs	r3, #4
 80001e8:	0112      	lsls	r2, r2, #4
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	440b      	add	r3, r1
 80001ee:	761a      	strb	r2, [r3, #24]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000e100 	.word	0xe000e100
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000218:	69fb      	ldr	r3, [r7, #28]
 800021a:	f1c3 0307 	rsb	r3, r3, #7
 800021e:	2b04      	cmp	r3, #4
 8000220:	bf28      	it	cs
 8000222:	2304      	movcs	r3, #4
 8000224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3304      	adds	r3, #4
 800022a:	2b06      	cmp	r3, #6
 800022c:	d902      	bls.n	8000234 <NVIC_EncodePriority+0x30>
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	3b03      	subs	r3, #3
 8000232:	e000      	b.n	8000236 <NVIC_EncodePriority+0x32>
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	f04f 32ff 	mov.w	r2, #4294967295
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	43da      	mvns	r2, r3
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	401a      	ands	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800024c:	f04f 31ff 	mov.w	r1, #4294967295
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43d9      	mvns	r1, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	4313      	orrs	r3, r2
         );
}
 800025e:	4618      	mov	r0, r3
 8000260:	3724      	adds	r7, #36	; 0x24
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	4907      	ldr	r1, [pc, #28]	; (8000294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4313      	orrs	r3, r2
 800027a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4013      	ands	r3, r2
 8000284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000286:	68fb      	ldr	r3, [r7, #12]
}
 8000288:	bf00      	nop
 800028a:	3714      	adds	r7, #20
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000

08000298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ffe3 	bl	8000268 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80002a2:	f7ff ff5b 	bl	800015c <__NVIC_GetPriorityGrouping>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2200      	movs	r2, #0
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ffa9 	bl	8000204 <NVIC_EncodePriority>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4619      	mov	r1, r3
 80002b6:	2010      	movs	r0, #16
 80002b8:	f7ff ff7a 	bl	80001b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002bc:	2010      	movs	r0, #16
 80002be:	f7ff ff5b 	bl	8000178 <__NVIC_EnableIRQ>

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <MX_GPIO_Init+0x90>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_GPIO_Init+0x90>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <MX_GPIO_Init+0x90>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0308 	and.w	r3, r3, #8
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032a:	480c      	ldr	r0, [pc, #48]	; (800035c <MX_GPIO_Init+0x94>)
 800032c:	f001 faf2 	bl	8001914 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2302      	movs	r3, #2
 8000340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4619      	mov	r1, r3
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0x94>)
 800034a:	f001 f989 	bl	8001660 <HAL_GPIO_Init>

}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40010c00 	.word	0x40010c00

08000360 <write_flash>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void write_flash(uint32_t start_address, uint32_t end_address)
{
 8000360:	b5b0      	push	{r4, r5, r7, lr}
 8000362:	b08a      	sub	sp, #40	; 0x28
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800036a:	2301      	movs	r3, #1
 800036c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t error_count = 0;
 8000370:	2300      	movs	r3, #0
 8000372:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_FLASH_Unlock();
 8000374:	f000 ffe4 	bl	8001340 <HAL_FLASH_Unlock>

  FLASH_EraseInitTypeDef EraseInitStruck;
  EraseInitStruck.TypeErase = FLASH_TYPEERASE_PAGES;
 8000378:	2300      	movs	r3, #0
 800037a:	613b      	str	r3, [r7, #16]
  // EraseInitStruck.Banks       = ;
  EraseInitStruck.PageAddress = start_address;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	61bb      	str	r3, [r7, #24]
  EraseInitStruck.NbPages = (end_address - start_address) / FLASH_PAGE_SIZE;
 8000380:	683a      	ldr	r2, [r7, #0]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	0a9b      	lsrs	r3, r3, #10
 8000388:	61fb      	str	r3, [r7, #28]
  uint32_t PageError = 0xFFFFFFFF;
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	60fb      	str	r3, [r7, #12]

  status = HAL_FLASHEx_Erase(&EraseInitStruck, &PageError);
 8000390:	f107 020c 	add.w	r2, r7, #12
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4611      	mov	r1, r2
 800039a:	4618      	mov	r0, r3
 800039c:	f001 f8b8 	bl	8001510 <HAL_FLASHEx_Erase>
 80003a0:	4603      	mov	r3, r0
 80003a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (status != HAL_OK)
 80003a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d037      	beq.n	800041e <write_flash+0xbe>
  {
    ++error_count;
 80003ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003b0:	3301      	adds	r3, #1
 80003b2:	627b      	str	r3, [r7, #36]	; 0x24
    print("Flash Erase failed\r\n");
 80003b4:	4a4d      	ldr	r2, [pc, #308]	; (80004ec <write_flash+0x18c>)
 80003b6:	4b4e      	ldr	r3, [pc, #312]	; (80004f0 <write_flash+0x190>)
 80003b8:	4615      	mov	r5, r2
 80003ba:	461c      	mov	r4, r3
 80003bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003be:	6028      	str	r0, [r5, #0]
 80003c0:	6069      	str	r1, [r5, #4]
 80003c2:	60aa      	str	r2, [r5, #8]
 80003c4:	60eb      	str	r3, [r5, #12]
 80003c6:	6820      	ldr	r0, [r4, #0]
 80003c8:	6128      	str	r0, [r5, #16]
 80003ca:	7923      	ldrb	r3, [r4, #4]
 80003cc:	752b      	strb	r3, [r5, #20]
 80003ce:	4947      	ldr	r1, [pc, #284]	; (80004ec <write_flash+0x18c>)
 80003d0:	4848      	ldr	r0, [pc, #288]	; (80004f4 <write_flash+0x194>)
 80003d2:	f000 f97c 	bl	80006ce <vUARTSend>
    print(__FILE__);
 80003d6:	4a45      	ldr	r2, [pc, #276]	; (80004ec <write_flash+0x18c>)
 80003d8:	4b47      	ldr	r3, [pc, #284]	; (80004f8 <write_flash+0x198>)
 80003da:	4615      	mov	r5, r2
 80003dc:	461c      	mov	r4, r3
 80003de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003e0:	6028      	str	r0, [r5, #0]
 80003e2:	6069      	str	r1, [r5, #4]
 80003e4:	60aa      	str	r2, [r5, #8]
 80003e6:	60eb      	str	r3, [r5, #12]
 80003e8:	8823      	ldrh	r3, [r4, #0]
 80003ea:	78a2      	ldrb	r2, [r4, #2]
 80003ec:	822b      	strh	r3, [r5, #16]
 80003ee:	4613      	mov	r3, r2
 80003f0:	74ab      	strb	r3, [r5, #18]
 80003f2:	493e      	ldr	r1, [pc, #248]	; (80004ec <write_flash+0x18c>)
 80003f4:	483f      	ldr	r0, [pc, #252]	; (80004f4 <write_flash+0x194>)
 80003f6:	f000 f96a 	bl	80006ce <vUARTSend>
    print(__LINE__);
 80003fa:	2196      	movs	r1, #150	; 0x96
 80003fc:	483b      	ldr	r0, [pc, #236]	; (80004ec <write_flash+0x18c>)
 80003fe:	f002 f9f9 	bl	80027f4 <strcpy>
 8000402:	493a      	ldr	r1, [pc, #232]	; (80004ec <write_flash+0x18c>)
 8000404:	483b      	ldr	r0, [pc, #236]	; (80004f4 <write_flash+0x194>)
 8000406:	f000 f962 	bl	80006ce <vUARTSend>
    print("\r\n");
 800040a:	4b38      	ldr	r3, [pc, #224]	; (80004ec <write_flash+0x18c>)
 800040c:	4a3b      	ldr	r2, [pc, #236]	; (80004fc <write_flash+0x19c>)
 800040e:	8811      	ldrh	r1, [r2, #0]
 8000410:	7892      	ldrb	r2, [r2, #2]
 8000412:	8019      	strh	r1, [r3, #0]
 8000414:	709a      	strb	r2, [r3, #2]
 8000416:	4935      	ldr	r1, [pc, #212]	; (80004ec <write_flash+0x18c>)
 8000418:	4836      	ldr	r0, [pc, #216]	; (80004f4 <write_flash+0x194>)
 800041a:	f000 f958 	bl	80006ce <vUARTSend>
  }

  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address, 22);
 800041e:	f04f 0216 	mov.w	r2, #22
 8000422:	f04f 0300 	mov.w	r3, #0
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	2002      	movs	r0, #2
 800042a:	f000 fe21 	bl	8001070 <HAL_FLASH_Program>
 800042e:	4603      	mov	r3, r0
 8000430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (status != HAL_OK)
 8000434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <write_flash+0xe2>
  {
    ++error_count;
 800043c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800043e:	3301      	adds	r3, #1
 8000440:	627b      	str	r3, [r7, #36]	; 0x24
  }
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address + 4, 12);
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	1d19      	adds	r1, r3, #4
 8000446:	f04f 020c 	mov.w	r2, #12
 800044a:	f04f 0300 	mov.w	r3, #0
 800044e:	2002      	movs	r0, #2
 8000450:	f000 fe0e 	bl	8001070 <HAL_FLASH_Program>
 8000454:	4603      	mov	r3, r0
 8000456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (status != HAL_OK)
 800045a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800045e:	2b00      	cmp	r3, #0
 8000460:	d002      	beq.n	8000468 <write_flash+0x108>
  {
    ++error_count;
 8000462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000464:	3301      	adds	r3, #1
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
  }
  status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address + 8, 1998);
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	f103 0108 	add.w	r1, r3, #8
 800046e:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8000472:	f04f 0300 	mov.w	r3, #0
 8000476:	2002      	movs	r0, #2
 8000478:	f000 fdfa 	bl	8001070 <HAL_FLASH_Program>
 800047c:	4603      	mov	r3, r0
 800047e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (status != HAL_OK)
 8000482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000486:	2b00      	cmp	r3, #0
 8000488:	d002      	beq.n	8000490 <write_flash+0x130>
  {
    ++error_count;
 800048a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800048c:	3301      	adds	r3, #1
 800048e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  if (error_count != 0)
 8000490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000492:	2b00      	cmp	r3, #0
 8000494:	d010      	beq.n	80004b8 <write_flash+0x158>
  {
    print("Write Flash failed\r\n");
 8000496:	4a15      	ldr	r2, [pc, #84]	; (80004ec <write_flash+0x18c>)
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <write_flash+0x1a0>)
 800049a:	4615      	mov	r5, r2
 800049c:	461c      	mov	r4, r3
 800049e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004a0:	6028      	str	r0, [r5, #0]
 80004a2:	6069      	str	r1, [r5, #4]
 80004a4:	60aa      	str	r2, [r5, #8]
 80004a6:	60eb      	str	r3, [r5, #12]
 80004a8:	6820      	ldr	r0, [r4, #0]
 80004aa:	6128      	str	r0, [r5, #16]
 80004ac:	7923      	ldrb	r3, [r4, #4]
 80004ae:	752b      	strb	r3, [r5, #20]
 80004b0:	490e      	ldr	r1, [pc, #56]	; (80004ec <write_flash+0x18c>)
 80004b2:	4810      	ldr	r0, [pc, #64]	; (80004f4 <write_flash+0x194>)
 80004b4:	f000 f90b 	bl	80006ce <vUARTSend>
  }

  if (error_count == 0)
 80004b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d110      	bne.n	80004e0 <write_flash+0x180>
  {
    print("Write Flash success\r\n");
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <write_flash+0x18c>)
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <write_flash+0x1a4>)
 80004c2:	4615      	mov	r5, r2
 80004c4:	461c      	mov	r4, r3
 80004c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004c8:	6028      	str	r0, [r5, #0]
 80004ca:	6069      	str	r1, [r5, #4]
 80004cc:	60aa      	str	r2, [r5, #8]
 80004ce:	60eb      	str	r3, [r5, #12]
 80004d0:	6820      	ldr	r0, [r4, #0]
 80004d2:	6128      	str	r0, [r5, #16]
 80004d4:	88a3      	ldrh	r3, [r4, #4]
 80004d6:	82ab      	strh	r3, [r5, #20]
 80004d8:	4904      	ldr	r1, [pc, #16]	; (80004ec <write_flash+0x18c>)
 80004da:	4806      	ldr	r0, [pc, #24]	; (80004f4 <write_flash+0x194>)
 80004dc:	f000 f8f7 	bl	80006ce <vUARTSend>
  }
  HAL_FLASH_Lock();
 80004e0:	f000 ff54 	bl	800138c <HAL_FLASH_Lock>
}
 80004e4:	bf00      	nop
 80004e6:	3728      	adds	r7, #40	; 0x28
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bdb0      	pop	{r4, r5, r7, pc}
 80004ec:	20000098 	.word	0x20000098
 80004f0:	08003000 	.word	0x08003000
 80004f4:	40004400 	.word	0x40004400
 80004f8:	08003018 	.word	0x08003018
 80004fc:	0800302c 	.word	0x0800302c
 8000500:	08003030 	.word	0x08003030
 8000504:	08003048 	.word	0x08003048

08000508 <read_flash>:

uint32_t read_flash(uint32_t flash_address)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  uint32_t data = *(volatile uint32_t *)(flash_address);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	60fb      	str	r3, [r7, #12]
  return data;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fc32 	bl	8000d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f864 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f7ff feca 	bl	80002c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000534:	f7ff feb0 	bl	8000298 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000538:	f000 fb78 	bl	8000c2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  write_flash(ADDR_FLASH_PAGE_50, FLASH_END_ADDRESS);
 800053c:	4924      	ldr	r1, [pc, #144]	; (80005d0 <main+0xac>)
 800053e:	4825      	ldr	r0, [pc, #148]	; (80005d4 <main+0xb0>)
 8000540:	f7ff ff0e 	bl	8000360 <write_flash>
  printVar(read_flash(ADDR_FLASH_PAGE_50));
 8000544:	4823      	ldr	r0, [pc, #140]	; (80005d4 <main+0xb0>)
 8000546:	f7ff ffdf 	bl	8000508 <read_flash>
 800054a:	4603      	mov	r3, r0
 800054c:	461a      	mov	r2, r3
 800054e:	4922      	ldr	r1, [pc, #136]	; (80005d8 <main+0xb4>)
 8000550:	4822      	ldr	r0, [pc, #136]	; (80005dc <main+0xb8>)
 8000552:	f002 f92f 	bl	80027b4 <siprintf>
 8000556:	4921      	ldr	r1, [pc, #132]	; (80005dc <main+0xb8>)
 8000558:	4821      	ldr	r0, [pc, #132]	; (80005e0 <main+0xbc>)
 800055a:	f000 f8b8 	bl	80006ce <vUARTSend>
 800055e:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <main+0xb8>)
 8000560:	4a20      	ldr	r2, [pc, #128]	; (80005e4 <main+0xc0>)
 8000562:	8811      	ldrh	r1, [r2, #0]
 8000564:	7892      	ldrb	r2, [r2, #2]
 8000566:	8019      	strh	r1, [r3, #0]
 8000568:	709a      	strb	r2, [r3, #2]
 800056a:	491c      	ldr	r1, [pc, #112]	; (80005dc <main+0xb8>)
 800056c:	481c      	ldr	r0, [pc, #112]	; (80005e0 <main+0xbc>)
 800056e:	f000 f8ae 	bl	80006ce <vUARTSend>
  printVar(read_flash(ADDR_FLASH_PAGE_50 + 4));
 8000572:	481d      	ldr	r0, [pc, #116]	; (80005e8 <main+0xc4>)
 8000574:	f7ff ffc8 	bl	8000508 <read_flash>
 8000578:	4603      	mov	r3, r0
 800057a:	461a      	mov	r2, r3
 800057c:	491b      	ldr	r1, [pc, #108]	; (80005ec <main+0xc8>)
 800057e:	4817      	ldr	r0, [pc, #92]	; (80005dc <main+0xb8>)
 8000580:	f002 f918 	bl	80027b4 <siprintf>
 8000584:	4915      	ldr	r1, [pc, #84]	; (80005dc <main+0xb8>)
 8000586:	4816      	ldr	r0, [pc, #88]	; (80005e0 <main+0xbc>)
 8000588:	f000 f8a1 	bl	80006ce <vUARTSend>
 800058c:	4b13      	ldr	r3, [pc, #76]	; (80005dc <main+0xb8>)
 800058e:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <main+0xc0>)
 8000590:	8811      	ldrh	r1, [r2, #0]
 8000592:	7892      	ldrb	r2, [r2, #2]
 8000594:	8019      	strh	r1, [r3, #0]
 8000596:	709a      	strb	r2, [r3, #2]
 8000598:	4910      	ldr	r1, [pc, #64]	; (80005dc <main+0xb8>)
 800059a:	4811      	ldr	r0, [pc, #68]	; (80005e0 <main+0xbc>)
 800059c:	f000 f897 	bl	80006ce <vUARTSend>
  printVar(read_flash(ADDR_FLASH_PAGE_50 + 8));
 80005a0:	4813      	ldr	r0, [pc, #76]	; (80005f0 <main+0xcc>)
 80005a2:	f7ff ffb1 	bl	8000508 <read_flash>
 80005a6:	4603      	mov	r3, r0
 80005a8:	461a      	mov	r2, r3
 80005aa:	4912      	ldr	r1, [pc, #72]	; (80005f4 <main+0xd0>)
 80005ac:	480b      	ldr	r0, [pc, #44]	; (80005dc <main+0xb8>)
 80005ae:	f002 f901 	bl	80027b4 <siprintf>
 80005b2:	490a      	ldr	r1, [pc, #40]	; (80005dc <main+0xb8>)
 80005b4:	480a      	ldr	r0, [pc, #40]	; (80005e0 <main+0xbc>)
 80005b6:	f000 f88a 	bl	80006ce <vUARTSend>
 80005ba:	4b08      	ldr	r3, [pc, #32]	; (80005dc <main+0xb8>)
 80005bc:	4a09      	ldr	r2, [pc, #36]	; (80005e4 <main+0xc0>)
 80005be:	8811      	ldrh	r1, [r2, #0]
 80005c0:	7892      	ldrb	r2, [r2, #2]
 80005c2:	8019      	strh	r1, [r3, #0]
 80005c4:	709a      	strb	r2, [r3, #2]
 80005c6:	4905      	ldr	r1, [pc, #20]	; (80005dc <main+0xb8>)
 80005c8:	4805      	ldr	r0, [pc, #20]	; (80005e0 <main+0xbc>)
 80005ca:	f000 f880 	bl	80006ce <vUARTSend>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <main+0xaa>
 80005d0:	08010000 	.word	0x08010000
 80005d4:	0800c800 	.word	0x0800c800
 80005d8:	08003060 	.word	0x08003060
 80005dc:	20000098 	.word	0x20000098
 80005e0:	40004400 	.word	0x40004400
 80005e4:	0800302c 	.word	0x0800302c
 80005e8:	0800c804 	.word	0x0800c804
 80005ec:	08003090 	.word	0x08003090
 80005f0:	0800c808 	.word	0x0800c808
 80005f4:	080030c4 	.word	0x080030c4

080005f8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b090      	sub	sp, #64	; 0x40
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0318 	add.w	r3, r7, #24
 8000602:	2228      	movs	r2, #40	; 0x28
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f8cc 	bl	80027a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061a:	2301      	movs	r3, #1
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000622:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000636:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0318 	add.w	r3, r7, #24
 8000640:	4618      	mov	r0, r3
 8000642:	f001 f97f 	bl	8001944 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800064c:	f000 f819 	bl	8000682 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
     */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000650:	230f      	movs	r3, #15
 8000652:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2102      	movs	r1, #2
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fbea 	bl	8001e44 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000676:	f000 f804 	bl	8000682 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3740      	adds	r7, #64	; 0x40
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 800068e:	b480      	push	{r7}
 8000690:	b083      	sub	sp, #12
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069e:	2b40      	cmp	r3, #64	; 0x40
 80006a0:	bf0c      	ite	eq
 80006a2:	2301      	moveq	r3, #1
 80006a4:	2300      	movne	r3, #0
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr

080006b2 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 80006b2:	b480      	push	{r7}
 80006b4:	b083      	sub	sp, #12
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	6078      	str	r0, [r7, #4]
 80006ba:	460b      	mov	r3, r1
 80006bc:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 80006be:	78fa      	ldrb	r2, [r7, #3]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	605a      	str	r2, [r3, #4]
}
 80006c4:	bf00      	nop
 80006c6:	370c      	adds	r7, #12
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <vUARTSend>:
}
#endif /*  configHAL_UART */

#if defined(configLL_UART)

void vUARTSend(USART_TypeDef *USARTx, uint8_t *String) {
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	6039      	str	r1, [r7, #0]
	uint32_t ulStringLen = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
	uint32_t ulBlockTime = 10000;
 80006e0:	f242 7310 	movw	r3, #10000	; 0x2710
 80006e4:	60fb      	str	r3, [r7, #12]
	ulStringLen = strlen((char*) String);
 80006e6:	6838      	ldr	r0, [r7, #0]
 80006e8:	f7ff fd30 	bl	800014c <strlen>
 80006ec:	6178      	str	r0, [r7, #20]

	while (ulStringLen) {
 80006ee:	e01a      	b.n	8000726 <vUARTSend+0x58>
		LL_USART_TransmitData8(USARTx, (uint8_t) String[i]);
 80006f0:	683a      	ldr	r2, [r7, #0]
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	4413      	add	r3, r2
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	4619      	mov	r1, r3
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff ffd9 	bl	80006b2 <LL_USART_TransmitData8>
		i++;
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	3301      	adds	r3, #1
 8000704:	613b      	str	r3, [r7, #16]
        ulStringLen--;
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	3b01      	subs	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
        /* Check if transfer 1 byte completed */
		while (!LL_USART_IsActiveFlag_TC(USARTx)) {
 800070c:	e005      	b.n	800071a <vUARTSend+0x4c>
			if ((ulBlockTime--) == 0)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	60fa      	str	r2, [r7, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d100      	bne.n	800071a <vUARTSend+0x4c>
				break;
 8000718:	e005      	b.n	8000726 <vUARTSend+0x58>
		while (!LL_USART_IsActiveFlag_TC(USARTx)) {
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f7ff ffb7 	bl	800068e <LL_USART_IsActiveFlag_TC>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d0f3      	beq.n	800070e <vUARTSend+0x40>
	while (ulStringLen) {
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1e1      	bne.n	80006f0 <vUARTSend+0x22>
		}
	}
}
 800072c:	bf00      	nop
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_MspInit+0x6c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <HAL_MspInit+0x6c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_MspInit+0x6c>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <HAL_MspInit+0x6c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <HAL_MspInit+0x6c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_MspInit+0x6c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2004      	movs	r0, #4
 8000770:	f000 fc47 	bl	8001002 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000774:	2004      	movs	r0, #4
 8000776:	f000 fc60 	bl	800103a <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <HAL_MspInit+0x70>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <HAL_MspInit+0x70>)
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	bf00      	nop
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021000 	.word	0x40021000
 80007a4:	40010000 	.word	0x40010000

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <HardFault_Handler+0x4>

080007ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <MemManage_Handler+0x4>

080007c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <BusFault_Handler+0x4>

080007c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c6:	b480      	push	{r7}
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ca:	e7fe      	b.n	80007ca <UsageFault_Handler+0x4>

080007cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 fb12 	bl	8000e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000800:	f000 fca6 	bl	8001150 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}

08000808 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr

08000814 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr

08000820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000828:	4a14      	ldr	r2, [pc, #80]	; (800087c <_sbrk+0x5c>)
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <_sbrk+0x60>)
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <_sbrk+0x64>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d102      	bne.n	8000842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <_sbrk+0x64>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <_sbrk+0x68>)
 8000840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <_sbrk+0x64>)
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	693a      	ldr	r2, [r7, #16]
 800084c:	429a      	cmp	r2, r3
 800084e:	d207      	bcs.n	8000860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000850:	f001 ff7e 	bl	8002750 <__errno>
 8000854:	4602      	mov	r2, r0
 8000856:	230c      	movs	r3, #12
 8000858:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800085a:	f04f 33ff 	mov.w	r3, #4294967295
 800085e:	e009      	b.n	8000874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <_sbrk+0x64>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <_sbrk+0x64>)
 8000870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000872:	68fb      	ldr	r3, [r7, #12]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20005000 	.word	0x20005000
 8000880:	00000400 	.word	0x00000400
 8000884:	2000008c 	.word	0x2000008c
 8000888:	20000128 	.word	0x20000128

0800088c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr

08000898 <__NVIC_GetPriorityGrouping>:
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_EnableIRQ>:
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	db0b      	blt.n	80008de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 021f 	and.w	r2, r3, #31
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <__NVIC_EnableIRQ+0x34>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f202 	lsl.w	r2, r0, r2
 80008da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	e000e100 	.word	0xe000e100

080008ec <__NVIC_SetPriority>:
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	6039      	str	r1, [r7, #0]
 80008f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	db0a      	blt.n	8000916 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	b2da      	uxtb	r2, r3
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <__NVIC_SetPriority+0x4c>)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	0112      	lsls	r2, r2, #4
 800090c:	b2d2      	uxtb	r2, r2
 800090e:	440b      	add	r3, r1
 8000910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000914:	e00a      	b.n	800092c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4908      	ldr	r1, [pc, #32]	; (800093c <__NVIC_SetPriority+0x50>)
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	3b04      	subs	r3, #4
 8000924:	0112      	lsls	r2, r2, #4
 8000926:	b2d2      	uxtb	r2, r2
 8000928:	440b      	add	r3, r1
 800092a:	761a      	strb	r2, [r3, #24]
}
 800092c:	bf00      	nop
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <NVIC_EncodePriority>:
{
 8000940:	b480      	push	{r7}
 8000942:	b089      	sub	sp, #36	; 0x24
 8000944:	af00      	add	r7, sp, #0
 8000946:	60f8      	str	r0, [r7, #12]
 8000948:	60b9      	str	r1, [r7, #8]
 800094a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	f1c3 0307 	rsb	r3, r3, #7
 800095a:	2b04      	cmp	r3, #4
 800095c:	bf28      	it	cs
 800095e:	2304      	movcs	r3, #4
 8000960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	3304      	adds	r3, #4
 8000966:	2b06      	cmp	r3, #6
 8000968:	d902      	bls.n	8000970 <NVIC_EncodePriority+0x30>
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	3b03      	subs	r3, #3
 800096e:	e000      	b.n	8000972 <NVIC_EncodePriority+0x32>
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000974:	f04f 32ff 	mov.w	r2, #4294967295
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43da      	mvns	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	401a      	ands	r2, r3
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000988:	f04f 31ff 	mov.w	r1, #4294967295
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa01 f303 	lsl.w	r3, r1, r3
 8000992:	43d9      	mvns	r1, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000998:	4313      	orrs	r3, r2
}
 800099a:	4618      	mov	r0, r3
 800099c:	3724      	adds	r7, #36	; 0x24
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr

080009a4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80009b6:	5cd3      	ldrb	r3, [r2, r3]
 80009b8:	461a      	mov	r2, r3
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4413      	add	r3, r2
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009c4:	f023 0310 	bic.w	r3, r3, #16
 80009c8:	68ba      	ldr	r2, [r7, #8]
 80009ca:	3a01      	subs	r2, #1
 80009cc:	4906      	ldr	r1, [pc, #24]	; (80009e8 <LL_DMA_SetDataTransferDirection+0x44>)
 80009ce:	5c8a      	ldrb	r2, [r1, r2]
 80009d0:	4611      	mov	r1, r2
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	440a      	add	r2, r1
 80009d6:	4611      	mov	r1, r2
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	4313      	orrs	r3, r2
 80009dc:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80009de:	bf00      	nop
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	08003124 	.word	0x08003124

080009ec <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <LL_DMA_SetMode+0x40>)
 80009fe:	5cd3      	ldrb	r3, [r2, r3]
 8000a00:	461a      	mov	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	4413      	add	r3, r2
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f023 0220 	bic.w	r2, r3, #32
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3b01      	subs	r3, #1
 8000a10:	4906      	ldr	r1, [pc, #24]	; (8000a2c <LL_DMA_SetMode+0x40>)
 8000a12:	5ccb      	ldrb	r3, [r1, r3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	440b      	add	r3, r1
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000a22:	bf00      	nop
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	08003124 	.word	0x08003124

08000a30 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	60f8      	str	r0, [r7, #12]
 8000a38:	60b9      	str	r1, [r7, #8]
 8000a3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <LL_DMA_SetPeriphIncMode+0x40>)
 8000a42:	5cd3      	ldrb	r3, [r2, r3]
 8000a44:	461a      	mov	r2, r3
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	4413      	add	r3, r2
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	4906      	ldr	r1, [pc, #24]	; (8000a70 <LL_DMA_SetPeriphIncMode+0x40>)
 8000a56:	5ccb      	ldrb	r3, [r1, r3]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	440b      	add	r3, r1
 8000a5e:	4619      	mov	r1, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	08003124 	.word	0x08003124

08000a74 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LL_DMA_SetMemoryIncMode+0x40>)
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4906      	ldr	r1, [pc, #24]	; (8000ab4 <LL_DMA_SetMemoryIncMode+0x40>)
 8000a9a:	5ccb      	ldrb	r3, [r1, r3]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	440b      	add	r3, r1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	08003124 	.word	0x08003124

08000ab8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <LL_DMA_SetPeriphSize+0x40>)
 8000aca:	5cd3      	ldrb	r3, [r2, r3]
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	4906      	ldr	r1, [pc, #24]	; (8000af8 <LL_DMA_SetPeriphSize+0x40>)
 8000ade:	5ccb      	ldrb	r3, [r1, r3]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	440b      	add	r3, r1
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	08003124 	.word	0x08003124

08000afc <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LL_DMA_SetMemorySize+0x40>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	461a      	mov	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4413      	add	r3, r2
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	4906      	ldr	r1, [pc, #24]	; (8000b3c <LL_DMA_SetMemorySize+0x40>)
 8000b22:	5ccb      	ldrb	r3, [r1, r3]
 8000b24:	4619      	mov	r1, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	440b      	add	r3, r1
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	08003124 	.word	0x08003124

08000b40 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
 8000b54:	461a      	mov	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	4906      	ldr	r1, [pc, #24]	; (8000b80 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000b66:	5ccb      	ldrb	r3, [r1, r3]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	440b      	add	r3, r1
 8000b6e:	4619      	mov	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	08003124 	.word	0x08003124

08000b84 <LL_USART_Enable>:
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	60da      	str	r2, [r3, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <LL_USART_ConfigAsyncMode>:
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	691b      	ldr	r3, [r3, #16]
 8000bae:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	695b      	ldr	r3, [r3, #20]
 8000bba:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	615a      	str	r2, [r3, #20]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bd6:	69da      	ldr	r2, [r3, #28]
 8000bd8:	4907      	ldr	r1, [pc, #28]	; (8000bf8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000be0:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000be2:	69da      	ldr	r2, [r3, #28]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4013      	ands	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	40021000 	.word	0x40021000

08000bfc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c06:	699a      	ldr	r2, [r3, #24]
 8000c08:	4907      	ldr	r1, [pc, #28]	; (8000c28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c12:	699a      	ldr	r2, [r3, #24]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4013      	ands	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000

08000c2c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]
 8000c42:	615a      	str	r2, [r3, #20]
 8000c44:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c54:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c58:	f7ff ffb8 	bl	8000bcc <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000c5c:	2004      	movs	r0, #4
 8000c5e:	f7ff ffcd 	bl	8000bfc <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000c62:	f240 4304 	movw	r3, #1028	; 0x404
 8000c66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c68:	2309      	movs	r3, #9
 8000c6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	463b      	mov	r3, r7
 8000c76:	4619      	mov	r1, r3
 8000c78:	482f      	ldr	r0, [pc, #188]	; (8000d38 <MX_USART2_UART_Init+0x10c>)
 8000c7a:	f001 fb05 	bl	8002288 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000c7e:	f640 0308 	movw	r3, #2056	; 0x808
 8000c82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000c84:	2304      	movs	r3, #4
 8000c86:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	482a      	ldr	r0, [pc, #168]	; (8000d38 <MX_USART2_UART_Init+0x10c>)
 8000c8e:	f001 fafb 	bl	8002288 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2106      	movs	r1, #6
 8000c96:	4829      	ldr	r0, [pc, #164]	; (8000d3c <MX_USART2_UART_Init+0x110>)
 8000c98:	f7ff fe84 	bl	80009a4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2106      	movs	r1, #6
 8000ca0:	4826      	ldr	r0, [pc, #152]	; (8000d3c <MX_USART2_UART_Init+0x110>)
 8000ca2:	f7ff ff4d 	bl	8000b40 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8000ca6:	2220      	movs	r2, #32
 8000ca8:	2106      	movs	r1, #6
 8000caa:	4824      	ldr	r0, [pc, #144]	; (8000d3c <MX_USART2_UART_Init+0x110>)
 8000cac:	f7ff fe9e 	bl	80009ec <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2106      	movs	r1, #6
 8000cb4:	4821      	ldr	r0, [pc, #132]	; (8000d3c <MX_USART2_UART_Init+0x110>)
 8000cb6:	f7ff febb 	bl	8000a30 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	2106      	movs	r1, #6
 8000cbe:	481f      	ldr	r0, [pc, #124]	; (8000d3c <MX_USART2_UART_Init+0x110>)
 8000cc0:	f7ff fed8 	bl	8000a74 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2106      	movs	r1, #6
 8000cc8:	481c      	ldr	r0, [pc, #112]	; (8000d3c <MX_USART2_UART_Init+0x110>)
 8000cca:	f7ff fef5 	bl	8000ab8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2106      	movs	r1, #6
 8000cd2:	481a      	ldr	r0, [pc, #104]	; (8000d3c <MX_USART2_UART_Init+0x110>)
 8000cd4:	f7ff ff12 	bl	8000afc <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000cd8:	f7ff fdde 	bl	8000898 <__NVIC_GetPriorityGrouping>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fe2c 	bl	8000940 <NVIC_EncodePriority>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	4619      	mov	r1, r3
 8000cec:	2026      	movs	r0, #38	; 0x26
 8000cee:	f7ff fdfd 	bl	80008ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000cf2:	2026      	movs	r0, #38	; 0x26
 8000cf4:	f7ff fdde 	bl	80008b4 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8000cf8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cfc:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d0a:	230c      	movs	r3, #12
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4808      	ldr	r0, [pc, #32]	; (8000d40 <MX_USART2_UART_Init+0x114>)
 8000d1e:	f001 fcb7 	bl	8002690 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000d22:	4807      	ldr	r0, [pc, #28]	; (8000d40 <MX_USART2_UART_Init+0x114>)
 8000d24:	f7ff ff3d 	bl	8000ba2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_USART2_UART_Init+0x114>)
 8000d2a:	f7ff ff2b 	bl	8000b84 <LL_USART_Enable>

}
 8000d2e:	bf00      	nop
 8000d30:	3730      	adds	r7, #48	; 0x30
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40004400 	.word	0x40004400

08000d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d46:	e003      	b.n	8000d50 <LoopCopyDataInit>

08000d48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d4e:	3104      	adds	r1, #4

08000d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d50:	480a      	ldr	r0, [pc, #40]	; (8000d7c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d58:	d3f6      	bcc.n	8000d48 <CopyDataInit>
  ldr r2, =_sbss
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d5c:	e002      	b.n	8000d64 <LoopFillZerobss>

08000d5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d60:	f842 3b04 	str.w	r3, [r2], #4

08000d64 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d68:	d3f9      	bcc.n	8000d5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d6a:	f7ff fd8f 	bl	800088c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f001 fcf5 	bl	800275c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d72:	f7ff fbd7 	bl	8000524 <main>
  bx lr
 8000d76:	4770      	bx	lr
  ldr r3, =_sidata
 8000d78:	08003168 	.word	0x08003168
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d80:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000d84:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000d88:	20000124 	.word	0x20000124

08000d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d8c:	e7fe      	b.n	8000d8c <ADC1_2_IRQHandler>
	...

08000d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <HAL_Init+0x28>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <HAL_Init+0x28>)
 8000d9a:	f043 0310 	orr.w	r3, r3, #16
 8000d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da0:	2003      	movs	r0, #3
 8000da2:	f000 f923 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 f808 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dac:	f7ff fcc2 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40022000 	.word	0x40022000

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <HAL_InitTick+0x54>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x58>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f93b 	bl	8001056 <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e00e      	b.n	8000e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b0f      	cmp	r3, #15
 8000dee:	d80a      	bhi.n	8000e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df0:	2200      	movs	r2, #0
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	f04f 30ff 	mov.w	r0, #4294967295
 8000df8:	f000 f903 	bl	8001002 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dfc:	4a06      	ldr	r2, [pc, #24]	; (8000e18 <HAL_InitTick+0x5c>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e02:	2300      	movs	r3, #0
 8000e04:	e000      	b.n	8000e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000004 	.word	0x20000004

08000e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e20:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <HAL_IncTick+0x1c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_IncTick+0x20>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <HAL_IncTick+0x20>)
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	200000fc 	.word	0x200000fc

08000e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return uwTick;
 8000e44:	4b02      	ldr	r3, [pc, #8]	; (8000e50 <HAL_GetTick+0x10>)
 8000e46:	681b      	ldr	r3, [r3, #0]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	200000fc 	.word	0x200000fc

08000e54 <__NVIC_SetPriorityGrouping>:
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4906      	ldr	r1, [pc, #24]	; (8000eec <__NVIC_EnableIRQ+0x34>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr
 8000eec:	e000e100 	.word	0xe000e100

08000ef0 <__NVIC_SetPriority>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	6039      	str	r1, [r7, #0]
 8000efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	db0a      	blt.n	8000f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	490c      	ldr	r1, [pc, #48]	; (8000f3c <__NVIC_SetPriority+0x4c>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	440b      	add	r3, r1
 8000f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000f18:	e00a      	b.n	8000f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	b2da      	uxtb	r2, r3
 8000f1e:	4908      	ldr	r1, [pc, #32]	; (8000f40 <__NVIC_SetPriority+0x50>)
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	3b04      	subs	r3, #4
 8000f28:	0112      	lsls	r2, r2, #4
 8000f2a:	b2d2      	uxtb	r2, r2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	761a      	strb	r2, [r3, #24]
}
 8000f30:	bf00      	nop
 8000f32:	370c      	adds	r7, #12
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bc80      	pop	{r7}
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <NVIC_EncodePriority>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f003 0307 	and.w	r3, r3, #7
 8000f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	f1c3 0307 	rsb	r3, r3, #7
 8000f5e:	2b04      	cmp	r3, #4
 8000f60:	bf28      	it	cs
 8000f62:	2304      	movcs	r3, #4
 8000f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	2b06      	cmp	r3, #6
 8000f6c:	d902      	bls.n	8000f74 <NVIC_EncodePriority+0x30>
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3b03      	subs	r3, #3
 8000f72:	e000      	b.n	8000f76 <NVIC_EncodePriority+0x32>
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43da      	mvns	r2, r3
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa01 f303 	lsl.w	r3, r1, r3
 8000f96:	43d9      	mvns	r1, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9c:	4313      	orrs	r3, r2
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3724      	adds	r7, #36	; 0x24
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff90 	bl	8000ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff2d 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff42 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff90 	bl	8000f44 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5f 	bl	8000ef0 <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff35 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001072:	b087      	sub	sp, #28
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800108a:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <HAL_FLASH_Program+0xd8>)
 800108c:	7e1b      	ldrb	r3, [r3, #24]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d101      	bne.n	8001096 <HAL_FLASH_Program+0x26>
 8001092:	2302      	movs	r3, #2
 8001094:	e054      	b.n	8001140 <HAL_FLASH_Program+0xd0>
 8001096:	4b2c      	ldr	r3, [pc, #176]	; (8001148 <HAL_FLASH_Program+0xd8>)
 8001098:	2201      	movs	r2, #1
 800109a:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800109c:	f24c 3050 	movw	r0, #50000	; 0xc350
 80010a0:	f000 f9a0 	bl	80013e4 <FLASH_WaitForLastOperation>
 80010a4:	4603      	mov	r3, r0
 80010a6:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d144      	bne.n	8001138 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d102      	bne.n	80010ba <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80010b4:	2301      	movs	r3, #1
 80010b6:	757b      	strb	r3, [r7, #21]
 80010b8:	e007      	b.n	80010ca <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d102      	bne.n	80010c6 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80010c0:	2302      	movs	r3, #2
 80010c2:	757b      	strb	r3, [r7, #21]
 80010c4:	e001      	b.n	80010ca <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80010c6:	2304      	movs	r3, #4
 80010c8:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	75bb      	strb	r3, [r7, #22]
 80010ce:	e02d      	b.n	800112c <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80010d0:	7dbb      	ldrb	r3, [r7, #22]
 80010d2:	005a      	lsls	r2, r3, #1
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	eb02 0c03 	add.w	ip, r2, r3
 80010da:	7dbb      	ldrb	r3, [r7, #22]
 80010dc:	0119      	lsls	r1, r3, #4
 80010de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010e2:	f1c1 0620 	rsb	r6, r1, #32
 80010e6:	f1a1 0020 	sub.w	r0, r1, #32
 80010ea:	fa22 f401 	lsr.w	r4, r2, r1
 80010ee:	fa03 f606 	lsl.w	r6, r3, r6
 80010f2:	4334      	orrs	r4, r6
 80010f4:	fa23 f000 	lsr.w	r0, r3, r0
 80010f8:	4304      	orrs	r4, r0
 80010fa:	fa23 f501 	lsr.w	r5, r3, r1
 80010fe:	b2a3      	uxth	r3, r4
 8001100:	4619      	mov	r1, r3
 8001102:	4660      	mov	r0, ip
 8001104:	f000 f952 	bl	80013ac <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001108:	f24c 3050 	movw	r0, #50000	; 0xc350
 800110c:	f000 f96a 	bl	80013e4 <FLASH_WaitForLastOperation>
 8001110:	4603      	mov	r3, r0
 8001112:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_FLASH_Program+0xdc>)
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <HAL_FLASH_Program+0xdc>)
 800111a:	f023 0301 	bic.w	r3, r3, #1
 800111e:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001120:	7dfb      	ldrb	r3, [r7, #23]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d107      	bne.n	8001136 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8001126:	7dbb      	ldrb	r3, [r7, #22]
 8001128:	3301      	adds	r3, #1
 800112a:	75bb      	strb	r3, [r7, #22]
 800112c:	7dba      	ldrb	r2, [r7, #22]
 800112e:	7d7b      	ldrb	r3, [r7, #21]
 8001130:	429a      	cmp	r2, r3
 8001132:	d3cd      	bcc.n	80010d0 <HAL_FLASH_Program+0x60>
 8001134:	e000      	b.n	8001138 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001136:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_FLASH_Program+0xd8>)
 800113a:	2200      	movs	r2, #0
 800113c:	761a      	strb	r2, [r3, #24]

  return status;
 800113e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001140:	4618      	mov	r0, r3
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	20000100 	.word	0x20000100
 800114c:	40022000 	.word	0x40022000

08001150 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800115a:	4b6e      	ldr	r3, [pc, #440]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	f003 0310 	and.w	r3, r3, #16
 8001162:	2b00      	cmp	r3, #0
 8001164:	d105      	bne.n	8001172 <HAL_FLASH_IRQHandler+0x22>
 8001166:	4b6b      	ldr	r3, [pc, #428]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f003 0304 	and.w	r3, r3, #4
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00e      	beq.n	8001190 <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8001172:	4b69      	ldr	r3, [pc, #420]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8001178:	4b67      	ldr	r3, [pc, #412]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 800117a:	f04f 32ff 	mov.w	r2, #4294967295
 800117e:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8001180:	f000 f976 	bl	8001470 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f8d2 	bl	800132e <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800118a:	4b63      	ldr	r3, [pc, #396]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001190:	4b60      	ldr	r3, [pc, #384]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0320 	and.w	r3, r3, #32
 8001198:	2b00      	cmp	r3, #0
 800119a:	f000 80a2 	beq.w	80012e2 <HAL_FLASH_IRQHandler+0x192>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 80011a0:	2220      	movs	r2, #32
 80011a2:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 80011a4:	4b5c      	ldr	r3, [pc, #368]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 8099 	beq.w	80012e2 <HAL_FLASH_IRQHandler+0x192>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 80011b0:	4b59      	ldr	r3, [pc, #356]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d12d      	bne.n	8001216 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	4a55      	ldr	r2, [pc, #340]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80011c2:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 80011c4:	4b54      	ldr	r3, [pc, #336]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d017      	beq.n	80011fc <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 80011cc:	4b52      	ldr	r3, [pc, #328]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f8a2 	bl	800131c <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80011d8:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80011e0:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80011e2:	4a4d      	ldr	r2, [pc, #308]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80011e8:	4b4a      	ldr	r3, [pc, #296]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	4a49      	ldr	r2, [pc, #292]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 80011ee:	f023 0302 	bic.w	r3, r3, #2
 80011f2:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fa13 	bl	8001620 <FLASH_PageErase>
 80011fa:	e072      	b.n	80012e2 <HAL_FLASH_IRQHandler+0x192>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4a45      	ldr	r2, [pc, #276]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001208:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f884 	bl	800131c <HAL_FLASH_EndOfOperationCallback>
 8001214:	e065      	b.n	80012e2 <HAL_FLASH_IRQHandler+0x192>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8001216:	4b40      	ldr	r3, [pc, #256]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d10c      	bne.n	800123a <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	4a3b      	ldr	r2, [pc, #236]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 8001226:	f023 0304 	bic.w	r3, r3, #4
 800122a:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 800122c:	2000      	movs	r0, #0
 800122e:	f000 f875 	bl	800131c <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001234:	2200      	movs	r2, #0
 8001236:	701a      	strb	r2, [r3, #0]
 8001238:	e053      	b.n	80012e2 <HAL_FLASH_IRQHandler+0x192>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 800123a:	4b37      	ldr	r3, [pc, #220]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	4a35      	ldr	r2, [pc, #212]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001242:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8001244:	4b34      	ldr	r3, [pc, #208]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d026      	beq.n	800129a <HAL_FLASH_IRQHandler+0x14a>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	3302      	adds	r3, #2
 8001252:	4a31      	ldr	r2, [pc, #196]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001254:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8001256:	4b30      	ldr	r3, [pc, #192]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 800125c:	4b2e      	ldr	r3, [pc, #184]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 800125e:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	f04f 0400 	mov.w	r4, #0
 800126a:	0c0b      	lsrs	r3, r1, #16
 800126c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001270:	0c14      	lsrs	r4, r2, #16
 8001272:	4a29      	ldr	r2, [pc, #164]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001274:	e9c2 3404 	strd	r3, r4, [r2, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001278:	4b26      	ldr	r3, [pc, #152]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 800127a:	691b      	ldr	r3, [r3, #16]
 800127c:	4a25      	ldr	r2, [pc, #148]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001284:	4b24      	ldr	r3, [pc, #144]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001286:	f103 0410 	add.w	r4, r3, #16
 800128a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800128e:	b29b      	uxth	r3, r3
 8001290:	4619      	mov	r1, r3
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f88a 	bl	80013ac <FLASH_Program_HalfWord>
 8001298:	e023      	b.n	80012e2 <HAL_FLASH_IRQHandler+0x192>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 800129a:	4b1f      	ldr	r3, [pc, #124]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d105      	bne.n	80012b0 <HAL_FLASH_IRQHandler+0x160>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80012a4:	4b1c      	ldr	r3, [pc, #112]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f837 	bl	800131c <HAL_FLASH_EndOfOperationCallback>
 80012ae:	e011      	b.n	80012d4 <HAL_FLASH_IRQHandler+0x184>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	d106      	bne.n	80012c8 <HAL_FLASH_IRQHandler+0x178>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	3b02      	subs	r3, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 f82b 	bl	800131c <HAL_FLASH_EndOfOperationCallback>
 80012c6:	e005      	b.n	80012d4 <HAL_FLASH_IRQHandler+0x184>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	3b06      	subs	r3, #6
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f824 	bl	800131c <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80012d6:	f04f 32ff 	mov.w	r2, #4294967295
 80012da:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10e      	bne.n	800130a <HAL_FLASH_IRQHandler+0x1ba>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 80012f2:	f023 0307 	bic.w	r3, r3, #7
 80012f6:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	4a05      	ldr	r2, [pc, #20]	; (8001314 <HAL_FLASH_IRQHandler+0x1c4>)
 80012fe:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 8001302:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <HAL_FLASH_IRQHandler+0x1c8>)
 8001306:	2200      	movs	r2, #0
 8001308:	761a      	strb	r2, [r3, #24]
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}
 8001312:	bf00      	nop
 8001314:	40022000 	.word	0x40022000
 8001318:	20000100 	.word	0x20000100

0800131c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	bc80      	pop	{r7}
 800132c:	4770      	bx	lr

0800132e <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr

08001340 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800134a:	4b0d      	ldr	r3, [pc, #52]	; (8001380 <HAL_FLASH_Unlock+0x40>)
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00d      	beq.n	8001372 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001356:	4b0a      	ldr	r3, [pc, #40]	; (8001380 <HAL_FLASH_Unlock+0x40>)
 8001358:	4a0a      	ldr	r2, [pc, #40]	; (8001384 <HAL_FLASH_Unlock+0x44>)
 800135a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_FLASH_Unlock+0x40>)
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_FLASH_Unlock+0x48>)
 8001360:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <HAL_FLASH_Unlock+0x40>)
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001372:	79fb      	ldrb	r3, [r7, #7]
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40022000 	.word	0x40022000
 8001384:	45670123 	.word	0x45670123
 8001388:	cdef89ab 	.word	0xcdef89ab

0800138c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <HAL_FLASH_Lock+0x1c>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_FLASH_Lock+0x1c>)
 8001396:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800139a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	40022000 	.word	0x40022000

080013ac <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <FLASH_Program_HalfWord+0x30>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <FLASH_Program_HalfWord+0x34>)
 80013c0:	691b      	ldr	r3, [r3, #16]
 80013c2:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <FLASH_Program_HalfWord+0x34>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	887a      	ldrh	r2, [r7, #2]
 80013ce:	801a      	strh	r2, [r3, #0]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000100 	.word	0x20000100
 80013e0:	40022000 	.word	0x40022000

080013e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80013ec:	f7ff fd28 	bl	8000e40 <HAL_GetTick>
 80013f0:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80013f2:	e010      	b.n	8001416 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013fa:	d00c      	beq.n	8001416 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <FLASH_WaitForLastOperation+0x2e>
 8001402:	f7ff fd1d 	bl	8000e40 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	d201      	bcs.n	8001416 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e025      	b.n	8001462 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <FLASH_WaitForLastOperation+0x88>)
 8001418:	68db      	ldr	r3, [r3, #12]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1e8      	bne.n	80013f4 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <FLASH_WaitForLastOperation+0x88>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	2b00      	cmp	r3, #0
 800142c:	d002      	beq.n	8001434 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <FLASH_WaitForLastOperation+0x88>)
 8001430:	2220      	movs	r2, #32
 8001432:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001434:	4b0d      	ldr	r3, [pc, #52]	; (800146c <FLASH_WaitForLastOperation+0x88>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10b      	bne.n	8001458 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001440:	4b0a      	ldr	r3, [pc, #40]	; (800146c <FLASH_WaitForLastOperation+0x88>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800144c:	4b07      	ldr	r3, [pc, #28]	; (800146c <FLASH_WaitForLastOperation+0x88>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001458:	f000 f80a 	bl	8001470 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e000      	b.n	8001462 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40022000 	.word	0x40022000

08001470 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800147a:	4b23      	ldr	r3, [pc, #140]	; (8001508 <FLASH_SetErrorCode+0x98>)
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <FLASH_SetErrorCode+0x9c>)
 8001488:	69db      	ldr	r3, [r3, #28]
 800148a:	f043 0302 	orr.w	r3, r3, #2
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <FLASH_SetErrorCode+0x9c>)
 8001490:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f043 0310 	orr.w	r3, r3, #16
 8001498:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800149a:	4b1b      	ldr	r3, [pc, #108]	; (8001508 <FLASH_SetErrorCode+0x98>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <FLASH_SetErrorCode+0x9c>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	4a17      	ldr	r2, [pc, #92]	; (800150c <FLASH_SetErrorCode+0x9c>)
 80014b0:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f043 0304 	orr.w	r3, r3, #4
 80014b8:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <FLASH_SetErrorCode+0x98>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <FLASH_SetErrorCode+0x9c>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f043 0304 	orr.w	r3, r3, #4
 80014ce:	4a0f      	ldr	r2, [pc, #60]	; (800150c <FLASH_SetErrorCode+0x9c>)
 80014d0:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <FLASH_SetErrorCode+0x98>)
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <FLASH_SetErrorCode+0x98>)
 80014d8:	f023 0301 	bic.w	r3, r3, #1
 80014dc:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f240 1201 	movw	r2, #257	; 0x101
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d106      	bne.n	80014f6 <FLASH_SetErrorCode+0x86>
 80014e8:	4b07      	ldr	r3, [pc, #28]	; (8001508 <FLASH_SetErrorCode+0x98>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	4a06      	ldr	r2, [pc, #24]	; (8001508 <FLASH_SetErrorCode+0x98>)
 80014ee:	f023 0301 	bic.w	r3, r3, #1
 80014f2:	61d3      	str	r3, [r2, #28]
}  
 80014f4:	e002      	b.n	80014fc <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <FLASH_SetErrorCode+0x98>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	60d3      	str	r3, [r2, #12]
}  
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40022000 	.word	0x40022000
 800150c:	20000100 	.word	0x20000100

08001510 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001522:	4b2f      	ldr	r3, [pc, #188]	; (80015e0 <HAL_FLASHEx_Erase+0xd0>)
 8001524:	7e1b      	ldrb	r3, [r3, #24]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d101      	bne.n	800152e <HAL_FLASHEx_Erase+0x1e>
 800152a:	2302      	movs	r3, #2
 800152c:	e053      	b.n	80015d6 <HAL_FLASHEx_Erase+0xc6>
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <HAL_FLASHEx_Erase+0xd0>)
 8001530:	2201      	movs	r2, #1
 8001532:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d116      	bne.n	800156a <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800153c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001540:	f7ff ff50 	bl	80013e4 <FLASH_WaitForLastOperation>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d141      	bne.n	80015ce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800154a:	2001      	movs	r0, #1
 800154c:	f000 f84c 	bl	80015e8 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001550:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001554:	f7ff ff46 	bl	80013e4 <FLASH_WaitForLastOperation>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800155c:	4b21      	ldr	r3, [pc, #132]	; (80015e4 <HAL_FLASHEx_Erase+0xd4>)
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	4a20      	ldr	r2, [pc, #128]	; (80015e4 <HAL_FLASHEx_Erase+0xd4>)
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	6113      	str	r3, [r2, #16]
 8001568:	e031      	b.n	80015ce <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800156a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800156e:	f7ff ff39 	bl	80013e4 <FLASH_WaitForLastOperation>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d12a      	bne.n	80015ce <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f04f 32ff 	mov.w	r2, #4294967295
 800157e:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	e019      	b.n	80015bc <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001588:	68b8      	ldr	r0, [r7, #8]
 800158a:	f000 f849 	bl	8001620 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800158e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001592:	f7ff ff27 	bl	80013e4 <FLASH_WaitForLastOperation>
 8001596:	4603      	mov	r3, r0
 8001598:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_FLASHEx_Erase+0xd4>)
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	4a11      	ldr	r2, [pc, #68]	; (80015e4 <HAL_FLASHEx_Erase+0xd4>)
 80015a0:	f023 0302 	bic.w	r3, r3, #2
 80015a4:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d003      	beq.n	80015b4 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	601a      	str	r2, [r3, #0]
            break;
 80015b2:	e00c      	b.n	80015ce <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015ba:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	029a      	lsls	r2, r3, #10
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d3dc      	bcc.n	8001588 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80015ce:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <HAL_FLASHEx_Erase+0xd0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	761a      	strb	r2, [r3, #24]

  return status;
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000100 	.word	0x20000100
 80015e4:	40022000 	.word	0x40022000

080015e8 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <FLASH_MassErase+0x30>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <FLASH_MassErase+0x34>)
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <FLASH_MassErase+0x34>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <FLASH_MassErase+0x34>)
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	4a05      	ldr	r2, [pc, #20]	; (800161c <FLASH_MassErase+0x34>)
 8001608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800160c:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	20000100 	.word	0x20000100
 800161c:	40022000 	.word	0x40022000

08001620 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <FLASH_PageErase+0x38>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <FLASH_PageErase+0x3c>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <FLASH_PageErase+0x3c>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <FLASH_PageErase+0x3c>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <FLASH_PageErase+0x3c>)
 8001642:	691b      	ldr	r3, [r3, #16]
 8001644:	4a05      	ldr	r2, [pc, #20]	; (800165c <FLASH_PageErase+0x3c>)
 8001646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800164a:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000100 	.word	0x20000100
 800165c:	40022000 	.word	0x40022000

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b480      	push	{r7}
 8001662:	b08b      	sub	sp, #44	; 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	e127      	b.n	80018c4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001674:	2201      	movs	r2, #1
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	429a      	cmp	r2, r3
 800168e:	f040 8116 	bne.w	80018be <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b12      	cmp	r3, #18
 8001698:	d034      	beq.n	8001704 <HAL_GPIO_Init+0xa4>
 800169a:	2b12      	cmp	r3, #18
 800169c:	d80d      	bhi.n	80016ba <HAL_GPIO_Init+0x5a>
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d02b      	beq.n	80016fa <HAL_GPIO_Init+0x9a>
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d804      	bhi.n	80016b0 <HAL_GPIO_Init+0x50>
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d031      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d01c      	beq.n	80016e8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ae:	e048      	b.n	8001742 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d043      	beq.n	800173c <HAL_GPIO_Init+0xdc>
 80016b4:	2b11      	cmp	r3, #17
 80016b6:	d01b      	beq.n	80016f0 <HAL_GPIO_Init+0x90>
          break;
 80016b8:	e043      	b.n	8001742 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016ba:	4a89      	ldr	r2, [pc, #548]	; (80018e0 <HAL_GPIO_Init+0x280>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d026      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016c0:	4a87      	ldr	r2, [pc, #540]	; (80018e0 <HAL_GPIO_Init+0x280>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d806      	bhi.n	80016d4 <HAL_GPIO_Init+0x74>
 80016c6:	4a87      	ldr	r2, [pc, #540]	; (80018e4 <HAL_GPIO_Init+0x284>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d020      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016cc:	4a86      	ldr	r2, [pc, #536]	; (80018e8 <HAL_GPIO_Init+0x288>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01d      	beq.n	800170e <HAL_GPIO_Init+0xae>
          break;
 80016d2:	e036      	b.n	8001742 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016d4:	4a85      	ldr	r2, [pc, #532]	; (80018ec <HAL_GPIO_Init+0x28c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016da:	4a85      	ldr	r2, [pc, #532]	; (80018f0 <HAL_GPIO_Init+0x290>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d016      	beq.n	800170e <HAL_GPIO_Init+0xae>
 80016e0:	4a84      	ldr	r2, [pc, #528]	; (80018f4 <HAL_GPIO_Init+0x294>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d013      	beq.n	800170e <HAL_GPIO_Init+0xae>
          break;
 80016e6:	e02c      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	623b      	str	r3, [r7, #32]
          break;
 80016ee:	e028      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	3304      	adds	r3, #4
 80016f6:	623b      	str	r3, [r7, #32]
          break;
 80016f8:	e023      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	3308      	adds	r3, #8
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e01e      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	330c      	adds	r3, #12
 800170a:	623b      	str	r3, [r7, #32]
          break;
 800170c:	e019      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001716:	2304      	movs	r3, #4
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e012      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d105      	bne.n	8001730 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001724:	2308      	movs	r3, #8
 8001726:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69fa      	ldr	r2, [r7, #28]
 800172c:	611a      	str	r2, [r3, #16]
          break;
 800172e:	e008      	b.n	8001742 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001730:	2308      	movs	r3, #8
 8001732:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69fa      	ldr	r2, [r7, #28]
 8001738:	615a      	str	r2, [r3, #20]
          break;
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
          break;
 8001740:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	2bff      	cmp	r3, #255	; 0xff
 8001746:	d801      	bhi.n	800174c <HAL_GPIO_Init+0xec>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	e001      	b.n	8001750 <HAL_GPIO_Init+0xf0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3304      	adds	r3, #4
 8001750:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2bff      	cmp	r3, #255	; 0xff
 8001756:	d802      	bhi.n	800175e <HAL_GPIO_Init+0xfe>
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x104>
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	3b08      	subs	r3, #8
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	210f      	movs	r1, #15
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	401a      	ands	r2, r3
 8001776:	6a39      	ldr	r1, [r7, #32]
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	431a      	orrs	r2, r3
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 8096 	beq.w	80018be <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001792:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_GPIO_Init+0x298>)
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_GPIO_Init+0x298>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6193      	str	r3, [r2, #24]
 800179e:	4b56      	ldr	r3, [pc, #344]	; (80018f8 <HAL_GPIO_Init+0x298>)
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017aa:	4a54      	ldr	r2, [pc, #336]	; (80018fc <HAL_GPIO_Init+0x29c>)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4013      	ands	r3, r2
 80017cc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4b      	ldr	r2, [pc, #300]	; (8001900 <HAL_GPIO_Init+0x2a0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x19e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4a      	ldr	r2, [pc, #296]	; (8001904 <HAL_GPIO_Init+0x2a4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x19a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a49      	ldr	r2, [pc, #292]	; (8001908 <HAL_GPIO_Init+0x2a8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x196>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a48      	ldr	r2, [pc, #288]	; (800190c <HAL_GPIO_Init+0x2ac>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x192>
 80017ee:	2303      	movs	r3, #3
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017f2:	2304      	movs	r3, #4
 80017f4:	e004      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017f6:	2302      	movs	r3, #2
 80017f8:	e002      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <HAL_GPIO_Init+0x1a0>
 80017fe:	2300      	movs	r3, #0
 8001800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001802:	f002 0203 	and.w	r2, r2, #3
 8001806:	0092      	lsls	r2, r2, #2
 8001808:	4093      	lsls	r3, r2
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001810:	493a      	ldr	r1, [pc, #232]	; (80018fc <HAL_GPIO_Init+0x29c>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d006      	beq.n	8001838 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800182a:	4b39      	ldr	r3, [pc, #228]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4938      	ldr	r1, [pc, #224]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
 8001836:	e006      	b.n	8001846 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001838:	4b35      	ldr	r3, [pc, #212]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	43db      	mvns	r3, r3
 8001840:	4933      	ldr	r1, [pc, #204]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001842:	4013      	ands	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001854:	685a      	ldr	r2, [r3, #4]
 8001856:	492e      	ldr	r1, [pc, #184]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
 800185e:	e006      	b.n	800186e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	69bb      	ldr	r3, [r7, #24]
 8001866:	43db      	mvns	r3, r3
 8001868:	4929      	ldr	r1, [pc, #164]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800186a:	4013      	ands	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800187a:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	4924      	ldr	r1, [pc, #144]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	608b      	str	r3, [r1, #8]
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001888:	4b21      	ldr	r3, [pc, #132]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	43db      	mvns	r3, r3
 8001890:	491f      	ldr	r1, [pc, #124]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 8001892:	4013      	ands	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a2:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	491a      	ldr	r1, [pc, #104]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	60cb      	str	r3, [r1, #12]
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b0:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018b2:	68da      	ldr	r2, [r3, #12]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4915      	ldr	r1, [pc, #84]	; (8001910 <HAL_GPIO_Init+0x2b0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3301      	adds	r3, #1
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f47f aed0 	bne.w	8001674 <HAL_GPIO_Init+0x14>
  }
}
 80018d4:	bf00      	nop
 80018d6:	372c      	adds	r7, #44	; 0x2c
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	10210000 	.word	0x10210000
 80018e4:	10110000 	.word	0x10110000
 80018e8:	10120000 	.word	0x10120000
 80018ec:	10310000 	.word	0x10310000
 80018f0:	10320000 	.word	0x10320000
 80018f4:	10220000 	.word	0x10220000
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010000 	.word	0x40010000
 8001900:	40010800 	.word	0x40010800
 8001904:	40010c00 	.word	0x40010c00
 8001908:	40011000 	.word	0x40011000
 800190c:	40011400 	.word	0x40011400
 8001910:	40010400 	.word	0x40010400

08001914 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	460b      	mov	r3, r1
 800191e:	807b      	strh	r3, [r7, #2]
 8001920:	4613      	mov	r3, r2
 8001922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001924:	787b      	ldrb	r3, [r7, #1]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d003      	beq.n	8001932 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192a:	887a      	ldrh	r2, [r7, #2]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001930:	e003      	b.n	800193a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	041a      	lsls	r2, r3, #16
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	611a      	str	r2, [r3, #16]
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e26c      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8087 	beq.w	8001a72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001964:	4b92      	ldr	r3, [pc, #584]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b04      	cmp	r3, #4
 800196e:	d00c      	beq.n	800198a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001970:	4b8f      	ldr	r3, [pc, #572]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d112      	bne.n	80019a2 <HAL_RCC_OscConfig+0x5e>
 800197c:	4b8c      	ldr	r3, [pc, #560]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001988:	d10b      	bne.n	80019a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198a:	4b89      	ldr	r3, [pc, #548]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d06c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x12c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d168      	bne.n	8001a70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e246      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x76>
 80019ac:	4b80      	ldr	r3, [pc, #512]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a7f      	ldr	r2, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e02e      	b.n	8001a18 <HAL_RCC_OscConfig+0xd4>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x98>
 80019c2:	4b7b      	ldr	r3, [pc, #492]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7a      	ldr	r2, [pc, #488]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b78      	ldr	r3, [pc, #480]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a77      	ldr	r2, [pc, #476]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xd4>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0xbc>
 80019e6:	4b72      	ldr	r3, [pc, #456]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a71      	ldr	r2, [pc, #452]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b6f      	ldr	r3, [pc, #444]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a6e      	ldr	r2, [pc, #440]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xd4>
 8001a00:	4b6b      	ldr	r3, [pc, #428]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6a      	ldr	r2, [pc, #424]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fa0e 	bl	8000e40 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fa0a 	bl	8000e40 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e1fa      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xe4>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff f9fa 	bl	8000e40 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff f9f6 	bl	8000e40 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1e6      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x10c>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7e:	4b4c      	ldr	r3, [pc, #304]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a8a:	4b49      	ldr	r3, [pc, #292]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d11c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x18c>
 8001a96:	4b46      	ldr	r3, [pc, #280]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	4b43      	ldr	r3, [pc, #268]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x176>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1ba      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4939      	ldr	r1, [pc, #228]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b36      	ldr	r3, [pc, #216]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ade:	f7ff f9af 	bl	8000e40 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff f9ab 	bl	8000e40 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e19b      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4927      	ldr	r1, [pc, #156]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b26      	ldr	r3, [pc, #152]	; (8001bb4 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff f98e 	bl	8000e40 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff f98a 	bl	8000e40 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e17a      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d03a      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d019      	beq.n	8001b8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7ff f96e 	bl	8000e40 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff f96a 	bl	8000e40 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e15a      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b86:	2001      	movs	r0, #1
 8001b88:	f000 faa8 	bl	80020dc <RCC_Delay>
 8001b8c:	e01c      	b.n	8001bc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <HAL_RCC_OscConfig+0x274>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7ff f954 	bl	8000e40 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9a:	e00f      	b.n	8001bbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7ff f950 	bl	8000e40 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d908      	bls.n	8001bbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e140      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	42420000 	.word	0x42420000
 8001bb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bbc:	4b9e      	ldr	r3, [pc, #632]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1e9      	bne.n	8001b9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a6 	beq.w	8001d22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bda:	4b97      	ldr	r3, [pc, #604]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10d      	bne.n	8001c02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b94      	ldr	r3, [pc, #592]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	4a93      	ldr	r2, [pc, #588]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf0:	61d3      	str	r3, [r2, #28]
 8001bf2:	4b91      	ldr	r3, [pc, #580]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c02:	4b8e      	ldr	r3, [pc, #568]	; (8001e3c <HAL_RCC_OscConfig+0x4f8>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d118      	bne.n	8001c40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a8a      	ldr	r2, [pc, #552]	; (8001e3c <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1a:	f7ff f911 	bl	8000e40 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7ff f90d 	bl	8000e40 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b64      	cmp	r3, #100	; 0x64
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e0fd      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c34:	4b81      	ldr	r3, [pc, #516]	; (8001e3c <HAL_RCC_OscConfig+0x4f8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x312>
 8001c48:	4b7b      	ldr	r3, [pc, #492]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	4a7a      	ldr	r2, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6213      	str	r3, [r2, #32]
 8001c54:	e02d      	b.n	8001cb2 <HAL_RCC_OscConfig+0x36e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x334>
 8001c5e:	4b76      	ldr	r3, [pc, #472]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	4a75      	ldr	r2, [pc, #468]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	6213      	str	r3, [r2, #32]
 8001c6a:	4b73      	ldr	r3, [pc, #460]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a72      	ldr	r2, [pc, #456]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	e01c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x36e>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d10c      	bne.n	8001c9a <HAL_RCC_OscConfig+0x356>
 8001c80:	4b6d      	ldr	r3, [pc, #436]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4a6c      	ldr	r2, [pc, #432]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6213      	str	r3, [r2, #32]
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a69      	ldr	r2, [pc, #420]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	e00b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x36e>
 8001c9a:	4b67      	ldr	r3, [pc, #412]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a66      	ldr	r2, [pc, #408]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	4b64      	ldr	r3, [pc, #400]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a63      	ldr	r2, [pc, #396]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d015      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7ff f8c1 	bl	8000e40 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7ff f8bd 	bl	8000e40 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e0ab      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cd8:	4b57      	ldr	r3, [pc, #348]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ee      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x37e>
 8001ce4:	e014      	b.n	8001d10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f8ab 	bl	8000e40 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff f8a7 	bl	8000e40 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e095      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ee      	bne.n	8001cee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d105      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d16:	4b48      	ldr	r3, [pc, #288]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a47      	ldr	r2, [pc, #284]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8081 	beq.w	8001e2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d2c:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 030c 	and.w	r3, r3, #12
 8001d34:	2b08      	cmp	r3, #8
 8001d36:	d061      	beq.n	8001dfc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d146      	bne.n	8001dce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_OscConfig+0x4fc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7ff f87b 	bl	8000e40 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7ff f877 	bl	8000e40 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e067      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d60:	4b35      	ldr	r3, [pc, #212]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d108      	bne.n	8001d88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d76:	4b30      	ldr	r3, [pc, #192]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	492d      	ldr	r1, [pc, #180]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d88:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a19      	ldr	r1, [r3, #32]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	4927      	ldr	r1, [pc, #156]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da0:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <HAL_RCC_OscConfig+0x4fc>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7ff f84b 	bl	8000e40 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7ff f847 	bl	8000e40 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e037      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0f0      	beq.n	8001dae <HAL_RCC_OscConfig+0x46a>
 8001dcc:	e02f      	b.n	8001e2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <HAL_RCC_OscConfig+0x4fc>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f834 	bl	8000e40 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff f830 	bl	8000e40 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e020      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <HAL_RCC_OscConfig+0x498>
 8001dfa:	e018      	b.n	8001e2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e013      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_RCC_OscConfig+0x4f4>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d106      	bne.n	8001e2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d001      	beq.n	8001e2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40007000 	.word	0x40007000
 8001e40:	42420060 	.word	0x42420060

08001e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0d0      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b6a      	ldr	r3, [pc, #424]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0307 	and.w	r3, r3, #7
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d910      	bls.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b67      	ldr	r3, [pc, #412]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 0207 	bic.w	r2, r3, #7
 8001e6e:	4965      	ldr	r1, [pc, #404]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e76:	4b63      	ldr	r3, [pc, #396]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0b8      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d020      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea0:	4b59      	ldr	r3, [pc, #356]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a58      	ldr	r2, [pc, #352]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eaa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eb8:	4b53      	ldr	r3, [pc, #332]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	4a52      	ldr	r2, [pc, #328]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ec2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec4:	4b50      	ldr	r3, [pc, #320]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	494d      	ldr	r1, [pc, #308]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d040      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d115      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e07f      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f02:	4b41      	ldr	r3, [pc, #260]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e073      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e06b      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f023 0203 	bic.w	r2, r3, #3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	4936      	ldr	r1, [pc, #216]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7fe ff84 	bl	8000e40 <HAL_GetTick>
 8001f38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3a:	e00a      	b.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3c:	f7fe ff80 	bl	8000e40 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e053      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 020c 	and.w	r2, r3, #12
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1eb      	bne.n	8001f3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0307 	and.w	r3, r3, #7
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d210      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 0207 	bic.w	r2, r3, #7
 8001f7a:	4922      	ldr	r1, [pc, #136]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	683a      	ldr	r2, [r7, #0]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d001      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e032      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	4916      	ldr	r1, [pc, #88]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d009      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	490e      	ldr	r1, [pc, #56]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fd2:	f000 f821 	bl	8002018 <HAL_RCC_GetSysClockFreq>
 8001fd6:	4601      	mov	r1, r0
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	; (800200c <HAL_RCC_ClockConfig+0x1c8>)
 8001fe4:	5cd3      	ldrb	r3, [r2, r3]
 8001fe6:	fa21 f303 	lsr.w	r3, r1, r3
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <HAL_RCC_ClockConfig+0x1cc>)
 8001fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1d0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fee2 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	40022000 	.word	0x40022000
 8002008:	40021000 	.word	0x40021000
 800200c:	0800310c 	.word	0x0800310c
 8002010:	20000000 	.word	0x20000000
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002018:	b490      	push	{r4, r7}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800201e:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002020:	1d3c      	adds	r4, r7, #4
 8002022:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002024:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002028:	4b28      	ldr	r3, [pc, #160]	; (80020cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002042:	4b23      	ldr	r3, [pc, #140]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d002      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x40>
 8002052:	2b08      	cmp	r3, #8
 8002054:	d003      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x46>
 8002056:	e02d      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800205a:	623b      	str	r3, [r7, #32]
      break;
 800205c:	e02d      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	0c9b      	lsrs	r3, r3, #18
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800206a:	4413      	add	r3, r2
 800206c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002070:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d013      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0c5b      	lsrs	r3, r3, #17
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800208a:	4413      	add	r3, r2
 800208c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002090:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002096:	fb02 f203 	mul.w	r2, r2, r3
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
 80020a2:	e004      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	4a0c      	ldr	r2, [pc, #48]	; (80020d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020a8:	fb02 f303 	mul.w	r3, r2, r3
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	623b      	str	r3, [r7, #32]
      break;
 80020b2:	e002      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020b4:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020b6:	623b      	str	r3, [r7, #32]
      break;
 80020b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ba:	6a3b      	ldr	r3, [r7, #32]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bc90      	pop	{r4, r7}
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	080030f8 	.word	0x080030f8
 80020cc:	08003108 	.word	0x08003108
 80020d0:	40021000 	.word	0x40021000
 80020d4:	007a1200 	.word	0x007a1200
 80020d8:	003d0900 	.word	0x003d0900

080020dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020e4:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <RCC_Delay+0x34>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <RCC_Delay+0x38>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	0a5b      	lsrs	r3, r3, #9
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	fb02 f303 	mul.w	r3, r2, r3
 80020f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020f8:	bf00      	nop
  }
  while (Delay --);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1e5a      	subs	r2, r3, #1
 80020fe:	60fa      	str	r2, [r7, #12]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1f9      	bne.n	80020f8 <RCC_Delay+0x1c>
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	20000000 	.word	0x20000000
 8002114:	10624dd3 	.word	0x10624dd3

08002118 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002118:	b490      	push	{r4, r7}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	0e1b      	lsrs	r3, r3, #24
 800212c:	4413      	add	r3, r2
 800212e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002130:	6822      	ldr	r2, [r4, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	210f      	movs	r1, #15
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	61bb      	str	r3, [r7, #24]
  return result;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	fab3 f383 	clz	r3, r3
 8002164:	b2db      	uxtb	r3, r3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	4313      	orrs	r3, r2
 8002170:	6023      	str	r3, [r4, #0]
}
 8002172:	bf00      	nop
 8002174:	3720      	adds	r7, #32
 8002176:	46bd      	mov	sp, r7
 8002178:	bc90      	pop	{r4, r7}
 800217a:	4770      	bx	lr

0800217c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800217c:	b490      	push	{r4, r7}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	0e1b      	lsrs	r3, r3, #24
 8002190:	4413      	add	r3, r2
 8002192:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002194:	6822      	ldr	r2, [r4, #0]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	613b      	str	r3, [r7, #16]
  return result;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	2103      	movs	r1, #3
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	401a      	ands	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	61bb      	str	r3, [r7, #24]
  return result;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 80021d6:	bf00      	nop
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc90      	pop	{r4, r7}
 80021de:	4770      	bx	lr

080021e0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 80021e0:	b490      	push	{r4, r7}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	0e1b      	lsrs	r3, r3, #24
 80021f4:	4413      	add	r3, r2
 80021f6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80021f8:	6822      	ldr	r2, [r4, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	613b      	str	r3, [r7, #16]
  return result;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	2104      	movs	r1, #4
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	401a      	ands	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	61bb      	str	r3, [r7, #24]
  return result;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 800223a:	bf00      	nop
 800223c:	3720      	adds	r7, #32
 800223e:	46bd      	mov	sp, r7
 8002240:	bc90      	pop	{r4, r7}
 8002242:	4770      	bx	lr

08002244 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	68da      	ldr	r2, [r3, #12]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	613b      	str	r3, [r7, #16]
  return result;
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	4619      	mov	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	408b      	lsls	r3, r1
 8002278:	431a      	orrs	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	60da      	str	r2, [r3, #12]
}
 800227e:	bf00      	nop
 8002280:	371c      	adds	r7, #28
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	60fb      	str	r3, [r7, #12]
  return result;
 80022a8:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80022aa:	fab3 f383 	clz	r3, r3
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80022b2:	e040      	b.n	8002336 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80022b4:	2201      	movs	r2, #1
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	409a      	lsls	r2, r3
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d036      	beq.n	8002330 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b07      	cmp	r3, #7
 80022c6:	d806      	bhi.n	80022d6 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80022c8:	f240 1201 	movw	r2, #257	; 0x101
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	61bb      	str	r3, [r7, #24]
 80022d4:	e008      	b.n	80022e8 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b08      	subs	r3, #8
 80022da:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80022e6:	61bb      	str	r3, [r7, #24]

      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d003      	beq.n	80022f8 <LL_GPIO_Init+0x70>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b09      	cmp	r3, #9
 80022f6:	d10d      	bne.n	8002314 <LL_GPIO_Init+0x8c>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	461a      	mov	r2, r3
 80022fe:	69b9      	ldr	r1, [r7, #24]
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ff3b 	bl	800217c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	461a      	mov	r2, r3
 800230c:	69b9      	ldr	r1, [r7, #24]
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ff66 	bl	80021e0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	461a      	mov	r2, r3
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff91 	bl	8002244 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	461a      	mov	r2, r3
 8002328:	69b9      	ldr	r1, [r7, #24]
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fef4 	bl	8002118 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	3301      	adds	r3, #1
 8002334:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	fa22 f303 	lsr.w	r3, r2, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1b8      	bne.n	80022b4 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <LL_RCC_GetSysClkSource+0x14>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40021000 	.word	0x40021000

08002364 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <LL_RCC_GetAHBPrescaler+0x14>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002370:	4618      	mov	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	40021000 	.word	0x40021000

0800237c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr
 8002390:	40021000 	.word	0x40021000

08002394 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <LL_RCC_GetAPB2Prescaler+0x14>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000

080023ac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <LL_RCC_PLL_GetMainSource+0x14>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr
 80023c0:	40021000 	.word	0x40021000

080023c4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40021000 	.word	0x40021000

080023dc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <LL_RCC_PLL_GetPrediv+0x18>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	0c5b      	lsrs	r3, r3, #17
 80023e6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40021000 	.word	0x40021000

080023f8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002400:	f000 f820 	bl	8002444 <RCC_GetSystemClockFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f83a 	bl	8002488 <RCC_GetHCLKClockFreq>
 8002414:	4602      	mov	r2, r0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	4618      	mov	r0, r3
 8002420:	f000 f848 	bl	80024b4 <RCC_GetPCLK1ClockFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f854 	bl	80024dc <RCC_GetPCLK2ClockFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60da      	str	r2, [r3, #12]
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800244e:	f7ff ff7d 	bl	800234c <LL_RCC_GetSysClkSource>
 8002452:	4603      	mov	r3, r0
 8002454:	2b04      	cmp	r3, #4
 8002456:	d006      	beq.n	8002466 <RCC_GetSystemClockFreq+0x22>
 8002458:	2b08      	cmp	r3, #8
 800245a:	d007      	beq.n	800246c <RCC_GetSystemClockFreq+0x28>
 800245c:	2b00      	cmp	r3, #0
 800245e:	d109      	bne.n	8002474 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <RCC_GetSystemClockFreq+0x40>)
 8002462:	607b      	str	r3, [r7, #4]
      break;
 8002464:	e009      	b.n	800247a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <RCC_GetSystemClockFreq+0x40>)
 8002468:	607b      	str	r3, [r7, #4]
      break;
 800246a:	e006      	b.n	800247a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800246c:	f000 f84a 	bl	8002504 <RCC_PLL_GetFreqDomain_SYS>
 8002470:	6078      	str	r0, [r7, #4]
      break;
 8002472:	e002      	b.n	800247a <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <RCC_GetSystemClockFreq+0x40>)
 8002476:	607b      	str	r3, [r7, #4]
      break;
 8002478:	bf00      	nop
  }

  return frequency;
 800247a:	687b      	ldr	r3, [r7, #4]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	007a1200 	.word	0x007a1200

08002488 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002490:	f7ff ff68 	bl	8002364 <LL_RCC_GetAHBPrescaler>
 8002494:	4603      	mov	r3, r0
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f003 030f 	and.w	r3, r3, #15
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <RCC_GetHCLKClockFreq+0x28>)
 800249e:	5cd3      	ldrb	r3, [r2, r3]
 80024a0:	461a      	mov	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	40d3      	lsrs	r3, r2
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	0800310c 	.word	0x0800310c

080024b4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80024bc:	f7ff ff5e 	bl	800237c <LL_RCC_GetAPB1Prescaler>
 80024c0:	4603      	mov	r3, r0
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <RCC_GetPCLK1ClockFreq+0x24>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	461a      	mov	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	40d3      	lsrs	r3, r2
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	0800311c 	.word	0x0800311c

080024dc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80024e4:	f7ff ff56 	bl	8002394 <LL_RCC_GetAPB2Prescaler>
 80024e8:	4603      	mov	r3, r0
 80024ea:	0adb      	lsrs	r3, r3, #11
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <RCC_GetPCLK2ClockFreq+0x24>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	461a      	mov	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	40d3      	lsrs	r3, r2
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	0800311c 	.word	0x0800311c

08002504 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002512:	f7ff ff4b 	bl	80023ac <LL_RCC_PLL_GetMainSource>
 8002516:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002522:	d003      	beq.n	800252c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002524:	e00b      	b.n	800253e <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8002528:	607b      	str	r3, [r7, #4]
      break;
 800252a:	e00b      	b.n	8002544 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800252c:	f7ff ff56 	bl	80023dc <LL_RCC_PLL_GetPrediv>
 8002530:	4603      	mov	r3, r0
 8002532:	3301      	adds	r3, #1
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	607b      	str	r3, [r7, #4]
      break;
 800253c:	e002      	b.n	8002544 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8002540:	607b      	str	r3, [r7, #4]
      break;
 8002542:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002544:	f7ff ff3e 	bl	80023c4 <LL_RCC_PLL_GetMultiplicator>
 8002548:	4603      	mov	r3, r0
 800254a:	0c9b      	lsrs	r3, r3, #18
 800254c:	3302      	adds	r3, #2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	fb02 f303 	mul.w	r3, r2, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	003d0900 	.word	0x003d0900
 8002560:	007a1200 	.word	0x007a1200

08002564 <LL_USART_IsEnabled>:
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002578:	bf0c      	ite	eq
 800257a:	2301      	moveq	r3, #1
 800257c:	2300      	movne	r3, #0
 800257e:	b2db      	uxtb	r3, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	bc80      	pop	{r7}
 8002588:	4770      	bx	lr

0800258a <LL_USART_SetStopBitsLength>:
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	611a      	str	r2, [r3, #16]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <LL_USART_SetHWFlowCtrl>:
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
 80025b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	615a      	str	r2, [r3, #20]
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
	...

080025d4 <LL_USART_SetBaudRate>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80025e0:	68ba      	ldr	r2, [r7, #8]
 80025e2:	4613      	mov	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	009a      	lsls	r2, r3, #2
 80025ea:	441a      	add	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	4a25      	ldr	r2, [pc, #148]	; (800268c <LL_USART_SetBaudRate+0xb8>)
 80025f6:	fba2 2303 	umull	r2, r3, r2, r3
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	b299      	uxth	r1, r3
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	4613      	mov	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	009a      	lsls	r2, r3, #2
 800260c:	441a      	add	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	fbb2 f2f3 	udiv	r2, r2, r3
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <LL_USART_SetBaudRate+0xb8>)
 8002618:	fba3 0302 	umull	r0, r3, r3, r2
 800261c:	095b      	lsrs	r3, r3, #5
 800261e:	2064      	movs	r0, #100	; 0x64
 8002620:	fb00 f303 	mul.w	r3, r0, r3
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	3332      	adds	r3, #50	; 0x32
 800262a:	4a18      	ldr	r2, [pc, #96]	; (800268c <LL_USART_SetBaudRate+0xb8>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	095b      	lsrs	r3, r3, #5
 8002632:	b29b      	uxth	r3, r3
 8002634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002638:	b29b      	uxth	r3, r3
 800263a:	440b      	add	r3, r1
 800263c:	b299      	uxth	r1, r3
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	4613      	mov	r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	441a      	add	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <LL_USART_SetBaudRate+0xb8>)
 8002654:	fba3 0302 	umull	r0, r3, r3, r2
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	2064      	movs	r0, #100	; 0x64
 800265c:	fb00 f303 	mul.w	r3, r0, r3
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	3332      	adds	r3, #50	; 0x32
 8002666:	4a09      	ldr	r2, [pc, #36]	; (800268c <LL_USART_SetBaudRate+0xb8>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	095b      	lsrs	r3, r3, #5
 800266e:	b29b      	uxth	r3, r3
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	b29b      	uxth	r3, r3
 8002676:	440b      	add	r3, r1
 8002678:	b29b      	uxth	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	609a      	str	r2, [r3, #8]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	51eb851f 	.word	0x51eb851f

08002690 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b088      	sub	sp, #32
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ff5e 	bl	8002564 <LL_USART_IsEnabled>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d145      	bne.n	800273a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80026b6:	f023 030c 	bic.w	r3, r3, #12
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	6851      	ldr	r1, [r2, #4]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	68d2      	ldr	r2, [r2, #12]
 80026c2:	4311      	orrs	r1, r2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	6912      	ldr	r2, [r2, #16]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f7ff ff57 	bl	800258a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	4619      	mov	r1, r3
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ff63 	bl	80025ae <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80026e8:	f107 0308 	add.w	r3, r7, #8
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fe83 	bl	80023f8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a13      	ldr	r2, [pc, #76]	; (8002744 <LL_USART_Init+0xb4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d102      	bne.n	8002700 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	e00c      	b.n	800271a <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a11      	ldr	r2, [pc, #68]	; (8002748 <LL_USART_Init+0xb8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d102      	bne.n	800270e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	e005      	b.n	800271a <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a0e      	ldr	r2, [pc, #56]	; (800274c <LL_USART_Init+0xbc>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00c      	beq.n	800273a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002728:	2300      	movs	r3, #0
 800272a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	69b9      	ldr	r1, [r7, #24]
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff ff4d 	bl	80025d4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800273a:	7ffb      	ldrb	r3, [r7, #31]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40013800 	.word	0x40013800
 8002748:	40004400 	.word	0x40004400
 800274c:	40004800 	.word	0x40004800

08002750 <__errno>:
 8002750:	4b01      	ldr	r3, [pc, #4]	; (8002758 <__errno+0x8>)
 8002752:	6818      	ldr	r0, [r3, #0]
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	2000000c 	.word	0x2000000c

0800275c <__libc_init_array>:
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	2500      	movs	r5, #0
 8002760:	4e0c      	ldr	r6, [pc, #48]	; (8002794 <__libc_init_array+0x38>)
 8002762:	4c0d      	ldr	r4, [pc, #52]	; (8002798 <__libc_init_array+0x3c>)
 8002764:	1ba4      	subs	r4, r4, r6
 8002766:	10a4      	asrs	r4, r4, #2
 8002768:	42a5      	cmp	r5, r4
 800276a:	d109      	bne.n	8002780 <__libc_init_array+0x24>
 800276c:	f000 fc3c 	bl	8002fe8 <_init>
 8002770:	2500      	movs	r5, #0
 8002772:	4e0a      	ldr	r6, [pc, #40]	; (800279c <__libc_init_array+0x40>)
 8002774:	4c0a      	ldr	r4, [pc, #40]	; (80027a0 <__libc_init_array+0x44>)
 8002776:	1ba4      	subs	r4, r4, r6
 8002778:	10a4      	asrs	r4, r4, #2
 800277a:	42a5      	cmp	r5, r4
 800277c:	d105      	bne.n	800278a <__libc_init_array+0x2e>
 800277e:	bd70      	pop	{r4, r5, r6, pc}
 8002780:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002784:	4798      	blx	r3
 8002786:	3501      	adds	r5, #1
 8002788:	e7ee      	b.n	8002768 <__libc_init_array+0xc>
 800278a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800278e:	4798      	blx	r3
 8002790:	3501      	adds	r5, #1
 8002792:	e7f2      	b.n	800277a <__libc_init_array+0x1e>
 8002794:	08003160 	.word	0x08003160
 8002798:	08003160 	.word	0x08003160
 800279c:	08003160 	.word	0x08003160
 80027a0:	08003164 	.word	0x08003164

080027a4 <memset>:
 80027a4:	4603      	mov	r3, r0
 80027a6:	4402      	add	r2, r0
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d100      	bne.n	80027ae <memset+0xa>
 80027ac:	4770      	bx	lr
 80027ae:	f803 1b01 	strb.w	r1, [r3], #1
 80027b2:	e7f9      	b.n	80027a8 <memset+0x4>

080027b4 <siprintf>:
 80027b4:	b40e      	push	{r1, r2, r3}
 80027b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027ba:	b500      	push	{lr}
 80027bc:	b09c      	sub	sp, #112	; 0x70
 80027be:	ab1d      	add	r3, sp, #116	; 0x74
 80027c0:	9002      	str	r0, [sp, #8]
 80027c2:	9006      	str	r0, [sp, #24]
 80027c4:	9107      	str	r1, [sp, #28]
 80027c6:	9104      	str	r1, [sp, #16]
 80027c8:	4808      	ldr	r0, [pc, #32]	; (80027ec <siprintf+0x38>)
 80027ca:	4909      	ldr	r1, [pc, #36]	; (80027f0 <siprintf+0x3c>)
 80027cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80027d0:	9105      	str	r1, [sp, #20]
 80027d2:	6800      	ldr	r0, [r0, #0]
 80027d4:	a902      	add	r1, sp, #8
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	f000 f86e 	bl	80028b8 <_svfiprintf_r>
 80027dc:	2200      	movs	r2, #0
 80027de:	9b02      	ldr	r3, [sp, #8]
 80027e0:	701a      	strb	r2, [r3, #0]
 80027e2:	b01c      	add	sp, #112	; 0x70
 80027e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80027e8:	b003      	add	sp, #12
 80027ea:	4770      	bx	lr
 80027ec:	2000000c 	.word	0x2000000c
 80027f0:	ffff0208 	.word	0xffff0208

080027f4 <strcpy>:
 80027f4:	4603      	mov	r3, r0
 80027f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80027fa:	f803 2b01 	strb.w	r2, [r3], #1
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d1f9      	bne.n	80027f6 <strcpy+0x2>
 8002802:	4770      	bx	lr

08002804 <__ssputs_r>:
 8002804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002808:	688e      	ldr	r6, [r1, #8]
 800280a:	4682      	mov	sl, r0
 800280c:	429e      	cmp	r6, r3
 800280e:	460c      	mov	r4, r1
 8002810:	4690      	mov	r8, r2
 8002812:	4699      	mov	r9, r3
 8002814:	d837      	bhi.n	8002886 <__ssputs_r+0x82>
 8002816:	898a      	ldrh	r2, [r1, #12]
 8002818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800281c:	d031      	beq.n	8002882 <__ssputs_r+0x7e>
 800281e:	2302      	movs	r3, #2
 8002820:	6825      	ldr	r5, [r4, #0]
 8002822:	6909      	ldr	r1, [r1, #16]
 8002824:	1a6f      	subs	r7, r5, r1
 8002826:	6965      	ldr	r5, [r4, #20]
 8002828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800282c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002830:	f109 0301 	add.w	r3, r9, #1
 8002834:	443b      	add	r3, r7
 8002836:	429d      	cmp	r5, r3
 8002838:	bf38      	it	cc
 800283a:	461d      	movcc	r5, r3
 800283c:	0553      	lsls	r3, r2, #21
 800283e:	d530      	bpl.n	80028a2 <__ssputs_r+0x9e>
 8002840:	4629      	mov	r1, r5
 8002842:	f000 fb37 	bl	8002eb4 <_malloc_r>
 8002846:	4606      	mov	r6, r0
 8002848:	b950      	cbnz	r0, 8002860 <__ssputs_r+0x5c>
 800284a:	230c      	movs	r3, #12
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	f8ca 3000 	str.w	r3, [sl]
 8002854:	89a3      	ldrh	r3, [r4, #12]
 8002856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800285a:	81a3      	strh	r3, [r4, #12]
 800285c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002860:	463a      	mov	r2, r7
 8002862:	6921      	ldr	r1, [r4, #16]
 8002864:	f000 fab6 	bl	8002dd4 <memcpy>
 8002868:	89a3      	ldrh	r3, [r4, #12]
 800286a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800286e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002872:	81a3      	strh	r3, [r4, #12]
 8002874:	6126      	str	r6, [r4, #16]
 8002876:	443e      	add	r6, r7
 8002878:	6026      	str	r6, [r4, #0]
 800287a:	464e      	mov	r6, r9
 800287c:	6165      	str	r5, [r4, #20]
 800287e:	1bed      	subs	r5, r5, r7
 8002880:	60a5      	str	r5, [r4, #8]
 8002882:	454e      	cmp	r6, r9
 8002884:	d900      	bls.n	8002888 <__ssputs_r+0x84>
 8002886:	464e      	mov	r6, r9
 8002888:	4632      	mov	r2, r6
 800288a:	4641      	mov	r1, r8
 800288c:	6820      	ldr	r0, [r4, #0]
 800288e:	f000 faac 	bl	8002dea <memmove>
 8002892:	68a3      	ldr	r3, [r4, #8]
 8002894:	2000      	movs	r0, #0
 8002896:	1b9b      	subs	r3, r3, r6
 8002898:	60a3      	str	r3, [r4, #8]
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	441e      	add	r6, r3
 800289e:	6026      	str	r6, [r4, #0]
 80028a0:	e7dc      	b.n	800285c <__ssputs_r+0x58>
 80028a2:	462a      	mov	r2, r5
 80028a4:	f000 fb60 	bl	8002f68 <_realloc_r>
 80028a8:	4606      	mov	r6, r0
 80028aa:	2800      	cmp	r0, #0
 80028ac:	d1e2      	bne.n	8002874 <__ssputs_r+0x70>
 80028ae:	6921      	ldr	r1, [r4, #16]
 80028b0:	4650      	mov	r0, sl
 80028b2:	f000 fab3 	bl	8002e1c <_free_r>
 80028b6:	e7c8      	b.n	800284a <__ssputs_r+0x46>

080028b8 <_svfiprintf_r>:
 80028b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028bc:	461d      	mov	r5, r3
 80028be:	898b      	ldrh	r3, [r1, #12]
 80028c0:	b09d      	sub	sp, #116	; 0x74
 80028c2:	061f      	lsls	r7, r3, #24
 80028c4:	4680      	mov	r8, r0
 80028c6:	460c      	mov	r4, r1
 80028c8:	4616      	mov	r6, r2
 80028ca:	d50f      	bpl.n	80028ec <_svfiprintf_r+0x34>
 80028cc:	690b      	ldr	r3, [r1, #16]
 80028ce:	b96b      	cbnz	r3, 80028ec <_svfiprintf_r+0x34>
 80028d0:	2140      	movs	r1, #64	; 0x40
 80028d2:	f000 faef 	bl	8002eb4 <_malloc_r>
 80028d6:	6020      	str	r0, [r4, #0]
 80028d8:	6120      	str	r0, [r4, #16]
 80028da:	b928      	cbnz	r0, 80028e8 <_svfiprintf_r+0x30>
 80028dc:	230c      	movs	r3, #12
 80028de:	f8c8 3000 	str.w	r3, [r8]
 80028e2:	f04f 30ff 	mov.w	r0, #4294967295
 80028e6:	e0c8      	b.n	8002a7a <_svfiprintf_r+0x1c2>
 80028e8:	2340      	movs	r3, #64	; 0x40
 80028ea:	6163      	str	r3, [r4, #20]
 80028ec:	2300      	movs	r3, #0
 80028ee:	9309      	str	r3, [sp, #36]	; 0x24
 80028f0:	2320      	movs	r3, #32
 80028f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028f6:	2330      	movs	r3, #48	; 0x30
 80028f8:	f04f 0b01 	mov.w	fp, #1
 80028fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002900:	9503      	str	r5, [sp, #12]
 8002902:	4637      	mov	r7, r6
 8002904:	463d      	mov	r5, r7
 8002906:	f815 3b01 	ldrb.w	r3, [r5], #1
 800290a:	b10b      	cbz	r3, 8002910 <_svfiprintf_r+0x58>
 800290c:	2b25      	cmp	r3, #37	; 0x25
 800290e:	d13e      	bne.n	800298e <_svfiprintf_r+0xd6>
 8002910:	ebb7 0a06 	subs.w	sl, r7, r6
 8002914:	d00b      	beq.n	800292e <_svfiprintf_r+0x76>
 8002916:	4653      	mov	r3, sl
 8002918:	4632      	mov	r2, r6
 800291a:	4621      	mov	r1, r4
 800291c:	4640      	mov	r0, r8
 800291e:	f7ff ff71 	bl	8002804 <__ssputs_r>
 8002922:	3001      	adds	r0, #1
 8002924:	f000 80a4 	beq.w	8002a70 <_svfiprintf_r+0x1b8>
 8002928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800292a:	4453      	add	r3, sl
 800292c:	9309      	str	r3, [sp, #36]	; 0x24
 800292e:	783b      	ldrb	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 809d 	beq.w	8002a70 <_svfiprintf_r+0x1b8>
 8002936:	2300      	movs	r3, #0
 8002938:	f04f 32ff 	mov.w	r2, #4294967295
 800293c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002940:	9304      	str	r3, [sp, #16]
 8002942:	9307      	str	r3, [sp, #28]
 8002944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002948:	931a      	str	r3, [sp, #104]	; 0x68
 800294a:	462f      	mov	r7, r5
 800294c:	2205      	movs	r2, #5
 800294e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002952:	4850      	ldr	r0, [pc, #320]	; (8002a94 <_svfiprintf_r+0x1dc>)
 8002954:	f000 fa30 	bl	8002db8 <memchr>
 8002958:	9b04      	ldr	r3, [sp, #16]
 800295a:	b9d0      	cbnz	r0, 8002992 <_svfiprintf_r+0xda>
 800295c:	06d9      	lsls	r1, r3, #27
 800295e:	bf44      	itt	mi
 8002960:	2220      	movmi	r2, #32
 8002962:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002966:	071a      	lsls	r2, r3, #28
 8002968:	bf44      	itt	mi
 800296a:	222b      	movmi	r2, #43	; 0x2b
 800296c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002970:	782a      	ldrb	r2, [r5, #0]
 8002972:	2a2a      	cmp	r2, #42	; 0x2a
 8002974:	d015      	beq.n	80029a2 <_svfiprintf_r+0xea>
 8002976:	462f      	mov	r7, r5
 8002978:	2000      	movs	r0, #0
 800297a:	250a      	movs	r5, #10
 800297c:	9a07      	ldr	r2, [sp, #28]
 800297e:	4639      	mov	r1, r7
 8002980:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002984:	3b30      	subs	r3, #48	; 0x30
 8002986:	2b09      	cmp	r3, #9
 8002988:	d94d      	bls.n	8002a26 <_svfiprintf_r+0x16e>
 800298a:	b1b8      	cbz	r0, 80029bc <_svfiprintf_r+0x104>
 800298c:	e00f      	b.n	80029ae <_svfiprintf_r+0xf6>
 800298e:	462f      	mov	r7, r5
 8002990:	e7b8      	b.n	8002904 <_svfiprintf_r+0x4c>
 8002992:	4a40      	ldr	r2, [pc, #256]	; (8002a94 <_svfiprintf_r+0x1dc>)
 8002994:	463d      	mov	r5, r7
 8002996:	1a80      	subs	r0, r0, r2
 8002998:	fa0b f000 	lsl.w	r0, fp, r0
 800299c:	4318      	orrs	r0, r3
 800299e:	9004      	str	r0, [sp, #16]
 80029a0:	e7d3      	b.n	800294a <_svfiprintf_r+0x92>
 80029a2:	9a03      	ldr	r2, [sp, #12]
 80029a4:	1d11      	adds	r1, r2, #4
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	9103      	str	r1, [sp, #12]
 80029aa:	2a00      	cmp	r2, #0
 80029ac:	db01      	blt.n	80029b2 <_svfiprintf_r+0xfa>
 80029ae:	9207      	str	r2, [sp, #28]
 80029b0:	e004      	b.n	80029bc <_svfiprintf_r+0x104>
 80029b2:	4252      	negs	r2, r2
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	9207      	str	r2, [sp, #28]
 80029ba:	9304      	str	r3, [sp, #16]
 80029bc:	783b      	ldrb	r3, [r7, #0]
 80029be:	2b2e      	cmp	r3, #46	; 0x2e
 80029c0:	d10c      	bne.n	80029dc <_svfiprintf_r+0x124>
 80029c2:	787b      	ldrb	r3, [r7, #1]
 80029c4:	2b2a      	cmp	r3, #42	; 0x2a
 80029c6:	d133      	bne.n	8002a30 <_svfiprintf_r+0x178>
 80029c8:	9b03      	ldr	r3, [sp, #12]
 80029ca:	3702      	adds	r7, #2
 80029cc:	1d1a      	adds	r2, r3, #4
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	9203      	str	r2, [sp, #12]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	bfb8      	it	lt
 80029d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80029da:	9305      	str	r3, [sp, #20]
 80029dc:	4d2e      	ldr	r5, [pc, #184]	; (8002a98 <_svfiprintf_r+0x1e0>)
 80029de:	2203      	movs	r2, #3
 80029e0:	7839      	ldrb	r1, [r7, #0]
 80029e2:	4628      	mov	r0, r5
 80029e4:	f000 f9e8 	bl	8002db8 <memchr>
 80029e8:	b138      	cbz	r0, 80029fa <_svfiprintf_r+0x142>
 80029ea:	2340      	movs	r3, #64	; 0x40
 80029ec:	1b40      	subs	r0, r0, r5
 80029ee:	fa03 f000 	lsl.w	r0, r3, r0
 80029f2:	9b04      	ldr	r3, [sp, #16]
 80029f4:	3701      	adds	r7, #1
 80029f6:	4303      	orrs	r3, r0
 80029f8:	9304      	str	r3, [sp, #16]
 80029fa:	7839      	ldrb	r1, [r7, #0]
 80029fc:	2206      	movs	r2, #6
 80029fe:	4827      	ldr	r0, [pc, #156]	; (8002a9c <_svfiprintf_r+0x1e4>)
 8002a00:	1c7e      	adds	r6, r7, #1
 8002a02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a06:	f000 f9d7 	bl	8002db8 <memchr>
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d038      	beq.n	8002a80 <_svfiprintf_r+0x1c8>
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <_svfiprintf_r+0x1e8>)
 8002a10:	bb13      	cbnz	r3, 8002a58 <_svfiprintf_r+0x1a0>
 8002a12:	9b03      	ldr	r3, [sp, #12]
 8002a14:	3307      	adds	r3, #7
 8002a16:	f023 0307 	bic.w	r3, r3, #7
 8002a1a:	3308      	adds	r3, #8
 8002a1c:	9303      	str	r3, [sp, #12]
 8002a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a20:	444b      	add	r3, r9
 8002a22:	9309      	str	r3, [sp, #36]	; 0x24
 8002a24:	e76d      	b.n	8002902 <_svfiprintf_r+0x4a>
 8002a26:	fb05 3202 	mla	r2, r5, r2, r3
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	460f      	mov	r7, r1
 8002a2e:	e7a6      	b.n	800297e <_svfiprintf_r+0xc6>
 8002a30:	2300      	movs	r3, #0
 8002a32:	250a      	movs	r5, #10
 8002a34:	4619      	mov	r1, r3
 8002a36:	3701      	adds	r7, #1
 8002a38:	9305      	str	r3, [sp, #20]
 8002a3a:	4638      	mov	r0, r7
 8002a3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a40:	3a30      	subs	r2, #48	; 0x30
 8002a42:	2a09      	cmp	r2, #9
 8002a44:	d903      	bls.n	8002a4e <_svfiprintf_r+0x196>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0c8      	beq.n	80029dc <_svfiprintf_r+0x124>
 8002a4a:	9105      	str	r1, [sp, #20]
 8002a4c:	e7c6      	b.n	80029dc <_svfiprintf_r+0x124>
 8002a4e:	fb05 2101 	mla	r1, r5, r1, r2
 8002a52:	2301      	movs	r3, #1
 8002a54:	4607      	mov	r7, r0
 8002a56:	e7f0      	b.n	8002a3a <_svfiprintf_r+0x182>
 8002a58:	ab03      	add	r3, sp, #12
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	4622      	mov	r2, r4
 8002a5e:	4b11      	ldr	r3, [pc, #68]	; (8002aa4 <_svfiprintf_r+0x1ec>)
 8002a60:	a904      	add	r1, sp, #16
 8002a62:	4640      	mov	r0, r8
 8002a64:	f3af 8000 	nop.w
 8002a68:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a6c:	4681      	mov	r9, r0
 8002a6e:	d1d6      	bne.n	8002a1e <_svfiprintf_r+0x166>
 8002a70:	89a3      	ldrh	r3, [r4, #12]
 8002a72:	065b      	lsls	r3, r3, #25
 8002a74:	f53f af35 	bmi.w	80028e2 <_svfiprintf_r+0x2a>
 8002a78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a7a:	b01d      	add	sp, #116	; 0x74
 8002a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a80:	ab03      	add	r3, sp, #12
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4622      	mov	r2, r4
 8002a86:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <_svfiprintf_r+0x1ec>)
 8002a88:	a904      	add	r1, sp, #16
 8002a8a:	4640      	mov	r0, r8
 8002a8c:	f000 f882 	bl	8002b94 <_printf_i>
 8002a90:	e7ea      	b.n	8002a68 <_svfiprintf_r+0x1b0>
 8002a92:	bf00      	nop
 8002a94:	0800312b 	.word	0x0800312b
 8002a98:	08003131 	.word	0x08003131
 8002a9c:	08003135 	.word	0x08003135
 8002aa0:	00000000 	.word	0x00000000
 8002aa4:	08002805 	.word	0x08002805

08002aa8 <_printf_common>:
 8002aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aac:	4691      	mov	r9, r2
 8002aae:	461f      	mov	r7, r3
 8002ab0:	688a      	ldr	r2, [r1, #8]
 8002ab2:	690b      	ldr	r3, [r1, #16]
 8002ab4:	4606      	mov	r6, r0
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	bfb8      	it	lt
 8002aba:	4613      	movlt	r3, r2
 8002abc:	f8c9 3000 	str.w	r3, [r9]
 8002ac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002aca:	b112      	cbz	r2, 8002ad2 <_printf_common+0x2a>
 8002acc:	3301      	adds	r3, #1
 8002ace:	f8c9 3000 	str.w	r3, [r9]
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	0699      	lsls	r1, r3, #26
 8002ad6:	bf42      	ittt	mi
 8002ad8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002adc:	3302      	addmi	r3, #2
 8002ade:	f8c9 3000 	strmi.w	r3, [r9]
 8002ae2:	6825      	ldr	r5, [r4, #0]
 8002ae4:	f015 0506 	ands.w	r5, r5, #6
 8002ae8:	d107      	bne.n	8002afa <_printf_common+0x52>
 8002aea:	f104 0a19 	add.w	sl, r4, #25
 8002aee:	68e3      	ldr	r3, [r4, #12]
 8002af0:	f8d9 2000 	ldr.w	r2, [r9]
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	42ab      	cmp	r3, r5
 8002af8:	dc29      	bgt.n	8002b4e <_printf_common+0xa6>
 8002afa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002afe:	6822      	ldr	r2, [r4, #0]
 8002b00:	3300      	adds	r3, #0
 8002b02:	bf18      	it	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	0692      	lsls	r2, r2, #26
 8002b08:	d42e      	bmi.n	8002b68 <_printf_common+0xc0>
 8002b0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b0e:	4639      	mov	r1, r7
 8002b10:	4630      	mov	r0, r6
 8002b12:	47c0      	blx	r8
 8002b14:	3001      	adds	r0, #1
 8002b16:	d021      	beq.n	8002b5c <_printf_common+0xb4>
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	68e5      	ldr	r5, [r4, #12]
 8002b1c:	f003 0306 	and.w	r3, r3, #6
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	bf18      	it	ne
 8002b24:	2500      	movne	r5, #0
 8002b26:	f8d9 2000 	ldr.w	r2, [r9]
 8002b2a:	f04f 0900 	mov.w	r9, #0
 8002b2e:	bf08      	it	eq
 8002b30:	1aad      	subeq	r5, r5, r2
 8002b32:	68a3      	ldr	r3, [r4, #8]
 8002b34:	6922      	ldr	r2, [r4, #16]
 8002b36:	bf08      	it	eq
 8002b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	bfc4      	itt	gt
 8002b40:	1a9b      	subgt	r3, r3, r2
 8002b42:	18ed      	addgt	r5, r5, r3
 8002b44:	341a      	adds	r4, #26
 8002b46:	454d      	cmp	r5, r9
 8002b48:	d11a      	bne.n	8002b80 <_printf_common+0xd8>
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	e008      	b.n	8002b60 <_printf_common+0xb8>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	4652      	mov	r2, sl
 8002b52:	4639      	mov	r1, r7
 8002b54:	4630      	mov	r0, r6
 8002b56:	47c0      	blx	r8
 8002b58:	3001      	adds	r0, #1
 8002b5a:	d103      	bne.n	8002b64 <_printf_common+0xbc>
 8002b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b64:	3501      	adds	r5, #1
 8002b66:	e7c2      	b.n	8002aee <_printf_common+0x46>
 8002b68:	2030      	movs	r0, #48	; 0x30
 8002b6a:	18e1      	adds	r1, r4, r3
 8002b6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b76:	4422      	add	r2, r4
 8002b78:	3302      	adds	r3, #2
 8002b7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b7e:	e7c4      	b.n	8002b0a <_printf_common+0x62>
 8002b80:	2301      	movs	r3, #1
 8002b82:	4622      	mov	r2, r4
 8002b84:	4639      	mov	r1, r7
 8002b86:	4630      	mov	r0, r6
 8002b88:	47c0      	blx	r8
 8002b8a:	3001      	adds	r0, #1
 8002b8c:	d0e6      	beq.n	8002b5c <_printf_common+0xb4>
 8002b8e:	f109 0901 	add.w	r9, r9, #1
 8002b92:	e7d8      	b.n	8002b46 <_printf_common+0x9e>

08002b94 <_printf_i>:
 8002b94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b98:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	7e09      	ldrb	r1, [r1, #24]
 8002ba0:	b085      	sub	sp, #20
 8002ba2:	296e      	cmp	r1, #110	; 0x6e
 8002ba4:	4617      	mov	r7, r2
 8002ba6:	4606      	mov	r6, r0
 8002ba8:	4698      	mov	r8, r3
 8002baa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002bac:	f000 80b3 	beq.w	8002d16 <_printf_i+0x182>
 8002bb0:	d822      	bhi.n	8002bf8 <_printf_i+0x64>
 8002bb2:	2963      	cmp	r1, #99	; 0x63
 8002bb4:	d036      	beq.n	8002c24 <_printf_i+0x90>
 8002bb6:	d80a      	bhi.n	8002bce <_printf_i+0x3a>
 8002bb8:	2900      	cmp	r1, #0
 8002bba:	f000 80b9 	beq.w	8002d30 <_printf_i+0x19c>
 8002bbe:	2958      	cmp	r1, #88	; 0x58
 8002bc0:	f000 8083 	beq.w	8002cca <_printf_i+0x136>
 8002bc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bc8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002bcc:	e032      	b.n	8002c34 <_printf_i+0xa0>
 8002bce:	2964      	cmp	r1, #100	; 0x64
 8002bd0:	d001      	beq.n	8002bd6 <_printf_i+0x42>
 8002bd2:	2969      	cmp	r1, #105	; 0x69
 8002bd4:	d1f6      	bne.n	8002bc4 <_printf_i+0x30>
 8002bd6:	6820      	ldr	r0, [r4, #0]
 8002bd8:	6813      	ldr	r3, [r2, #0]
 8002bda:	0605      	lsls	r5, r0, #24
 8002bdc:	f103 0104 	add.w	r1, r3, #4
 8002be0:	d52a      	bpl.n	8002c38 <_printf_i+0xa4>
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6011      	str	r1, [r2, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	da03      	bge.n	8002bf2 <_printf_i+0x5e>
 8002bea:	222d      	movs	r2, #45	; 0x2d
 8002bec:	425b      	negs	r3, r3
 8002bee:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bf2:	486f      	ldr	r0, [pc, #444]	; (8002db0 <_printf_i+0x21c>)
 8002bf4:	220a      	movs	r2, #10
 8002bf6:	e039      	b.n	8002c6c <_printf_i+0xd8>
 8002bf8:	2973      	cmp	r1, #115	; 0x73
 8002bfa:	f000 809d 	beq.w	8002d38 <_printf_i+0x1a4>
 8002bfe:	d808      	bhi.n	8002c12 <_printf_i+0x7e>
 8002c00:	296f      	cmp	r1, #111	; 0x6f
 8002c02:	d020      	beq.n	8002c46 <_printf_i+0xb2>
 8002c04:	2970      	cmp	r1, #112	; 0x70
 8002c06:	d1dd      	bne.n	8002bc4 <_printf_i+0x30>
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	f043 0320 	orr.w	r3, r3, #32
 8002c0e:	6023      	str	r3, [r4, #0]
 8002c10:	e003      	b.n	8002c1a <_printf_i+0x86>
 8002c12:	2975      	cmp	r1, #117	; 0x75
 8002c14:	d017      	beq.n	8002c46 <_printf_i+0xb2>
 8002c16:	2978      	cmp	r1, #120	; 0x78
 8002c18:	d1d4      	bne.n	8002bc4 <_printf_i+0x30>
 8002c1a:	2378      	movs	r3, #120	; 0x78
 8002c1c:	4865      	ldr	r0, [pc, #404]	; (8002db4 <_printf_i+0x220>)
 8002c1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c22:	e055      	b.n	8002cd0 <_printf_i+0x13c>
 8002c24:	6813      	ldr	r3, [r2, #0]
 8002c26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c2a:	1d19      	adds	r1, r3, #4
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6011      	str	r1, [r2, #0]
 8002c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c34:	2301      	movs	r3, #1
 8002c36:	e08c      	b.n	8002d52 <_printf_i+0x1be>
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c3e:	6011      	str	r1, [r2, #0]
 8002c40:	bf18      	it	ne
 8002c42:	b21b      	sxthne	r3, r3
 8002c44:	e7cf      	b.n	8002be6 <_printf_i+0x52>
 8002c46:	6813      	ldr	r3, [r2, #0]
 8002c48:	6825      	ldr	r5, [r4, #0]
 8002c4a:	1d18      	adds	r0, r3, #4
 8002c4c:	6010      	str	r0, [r2, #0]
 8002c4e:	0628      	lsls	r0, r5, #24
 8002c50:	d501      	bpl.n	8002c56 <_printf_i+0xc2>
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	e002      	b.n	8002c5c <_printf_i+0xc8>
 8002c56:	0668      	lsls	r0, r5, #25
 8002c58:	d5fb      	bpl.n	8002c52 <_printf_i+0xbe>
 8002c5a:	881b      	ldrh	r3, [r3, #0]
 8002c5c:	296f      	cmp	r1, #111	; 0x6f
 8002c5e:	bf14      	ite	ne
 8002c60:	220a      	movne	r2, #10
 8002c62:	2208      	moveq	r2, #8
 8002c64:	4852      	ldr	r0, [pc, #328]	; (8002db0 <_printf_i+0x21c>)
 8002c66:	2100      	movs	r1, #0
 8002c68:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c6c:	6865      	ldr	r5, [r4, #4]
 8002c6e:	2d00      	cmp	r5, #0
 8002c70:	60a5      	str	r5, [r4, #8]
 8002c72:	f2c0 8095 	blt.w	8002da0 <_printf_i+0x20c>
 8002c76:	6821      	ldr	r1, [r4, #0]
 8002c78:	f021 0104 	bic.w	r1, r1, #4
 8002c7c:	6021      	str	r1, [r4, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d13d      	bne.n	8002cfe <_printf_i+0x16a>
 8002c82:	2d00      	cmp	r5, #0
 8002c84:	f040 808e 	bne.w	8002da4 <_printf_i+0x210>
 8002c88:	4665      	mov	r5, ip
 8002c8a:	2a08      	cmp	r2, #8
 8002c8c:	d10b      	bne.n	8002ca6 <_printf_i+0x112>
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	07db      	lsls	r3, r3, #31
 8002c92:	d508      	bpl.n	8002ca6 <_printf_i+0x112>
 8002c94:	6923      	ldr	r3, [r4, #16]
 8002c96:	6862      	ldr	r2, [r4, #4]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	bfde      	ittt	le
 8002c9c:	2330      	movle	r3, #48	; 0x30
 8002c9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002ca2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002ca6:	ebac 0305 	sub.w	r3, ip, r5
 8002caa:	6123      	str	r3, [r4, #16]
 8002cac:	f8cd 8000 	str.w	r8, [sp]
 8002cb0:	463b      	mov	r3, r7
 8002cb2:	aa03      	add	r2, sp, #12
 8002cb4:	4621      	mov	r1, r4
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	f7ff fef6 	bl	8002aa8 <_printf_common>
 8002cbc:	3001      	adds	r0, #1
 8002cbe:	d14d      	bne.n	8002d5c <_printf_i+0x1c8>
 8002cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc4:	b005      	add	sp, #20
 8002cc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cca:	4839      	ldr	r0, [pc, #228]	; (8002db0 <_printf_i+0x21c>)
 8002ccc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002cd0:	6813      	ldr	r3, [r2, #0]
 8002cd2:	6821      	ldr	r1, [r4, #0]
 8002cd4:	1d1d      	adds	r5, r3, #4
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6015      	str	r5, [r2, #0]
 8002cda:	060a      	lsls	r2, r1, #24
 8002cdc:	d50b      	bpl.n	8002cf6 <_printf_i+0x162>
 8002cde:	07ca      	lsls	r2, r1, #31
 8002ce0:	bf44      	itt	mi
 8002ce2:	f041 0120 	orrmi.w	r1, r1, #32
 8002ce6:	6021      	strmi	r1, [r4, #0]
 8002ce8:	b91b      	cbnz	r3, 8002cf2 <_printf_i+0x15e>
 8002cea:	6822      	ldr	r2, [r4, #0]
 8002cec:	f022 0220 	bic.w	r2, r2, #32
 8002cf0:	6022      	str	r2, [r4, #0]
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	e7b7      	b.n	8002c66 <_printf_i+0xd2>
 8002cf6:	064d      	lsls	r5, r1, #25
 8002cf8:	bf48      	it	mi
 8002cfa:	b29b      	uxthmi	r3, r3
 8002cfc:	e7ef      	b.n	8002cde <_printf_i+0x14a>
 8002cfe:	4665      	mov	r5, ip
 8002d00:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d04:	fb02 3311 	mls	r3, r2, r1, r3
 8002d08:	5cc3      	ldrb	r3, [r0, r3]
 8002d0a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d0e:	460b      	mov	r3, r1
 8002d10:	2900      	cmp	r1, #0
 8002d12:	d1f5      	bne.n	8002d00 <_printf_i+0x16c>
 8002d14:	e7b9      	b.n	8002c8a <_printf_i+0xf6>
 8002d16:	6813      	ldr	r3, [r2, #0]
 8002d18:	6825      	ldr	r5, [r4, #0]
 8002d1a:	1d18      	adds	r0, r3, #4
 8002d1c:	6961      	ldr	r1, [r4, #20]
 8002d1e:	6010      	str	r0, [r2, #0]
 8002d20:	0628      	lsls	r0, r5, #24
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	d501      	bpl.n	8002d2a <_printf_i+0x196>
 8002d26:	6019      	str	r1, [r3, #0]
 8002d28:	e002      	b.n	8002d30 <_printf_i+0x19c>
 8002d2a:	066a      	lsls	r2, r5, #25
 8002d2c:	d5fb      	bpl.n	8002d26 <_printf_i+0x192>
 8002d2e:	8019      	strh	r1, [r3, #0]
 8002d30:	2300      	movs	r3, #0
 8002d32:	4665      	mov	r5, ip
 8002d34:	6123      	str	r3, [r4, #16]
 8002d36:	e7b9      	b.n	8002cac <_printf_i+0x118>
 8002d38:	6813      	ldr	r3, [r2, #0]
 8002d3a:	1d19      	adds	r1, r3, #4
 8002d3c:	6011      	str	r1, [r2, #0]
 8002d3e:	681d      	ldr	r5, [r3, #0]
 8002d40:	6862      	ldr	r2, [r4, #4]
 8002d42:	2100      	movs	r1, #0
 8002d44:	4628      	mov	r0, r5
 8002d46:	f000 f837 	bl	8002db8 <memchr>
 8002d4a:	b108      	cbz	r0, 8002d50 <_printf_i+0x1bc>
 8002d4c:	1b40      	subs	r0, r0, r5
 8002d4e:	6060      	str	r0, [r4, #4]
 8002d50:	6863      	ldr	r3, [r4, #4]
 8002d52:	6123      	str	r3, [r4, #16]
 8002d54:	2300      	movs	r3, #0
 8002d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d5a:	e7a7      	b.n	8002cac <_printf_i+0x118>
 8002d5c:	6923      	ldr	r3, [r4, #16]
 8002d5e:	462a      	mov	r2, r5
 8002d60:	4639      	mov	r1, r7
 8002d62:	4630      	mov	r0, r6
 8002d64:	47c0      	blx	r8
 8002d66:	3001      	adds	r0, #1
 8002d68:	d0aa      	beq.n	8002cc0 <_printf_i+0x12c>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	079b      	lsls	r3, r3, #30
 8002d6e:	d413      	bmi.n	8002d98 <_printf_i+0x204>
 8002d70:	68e0      	ldr	r0, [r4, #12]
 8002d72:	9b03      	ldr	r3, [sp, #12]
 8002d74:	4298      	cmp	r0, r3
 8002d76:	bfb8      	it	lt
 8002d78:	4618      	movlt	r0, r3
 8002d7a:	e7a3      	b.n	8002cc4 <_printf_i+0x130>
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	464a      	mov	r2, r9
 8002d80:	4639      	mov	r1, r7
 8002d82:	4630      	mov	r0, r6
 8002d84:	47c0      	blx	r8
 8002d86:	3001      	adds	r0, #1
 8002d88:	d09a      	beq.n	8002cc0 <_printf_i+0x12c>
 8002d8a:	3501      	adds	r5, #1
 8002d8c:	68e3      	ldr	r3, [r4, #12]
 8002d8e:	9a03      	ldr	r2, [sp, #12]
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	42ab      	cmp	r3, r5
 8002d94:	dcf2      	bgt.n	8002d7c <_printf_i+0x1e8>
 8002d96:	e7eb      	b.n	8002d70 <_printf_i+0x1dc>
 8002d98:	2500      	movs	r5, #0
 8002d9a:	f104 0919 	add.w	r9, r4, #25
 8002d9e:	e7f5      	b.n	8002d8c <_printf_i+0x1f8>
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ac      	bne.n	8002cfe <_printf_i+0x16a>
 8002da4:	7803      	ldrb	r3, [r0, #0]
 8002da6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002daa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dae:	e76c      	b.n	8002c8a <_printf_i+0xf6>
 8002db0:	0800313c 	.word	0x0800313c
 8002db4:	0800314d 	.word	0x0800314d

08002db8 <memchr>:
 8002db8:	b510      	push	{r4, lr}
 8002dba:	b2c9      	uxtb	r1, r1
 8002dbc:	4402      	add	r2, r0
 8002dbe:	4290      	cmp	r0, r2
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	d101      	bne.n	8002dc8 <memchr+0x10>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e003      	b.n	8002dd0 <memchr+0x18>
 8002dc8:	781c      	ldrb	r4, [r3, #0]
 8002dca:	3001      	adds	r0, #1
 8002dcc:	428c      	cmp	r4, r1
 8002dce:	d1f6      	bne.n	8002dbe <memchr+0x6>
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd10      	pop	{r4, pc}

08002dd4 <memcpy>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	1e43      	subs	r3, r0, #1
 8002dd8:	440a      	add	r2, r1
 8002dda:	4291      	cmp	r1, r2
 8002ddc:	d100      	bne.n	8002de0 <memcpy+0xc>
 8002dde:	bd10      	pop	{r4, pc}
 8002de0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002de4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002de8:	e7f7      	b.n	8002dda <memcpy+0x6>

08002dea <memmove>:
 8002dea:	4288      	cmp	r0, r1
 8002dec:	b510      	push	{r4, lr}
 8002dee:	eb01 0302 	add.w	r3, r1, r2
 8002df2:	d807      	bhi.n	8002e04 <memmove+0x1a>
 8002df4:	1e42      	subs	r2, r0, #1
 8002df6:	4299      	cmp	r1, r3
 8002df8:	d00a      	beq.n	8002e10 <memmove+0x26>
 8002dfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dfe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002e02:	e7f8      	b.n	8002df6 <memmove+0xc>
 8002e04:	4283      	cmp	r3, r0
 8002e06:	d9f5      	bls.n	8002df4 <memmove+0xa>
 8002e08:	1881      	adds	r1, r0, r2
 8002e0a:	1ad2      	subs	r2, r2, r3
 8002e0c:	42d3      	cmn	r3, r2
 8002e0e:	d100      	bne.n	8002e12 <memmove+0x28>
 8002e10:	bd10      	pop	{r4, pc}
 8002e12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002e16:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002e1a:	e7f7      	b.n	8002e0c <memmove+0x22>

08002e1c <_free_r>:
 8002e1c:	b538      	push	{r3, r4, r5, lr}
 8002e1e:	4605      	mov	r5, r0
 8002e20:	2900      	cmp	r1, #0
 8002e22:	d043      	beq.n	8002eac <_free_r+0x90>
 8002e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e28:	1f0c      	subs	r4, r1, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bfb8      	it	lt
 8002e2e:	18e4      	addlt	r4, r4, r3
 8002e30:	f000 f8d0 	bl	8002fd4 <__malloc_lock>
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <_free_r+0x94>)
 8002e36:	6813      	ldr	r3, [r2, #0]
 8002e38:	4610      	mov	r0, r2
 8002e3a:	b933      	cbnz	r3, 8002e4a <_free_r+0x2e>
 8002e3c:	6063      	str	r3, [r4, #4]
 8002e3e:	6014      	str	r4, [r2, #0]
 8002e40:	4628      	mov	r0, r5
 8002e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e46:	f000 b8c6 	b.w	8002fd6 <__malloc_unlock>
 8002e4a:	42a3      	cmp	r3, r4
 8002e4c:	d90b      	bls.n	8002e66 <_free_r+0x4a>
 8002e4e:	6821      	ldr	r1, [r4, #0]
 8002e50:	1862      	adds	r2, r4, r1
 8002e52:	4293      	cmp	r3, r2
 8002e54:	bf01      	itttt	eq
 8002e56:	681a      	ldreq	r2, [r3, #0]
 8002e58:	685b      	ldreq	r3, [r3, #4]
 8002e5a:	1852      	addeq	r2, r2, r1
 8002e5c:	6022      	streq	r2, [r4, #0]
 8002e5e:	6063      	str	r3, [r4, #4]
 8002e60:	6004      	str	r4, [r0, #0]
 8002e62:	e7ed      	b.n	8002e40 <_free_r+0x24>
 8002e64:	4613      	mov	r3, r2
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	b10a      	cbz	r2, 8002e6e <_free_r+0x52>
 8002e6a:	42a2      	cmp	r2, r4
 8002e6c:	d9fa      	bls.n	8002e64 <_free_r+0x48>
 8002e6e:	6819      	ldr	r1, [r3, #0]
 8002e70:	1858      	adds	r0, r3, r1
 8002e72:	42a0      	cmp	r0, r4
 8002e74:	d10b      	bne.n	8002e8e <_free_r+0x72>
 8002e76:	6820      	ldr	r0, [r4, #0]
 8002e78:	4401      	add	r1, r0
 8002e7a:	1858      	adds	r0, r3, r1
 8002e7c:	4282      	cmp	r2, r0
 8002e7e:	6019      	str	r1, [r3, #0]
 8002e80:	d1de      	bne.n	8002e40 <_free_r+0x24>
 8002e82:	6810      	ldr	r0, [r2, #0]
 8002e84:	6852      	ldr	r2, [r2, #4]
 8002e86:	4401      	add	r1, r0
 8002e88:	6019      	str	r1, [r3, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
 8002e8c:	e7d8      	b.n	8002e40 <_free_r+0x24>
 8002e8e:	d902      	bls.n	8002e96 <_free_r+0x7a>
 8002e90:	230c      	movs	r3, #12
 8002e92:	602b      	str	r3, [r5, #0]
 8002e94:	e7d4      	b.n	8002e40 <_free_r+0x24>
 8002e96:	6820      	ldr	r0, [r4, #0]
 8002e98:	1821      	adds	r1, r4, r0
 8002e9a:	428a      	cmp	r2, r1
 8002e9c:	bf01      	itttt	eq
 8002e9e:	6811      	ldreq	r1, [r2, #0]
 8002ea0:	6852      	ldreq	r2, [r2, #4]
 8002ea2:	1809      	addeq	r1, r1, r0
 8002ea4:	6021      	streq	r1, [r4, #0]
 8002ea6:	6062      	str	r2, [r4, #4]
 8002ea8:	605c      	str	r4, [r3, #4]
 8002eaa:	e7c9      	b.n	8002e40 <_free_r+0x24>
 8002eac:	bd38      	pop	{r3, r4, r5, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000090 	.word	0x20000090

08002eb4 <_malloc_r>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	1ccd      	adds	r5, r1, #3
 8002eb8:	f025 0503 	bic.w	r5, r5, #3
 8002ebc:	3508      	adds	r5, #8
 8002ebe:	2d0c      	cmp	r5, #12
 8002ec0:	bf38      	it	cc
 8002ec2:	250c      	movcc	r5, #12
 8002ec4:	2d00      	cmp	r5, #0
 8002ec6:	4606      	mov	r6, r0
 8002ec8:	db01      	blt.n	8002ece <_malloc_r+0x1a>
 8002eca:	42a9      	cmp	r1, r5
 8002ecc:	d903      	bls.n	8002ed6 <_malloc_r+0x22>
 8002ece:	230c      	movs	r3, #12
 8002ed0:	6033      	str	r3, [r6, #0]
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	bd70      	pop	{r4, r5, r6, pc}
 8002ed6:	f000 f87d 	bl	8002fd4 <__malloc_lock>
 8002eda:	4a21      	ldr	r2, [pc, #132]	; (8002f60 <_malloc_r+0xac>)
 8002edc:	6814      	ldr	r4, [r2, #0]
 8002ede:	4621      	mov	r1, r4
 8002ee0:	b991      	cbnz	r1, 8002f08 <_malloc_r+0x54>
 8002ee2:	4c20      	ldr	r4, [pc, #128]	; (8002f64 <_malloc_r+0xb0>)
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	b91b      	cbnz	r3, 8002ef0 <_malloc_r+0x3c>
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f000 f863 	bl	8002fb4 <_sbrk_r>
 8002eee:	6020      	str	r0, [r4, #0]
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	f000 f85e 	bl	8002fb4 <_sbrk_r>
 8002ef8:	1c43      	adds	r3, r0, #1
 8002efa:	d124      	bne.n	8002f46 <_malloc_r+0x92>
 8002efc:	230c      	movs	r3, #12
 8002efe:	4630      	mov	r0, r6
 8002f00:	6033      	str	r3, [r6, #0]
 8002f02:	f000 f868 	bl	8002fd6 <__malloc_unlock>
 8002f06:	e7e4      	b.n	8002ed2 <_malloc_r+0x1e>
 8002f08:	680b      	ldr	r3, [r1, #0]
 8002f0a:	1b5b      	subs	r3, r3, r5
 8002f0c:	d418      	bmi.n	8002f40 <_malloc_r+0x8c>
 8002f0e:	2b0b      	cmp	r3, #11
 8002f10:	d90f      	bls.n	8002f32 <_malloc_r+0x7e>
 8002f12:	600b      	str	r3, [r1, #0]
 8002f14:	18cc      	adds	r4, r1, r3
 8002f16:	50cd      	str	r5, [r1, r3]
 8002f18:	4630      	mov	r0, r6
 8002f1a:	f000 f85c 	bl	8002fd6 <__malloc_unlock>
 8002f1e:	f104 000b 	add.w	r0, r4, #11
 8002f22:	1d23      	adds	r3, r4, #4
 8002f24:	f020 0007 	bic.w	r0, r0, #7
 8002f28:	1ac3      	subs	r3, r0, r3
 8002f2a:	d0d3      	beq.n	8002ed4 <_malloc_r+0x20>
 8002f2c:	425a      	negs	r2, r3
 8002f2e:	50e2      	str	r2, [r4, r3]
 8002f30:	e7d0      	b.n	8002ed4 <_malloc_r+0x20>
 8002f32:	684b      	ldr	r3, [r1, #4]
 8002f34:	428c      	cmp	r4, r1
 8002f36:	bf16      	itet	ne
 8002f38:	6063      	strne	r3, [r4, #4]
 8002f3a:	6013      	streq	r3, [r2, #0]
 8002f3c:	460c      	movne	r4, r1
 8002f3e:	e7eb      	b.n	8002f18 <_malloc_r+0x64>
 8002f40:	460c      	mov	r4, r1
 8002f42:	6849      	ldr	r1, [r1, #4]
 8002f44:	e7cc      	b.n	8002ee0 <_malloc_r+0x2c>
 8002f46:	1cc4      	adds	r4, r0, #3
 8002f48:	f024 0403 	bic.w	r4, r4, #3
 8002f4c:	42a0      	cmp	r0, r4
 8002f4e:	d005      	beq.n	8002f5c <_malloc_r+0xa8>
 8002f50:	1a21      	subs	r1, r4, r0
 8002f52:	4630      	mov	r0, r6
 8002f54:	f000 f82e 	bl	8002fb4 <_sbrk_r>
 8002f58:	3001      	adds	r0, #1
 8002f5a:	d0cf      	beq.n	8002efc <_malloc_r+0x48>
 8002f5c:	6025      	str	r5, [r4, #0]
 8002f5e:	e7db      	b.n	8002f18 <_malloc_r+0x64>
 8002f60:	20000090 	.word	0x20000090
 8002f64:	20000094 	.word	0x20000094

08002f68 <_realloc_r>:
 8002f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6a:	4607      	mov	r7, r0
 8002f6c:	4614      	mov	r4, r2
 8002f6e:	460e      	mov	r6, r1
 8002f70:	b921      	cbnz	r1, 8002f7c <_realloc_r+0x14>
 8002f72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f76:	4611      	mov	r1, r2
 8002f78:	f7ff bf9c 	b.w	8002eb4 <_malloc_r>
 8002f7c:	b922      	cbnz	r2, 8002f88 <_realloc_r+0x20>
 8002f7e:	f7ff ff4d 	bl	8002e1c <_free_r>
 8002f82:	4625      	mov	r5, r4
 8002f84:	4628      	mov	r0, r5
 8002f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f88:	f000 f826 	bl	8002fd8 <_malloc_usable_size_r>
 8002f8c:	42a0      	cmp	r0, r4
 8002f8e:	d20f      	bcs.n	8002fb0 <_realloc_r+0x48>
 8002f90:	4621      	mov	r1, r4
 8002f92:	4638      	mov	r0, r7
 8002f94:	f7ff ff8e 	bl	8002eb4 <_malloc_r>
 8002f98:	4605      	mov	r5, r0
 8002f9a:	2800      	cmp	r0, #0
 8002f9c:	d0f2      	beq.n	8002f84 <_realloc_r+0x1c>
 8002f9e:	4631      	mov	r1, r6
 8002fa0:	4622      	mov	r2, r4
 8002fa2:	f7ff ff17 	bl	8002dd4 <memcpy>
 8002fa6:	4631      	mov	r1, r6
 8002fa8:	4638      	mov	r0, r7
 8002faa:	f7ff ff37 	bl	8002e1c <_free_r>
 8002fae:	e7e9      	b.n	8002f84 <_realloc_r+0x1c>
 8002fb0:	4635      	mov	r5, r6
 8002fb2:	e7e7      	b.n	8002f84 <_realloc_r+0x1c>

08002fb4 <_sbrk_r>:
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	4c05      	ldr	r4, [pc, #20]	; (8002fd0 <_sbrk_r+0x1c>)
 8002fba:	4605      	mov	r5, r0
 8002fbc:	4608      	mov	r0, r1
 8002fbe:	6023      	str	r3, [r4, #0]
 8002fc0:	f7fd fc2e 	bl	8000820 <_sbrk>
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d102      	bne.n	8002fce <_sbrk_r+0x1a>
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	b103      	cbz	r3, 8002fce <_sbrk_r+0x1a>
 8002fcc:	602b      	str	r3, [r5, #0]
 8002fce:	bd38      	pop	{r3, r4, r5, pc}
 8002fd0:	20000120 	.word	0x20000120

08002fd4 <__malloc_lock>:
 8002fd4:	4770      	bx	lr

08002fd6 <__malloc_unlock>:
 8002fd6:	4770      	bx	lr

08002fd8 <_malloc_usable_size_r>:
 8002fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fdc:	1f18      	subs	r0, r3, #4
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	bfbc      	itt	lt
 8002fe2:	580b      	ldrlt	r3, [r1, r0]
 8002fe4:	18c0      	addlt	r0, r0, r3
 8002fe6:	4770      	bx	lr

08002fe8 <_init>:
 8002fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fea:	bf00      	nop
 8002fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fee:	bc08      	pop	{r3}
 8002ff0:	469e      	mov	lr, r3
 8002ff2:	4770      	bx	lr

08002ff4 <_fini>:
 8002ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ff6:	bf00      	nop
 8002ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ffa:	bc08      	pop	{r3}
 8002ffc:	469e      	mov	lr, r3
 8002ffe:	4770      	bx	lr
