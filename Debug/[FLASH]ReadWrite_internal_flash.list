
[FLASH]ReadWrite_internal_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800341c  0800341c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800341c  0800341c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800341c  0800341c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800341c  0800341c  0001341c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003420  08003420  00013420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08003424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000098  080034b8  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080034b8  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009009  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022a6  00000000  00000000  000290c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000848  00000000  00000000  0002b370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  0002bbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019b50  00000000  00000000  0002c2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bbba  00000000  00000000  00045e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000878b7  00000000  00000000  000519d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9289  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002150  00000000  00000000  000d9304  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080030dc 	.word	0x080030dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080030dc 	.word	0x080030dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800015c:	b480      	push	{r7}
 800015e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000160:	4b04      	ldr	r3, [pc, #16]	; (8000174 <__NVIC_GetPriorityGrouping+0x18>)
 8000162:	68db      	ldr	r3, [r3, #12]
 8000164:	0a1b      	lsrs	r3, r3, #8
 8000166:	f003 0307 	and.w	r3, r3, #7
}
 800016a:	4618      	mov	r0, r3
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop
 8000174:	e000ed00 	.word	0xe000ed00

08000178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000178:	b480      	push	{r7}
 800017a:	b083      	sub	sp, #12
 800017c:	af00      	add	r7, sp, #0
 800017e:	4603      	mov	r3, r0
 8000180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000186:	2b00      	cmp	r3, #0
 8000188:	db0b      	blt.n	80001a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	f003 021f 	and.w	r2, r3, #31
 8000190:	4906      	ldr	r1, [pc, #24]	; (80001ac <__NVIC_EnableIRQ+0x34>)
 8000192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000196:	095b      	lsrs	r3, r3, #5
 8000198:	2001      	movs	r0, #1
 800019a:	fa00 f202 	lsl.w	r2, r0, r2
 800019e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001a2:	bf00      	nop
 80001a4:	370c      	adds	r7, #12
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	e000e100 	.word	0xe000e100

080001b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	6039      	str	r1, [r7, #0]
 80001ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	db0a      	blt.n	80001da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	490c      	ldr	r1, [pc, #48]	; (80001fc <__NVIC_SetPriority+0x4c>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	0112      	lsls	r2, r2, #4
 80001d0:	b2d2      	uxtb	r2, r2
 80001d2:	440b      	add	r3, r1
 80001d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d8:	e00a      	b.n	80001f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4908      	ldr	r1, [pc, #32]	; (8000200 <__NVIC_SetPriority+0x50>)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f003 030f 	and.w	r3, r3, #15
 80001e6:	3b04      	subs	r3, #4
 80001e8:	0112      	lsls	r2, r2, #4
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	440b      	add	r3, r1
 80001ee:	761a      	strb	r2, [r3, #24]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000e100 	.word	0xe000e100
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000218:	69fb      	ldr	r3, [r7, #28]
 800021a:	f1c3 0307 	rsb	r3, r3, #7
 800021e:	2b04      	cmp	r3, #4
 8000220:	bf28      	it	cs
 8000222:	2304      	movcs	r3, #4
 8000224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3304      	adds	r3, #4
 800022a:	2b06      	cmp	r3, #6
 800022c:	d902      	bls.n	8000234 <NVIC_EncodePriority+0x30>
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	3b03      	subs	r3, #3
 8000232:	e000      	b.n	8000236 <NVIC_EncodePriority+0x32>
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	f04f 32ff 	mov.w	r2, #4294967295
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	43da      	mvns	r2, r3
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	401a      	ands	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800024c:	f04f 31ff 	mov.w	r1, #4294967295
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43d9      	mvns	r1, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	4313      	orrs	r3, r2
         );
}
 800025e:	4618      	mov	r0, r3
 8000260:	3724      	adds	r7, #36	; 0x24
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000270:	4b08      	ldr	r3, [pc, #32]	; (8000294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000272:	695a      	ldr	r2, [r3, #20]
 8000274:	4907      	ldr	r1, [pc, #28]	; (8000294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4313      	orrs	r3, r2
 800027a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800027e:	695a      	ldr	r2, [r3, #20]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	4013      	ands	r3, r2
 8000284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000286:	68fb      	ldr	r3, [r7, #12]
}
 8000288:	bf00      	nop
 800028a:	3714      	adds	r7, #20
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	40021000 	.word	0x40021000

08000298 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800029c:	2001      	movs	r0, #1
 800029e:	f7ff ffe3 	bl	8000268 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80002a2:	f7ff ff5b 	bl	800015c <__NVIC_GetPriorityGrouping>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2200      	movs	r2, #0
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ffa9 	bl	8000204 <NVIC_EncodePriority>
 80002b2:	4603      	mov	r3, r0
 80002b4:	4619      	mov	r1, r3
 80002b6:	2010      	movs	r0, #16
 80002b8:	f7ff ff7a 	bl	80001b0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002bc:	2010      	movs	r0, #16
 80002be:	f7ff ff5b 	bl	8000178 <__NVIC_EnableIRQ>

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b088      	sub	sp, #32
 80002cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ce:	f107 0310 	add.w	r3, r7, #16
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	605a      	str	r2, [r3, #4]
 80002d8:	609a      	str	r2, [r3, #8]
 80002da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b1e      	ldr	r3, [pc, #120]	; (8000358 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a1d      	ldr	r2, [pc, #116]	; (8000358 <MX_GPIO_Init+0x90>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60fb      	str	r3, [r7, #12]
 80002f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a17      	ldr	r2, [pc, #92]	; (8000358 <MX_GPIO_Init+0x90>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b15      	ldr	r3, [pc, #84]	; (8000358 <MX_GPIO_Init+0x90>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	60bb      	str	r3, [r7, #8]
 800030a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <MX_GPIO_Init+0x90>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <MX_GPIO_Init+0x90>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <MX_GPIO_Init+0x90>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0308 	and.w	r3, r3, #8
 8000320:	607b      	str	r3, [r7, #4]
 8000322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8000324:	2200      	movs	r2, #0
 8000326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800032a:	480c      	ldr	r0, [pc, #48]	; (800035c <MX_GPIO_Init+0x94>)
 800032c:	f001 fb58 	bl	80019e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2302      	movs	r3, #2
 8000340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4619      	mov	r1, r3
 8000348:	4804      	ldr	r0, [pc, #16]	; (800035c <MX_GPIO_Init+0x94>)
 800034a:	f001 f9ef 	bl	800172c <HAL_GPIO_Init>

}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40010c00 	.word	0x40010c00

08000360 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000366:	f000 fd57 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036a:	f000 f8df 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036e:	f7ff ffab 	bl	80002c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000372:	f7ff ff91 	bl	8000298 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000376:	f000 fc9d 	bl	8000cb4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  PRINTF("################################################################################################\r\n");
 800037a:	4a5c      	ldr	r2, [pc, #368]	; (80004ec <main+0x18c>)
 800037c:	4b5c      	ldr	r3, [pc, #368]	; (80004f0 <main+0x190>)
 800037e:	4610      	mov	r0, r2
 8000380:	4619      	mov	r1, r3
 8000382:	2363      	movs	r3, #99	; 0x63
 8000384:	461a      	mov	r2, r3
 8000386:	f002 fa8d 	bl	80028a4 <memcpy>
 800038a:	4958      	ldr	r1, [pc, #352]	; (80004ec <main+0x18c>)
 800038c:	4859      	ldr	r0, [pc, #356]	; (80004f4 <main+0x194>)
 800038e:	f000 f9e2 	bl	8000756 <vUARTSend>
  PRINTF("Project name: [FLASH]ReadWrite_internal_flash\r\n");
 8000392:	4b56      	ldr	r3, [pc, #344]	; (80004ec <main+0x18c>)
 8000394:	4a58      	ldr	r2, [pc, #352]	; (80004f8 <main+0x198>)
 8000396:	4614      	mov	r4, r2
 8000398:	469c      	mov	ip, r3
 800039a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800039e:	4665      	mov	r5, ip
 80003a0:	4626      	mov	r6, r4
 80003a2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80003a4:	6028      	str	r0, [r5, #0]
 80003a6:	6069      	str	r1, [r5, #4]
 80003a8:	60aa      	str	r2, [r5, #8]
 80003aa:	60eb      	str	r3, [r5, #12]
 80003ac:	3410      	adds	r4, #16
 80003ae:	f10c 0c10 	add.w	ip, ip, #16
 80003b2:	4574      	cmp	r4, lr
 80003b4:	d1f3      	bne.n	800039e <main+0x3e>
 80003b6:	494d      	ldr	r1, [pc, #308]	; (80004ec <main+0x18c>)
 80003b8:	484e      	ldr	r0, [pc, #312]	; (80004f4 <main+0x194>)
 80003ba:	f000 f9cc 	bl	8000756 <vUARTSend>
  PRINTF("**********************************SHORT DESCRIPTION******************************\r\n");
 80003be:	4a4b      	ldr	r2, [pc, #300]	; (80004ec <main+0x18c>)
 80003c0:	4b4e      	ldr	r3, [pc, #312]	; (80004fc <main+0x19c>)
 80003c2:	4610      	mov	r0, r2
 80003c4:	4619      	mov	r1, r3
 80003c6:	2354      	movs	r3, #84	; 0x54
 80003c8:	461a      	mov	r2, r3
 80003ca:	f002 fa6b 	bl	80028a4 <memcpy>
 80003ce:	4947      	ldr	r1, [pc, #284]	; (80004ec <main+0x18c>)
 80003d0:	4848      	ldr	r0, [pc, #288]	; (80004f4 <main+0x194>)
 80003d2:	f000 f9c0 	bl	8000756 <vUARTSend>
  PRINTF("This project illustrate how to write data to internal flash as well as Read out Flash data\r\n");
 80003d6:	4a45      	ldr	r2, [pc, #276]	; (80004ec <main+0x18c>)
 80003d8:	4b49      	ldr	r3, [pc, #292]	; (8000500 <main+0x1a0>)
 80003da:	4610      	mov	r0, r2
 80003dc:	4619      	mov	r1, r3
 80003de:	235d      	movs	r3, #93	; 0x5d
 80003e0:	461a      	mov	r2, r3
 80003e2:	f002 fa5f 	bl	80028a4 <memcpy>
 80003e6:	4941      	ldr	r1, [pc, #260]	; (80004ec <main+0x18c>)
 80003e8:	4842      	ldr	r0, [pc, #264]	; (80004f4 <main+0x194>)
 80003ea:	f000 f9b4 	bl	8000756 <vUARTSend>
  PRINTF("*********************************************************************************\r\n");
 80003ee:	4a3f      	ldr	r2, [pc, #252]	; (80004ec <main+0x18c>)
 80003f0:	4b44      	ldr	r3, [pc, #272]	; (8000504 <main+0x1a4>)
 80003f2:	4610      	mov	r0, r2
 80003f4:	4619      	mov	r1, r3
 80003f6:	2354      	movs	r3, #84	; 0x54
 80003f8:	461a      	mov	r2, r3
 80003fa:	f002 fa53 	bl	80028a4 <memcpy>
 80003fe:	493b      	ldr	r1, [pc, #236]	; (80004ec <main+0x18c>)
 8000400:	483c      	ldr	r0, [pc, #240]	; (80004f4 <main+0x194>)
 8000402:	f000 f9a8 	bl	8000756 <vUARTSend>
  PRINTF("Run Application\r\n");
 8000406:	4a39      	ldr	r2, [pc, #228]	; (80004ec <main+0x18c>)
 8000408:	4b3f      	ldr	r3, [pc, #252]	; (8000508 <main+0x1a8>)
 800040a:	4615      	mov	r5, r2
 800040c:	461c      	mov	r4, r3
 800040e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000410:	6028      	str	r0, [r5, #0]
 8000412:	6069      	str	r1, [r5, #4]
 8000414:	60aa      	str	r2, [r5, #8]
 8000416:	60eb      	str	r3, [r5, #12]
 8000418:	8823      	ldrh	r3, [r4, #0]
 800041a:	822b      	strh	r3, [r5, #16]
 800041c:	4933      	ldr	r1, [pc, #204]	; (80004ec <main+0x18c>)
 800041e:	4835      	ldr	r0, [pc, #212]	; (80004f4 <main+0x194>)
 8000420:	f000 f999 	bl	8000756 <vUARTSend>

  PRINTF("\r\nStart writing data to internal Flash\r\n");
 8000424:	4b31      	ldr	r3, [pc, #196]	; (80004ec <main+0x18c>)
 8000426:	4a39      	ldr	r2, [pc, #228]	; (800050c <main+0x1ac>)
 8000428:	4614      	mov	r4, r2
 800042a:	469c      	mov	ip, r3
 800042c:	f104 0e20 	add.w	lr, r4, #32
 8000430:	4665      	mov	r5, ip
 8000432:	4626      	mov	r6, r4
 8000434:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000436:	6028      	str	r0, [r5, #0]
 8000438:	6069      	str	r1, [r5, #4]
 800043a:	60aa      	str	r2, [r5, #8]
 800043c:	60eb      	str	r3, [r5, #12]
 800043e:	3410      	adds	r4, #16
 8000440:	f10c 0c10 	add.w	ip, ip, #16
 8000444:	4574      	cmp	r4, lr
 8000446:	d1f3      	bne.n	8000430 <main+0xd0>
 8000448:	4662      	mov	r2, ip
 800044a:	4623      	mov	r3, r4
 800044c:	cb03      	ldmia	r3!, {r0, r1}
 800044e:	6010      	str	r0, [r2, #0]
 8000450:	6051      	str	r1, [r2, #4]
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	7213      	strb	r3, [r2, #8]
 8000456:	4925      	ldr	r1, [pc, #148]	; (80004ec <main+0x18c>)
 8000458:	4826      	ldr	r0, [pc, #152]	; (80004f4 <main+0x194>)
 800045a:	f000 f97c 	bl	8000756 <vUARTSend>
  Flash_WriteWord(ADDR_FLASH_PAGE_50, FLASH_END_ADDRESS, data, sizeof(data) / 4);
 800045e:	2309      	movs	r3, #9
 8000460:	4a2b      	ldr	r2, [pc, #172]	; (8000510 <main+0x1b0>)
 8000462:	492c      	ldr	r1, [pc, #176]	; (8000514 <main+0x1b4>)
 8000464:	482c      	ldr	r0, [pc, #176]	; (8000518 <main+0x1b8>)
 8000466:	f000 f8ad 	bl	80005c4 <Flash_WriteWord>

  PRINTF("\r\nVerify written data\r\n");
 800046a:	4a20      	ldr	r2, [pc, #128]	; (80004ec <main+0x18c>)
 800046c:	4b2b      	ldr	r3, [pc, #172]	; (800051c <main+0x1bc>)
 800046e:	4615      	mov	r5, r2
 8000470:	461c      	mov	r4, r3
 8000472:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000474:	6028      	str	r0, [r5, #0]
 8000476:	6069      	str	r1, [r5, #4]
 8000478:	60aa      	str	r2, [r5, #8]
 800047a:	60eb      	str	r3, [r5, #12]
 800047c:	cc03      	ldmia	r4!, {r0, r1}
 800047e:	6128      	str	r0, [r5, #16]
 8000480:	6169      	str	r1, [r5, #20]
 8000482:	491a      	ldr	r1, [pc, #104]	; (80004ec <main+0x18c>)
 8000484:	481b      	ldr	r0, [pc, #108]	; (80004f4 <main+0x194>)
 8000486:	f000 f966 	bl	8000756 <vUARTSend>
  for (size_t i = 0; i < sizeof(data) / 4; i++)
 800048a:	2300      	movs	r3, #0
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	e01f      	b.n	80004d0 <main+0x170>
  {
    printVar(Flash_ReadAddress(ADDR_FLASH_PAGE_50 + i * 4));
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000496:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 800049a:	009b      	lsls	r3, r3, #2
 800049c:	4618      	mov	r0, r3
 800049e:	f000 f92f 	bl	8000700 <Flash_ReadAddress>
 80004a2:	4603      	mov	r3, r0
 80004a4:	461a      	mov	r2, r3
 80004a6:	491e      	ldr	r1, [pc, #120]	; (8000520 <main+0x1c0>)
 80004a8:	4810      	ldr	r0, [pc, #64]	; (80004ec <main+0x18c>)
 80004aa:	f002 fa0f 	bl	80028cc <siprintf>
 80004ae:	490f      	ldr	r1, [pc, #60]	; (80004ec <main+0x18c>)
 80004b0:	4810      	ldr	r0, [pc, #64]	; (80004f4 <main+0x194>)
 80004b2:	f000 f950 	bl	8000756 <vUARTSend>
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <main+0x18c>)
 80004b8:	4a1a      	ldr	r2, [pc, #104]	; (8000524 <main+0x1c4>)
 80004ba:	8811      	ldrh	r1, [r2, #0]
 80004bc:	7892      	ldrb	r2, [r2, #2]
 80004be:	8019      	strh	r1, [r3, #0]
 80004c0:	709a      	strb	r2, [r3, #2]
 80004c2:	490a      	ldr	r1, [pc, #40]	; (80004ec <main+0x18c>)
 80004c4:	480b      	ldr	r0, [pc, #44]	; (80004f4 <main+0x194>)
 80004c6:	f000 f946 	bl	8000756 <vUARTSend>
  for (size_t i = 0; i < sizeof(data) / 4; i++)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	3301      	adds	r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b08      	cmp	r3, #8
 80004d4:	d9dc      	bls.n	8000490 <main+0x130>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      toggleLed4;
 80004d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004da:	4813      	ldr	r0, [pc, #76]	; (8000528 <main+0x1c8>)
 80004dc:	f001 fa98 	bl	8001a10 <HAL_GPIO_TogglePin>
      HAL_Delay(1000);
 80004e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e4:	f000 fcfa 	bl	8000edc <HAL_Delay>
      toggleLed4;
 80004e8:	e7f5      	b.n	80004d6 <main+0x176>
 80004ea:	bf00      	nop
 80004ec:	200000c0 	.word	0x200000c0
 80004f0:	08003154 	.word	0x08003154
 80004f4:	40004400 	.word	0x40004400
 80004f8:	080031b8 	.word	0x080031b8
 80004fc:	080031e8 	.word	0x080031e8
 8000500:	0800323c 	.word	0x0800323c
 8000504:	0800329c 	.word	0x0800329c
 8000508:	080032f0 	.word	0x080032f0
 800050c:	08003304 	.word	0x08003304
 8000510:	20000000 	.word	0x20000000
 8000514:	08010000 	.word	0x08010000
 8000518:	0800c800 	.word	0x0800c800
 800051c:	08003330 	.word	0x08003330
 8000520:	08003348 	.word	0x08003348
 8000524:	08003120 	.word	0x08003120
 8000528:	40010c00 	.word	0x40010c00

0800052c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b090      	sub	sp, #64	; 0x40
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0318 	add.w	r3, r7, #24
 8000536:	2228      	movs	r2, #40	; 0x28
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f002 f9bd 	bl	80028ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800054e:	2301      	movs	r3, #1
 8000550:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000556:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000564:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800056a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0318 	add.w	r3, r7, #24
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fa65 	bl	8001a44 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000580:	f000 f819 	bl	80005b6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
     */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000584:	230f      	movs	r3, #15
 8000586:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000588:	2302      	movs	r3, #2
 800058a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2102      	movs	r1, #2
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fcd0 	bl	8001f44 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005aa:	f000 f804 	bl	80005b6 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3740      	adds	r7, #64	; 0x40
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}

080005b6 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005ba:	bf00      	nop
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr
	...

080005c4 <Flash_WriteWord>:
#include "myFlash.h"

Flash_Status_t Flash_WriteWord(uint32_t start_address, uint32_t end_address, uint32_t *data, uint32_t data_length)
{
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
 80005d0:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status = HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    Flash_Status_t flash_status = FLASH_ERROR;
 80005d8:	2301      	movs	r3, #1
 80005da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    uint32_t index = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Struct for erase process */
    FLASH_EraseInitTypeDef EraseInitStruct;

    HAL_FLASH_Unlock();
 80005e2:	f000 ff13 	bl	800140c <HAL_FLASH_Unlock>

    EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.PageAddress = start_address;
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	623b      	str	r3, [r7, #32]
    EraseInitStruct.NbPages = (end_address - start_address) / FLASH_PAGE_SIZE;
 80005ee:	68ba      	ldr	r2, [r7, #8]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	1ad3      	subs	r3, r2, r3
 80005f4:	0a9b      	lsrs	r3, r3, #10
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t PageError = 0xFFFFFFFF;
 80005f8:	f04f 33ff 	mov.w	r3, #4294967295
 80005fc:	617b      	str	r3, [r7, #20]

    /* Erase Flash based on initialize struct */
    status = HAL_FLASHEx_Erase(&EraseInitStruct, &PageError);
 80005fe:	f107 0214 	add.w	r2, r7, #20
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f000 ffe7 	bl	80015dc <HAL_FLASHEx_Erase>
 800060e:	4603      	mov	r3, r0
 8000610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (status != HAL_OK)
 8000614:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000618:	2b00      	cmp	r3, #0
 800061a:	d05a      	beq.n	80006d2 <Flash_WriteWord+0x10e>
    {
        return flash_status;
 800061c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000620:	e05d      	b.n	80006de <Flash_WriteWord+0x11a>
    }

    /* Start program flash with given data pointer */
    for (; data_length > 0; --data_length)
    {
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_address, data[index]);
 8000622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f04f 0400 	mov.w	r4, #0
 8000630:	461a      	mov	r2, r3
 8000632:	4623      	mov	r3, r4
 8000634:	68f9      	ldr	r1, [r7, #12]
 8000636:	2002      	movs	r0, #2
 8000638:	f000 fd80 	bl	800113c <HAL_FLASH_Program>
 800063c:	4603      	mov	r3, r0
 800063e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined(PRINT_DEBUG) /* PRINT_DEBUG */
        PRINTF("Programing data at");
 8000642:	4a29      	ldr	r2, [pc, #164]	; (80006e8 <Flash_WriteWord+0x124>)
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <Flash_WriteWord+0x128>)
 8000646:	4615      	mov	r5, r2
 8000648:	461c      	mov	r4, r3
 800064a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800064c:	6028      	str	r0, [r5, #0]
 800064e:	6069      	str	r1, [r5, #4]
 8000650:	60aa      	str	r2, [r5, #8]
 8000652:	60eb      	str	r3, [r5, #12]
 8000654:	8823      	ldrh	r3, [r4, #0]
 8000656:	78a2      	ldrb	r2, [r4, #2]
 8000658:	822b      	strh	r3, [r5, #16]
 800065a:	4613      	mov	r3, r2
 800065c:	74ab      	strb	r3, [r5, #18]
 800065e:	4922      	ldr	r1, [pc, #136]	; (80006e8 <Flash_WriteWord+0x124>)
 8000660:	4823      	ldr	r0, [pc, #140]	; (80006f0 <Flash_WriteWord+0x12c>)
 8000662:	f000 f878 	bl	8000756 <vUARTSend>
        GET_VAR(start_address);
 8000666:	68fa      	ldr	r2, [r7, #12]
 8000668:	4922      	ldr	r1, [pc, #136]	; (80006f4 <Flash_WriteWord+0x130>)
 800066a:	481f      	ldr	r0, [pc, #124]	; (80006e8 <Flash_WriteWord+0x124>)
 800066c:	f002 f92e 	bl	80028cc <siprintf>
 8000670:	491d      	ldr	r1, [pc, #116]	; (80006e8 <Flash_WriteWord+0x124>)
 8000672:	481f      	ldr	r0, [pc, #124]	; (80006f0 <Flash_WriteWord+0x12c>)
 8000674:	f000 f86f 	bl	8000756 <vUARTSend>
        PRINTF("with data");
 8000678:	4a1b      	ldr	r2, [pc, #108]	; (80006e8 <Flash_WriteWord+0x124>)
 800067a:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <Flash_WriteWord+0x134>)
 800067c:	cb03      	ldmia	r3!, {r0, r1}
 800067e:	6010      	str	r0, [r2, #0]
 8000680:	6051      	str	r1, [r2, #4]
 8000682:	881b      	ldrh	r3, [r3, #0]
 8000684:	8113      	strh	r3, [r2, #8]
 8000686:	4918      	ldr	r1, [pc, #96]	; (80006e8 <Flash_WriteWord+0x124>)
 8000688:	4819      	ldr	r0, [pc, #100]	; (80006f0 <Flash_WriteWord+0x12c>)
 800068a:	f000 f864 	bl	8000756 <vUARTSend>
        GET_VAR(data[index]);
 800068e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	4413      	add	r3, r2
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4916      	ldr	r1, [pc, #88]	; (80006f4 <Flash_WriteWord+0x130>)
 800069c:	4812      	ldr	r0, [pc, #72]	; (80006e8 <Flash_WriteWord+0x124>)
 800069e:	f002 f915 	bl	80028cc <siprintf>
 80006a2:	4911      	ldr	r1, [pc, #68]	; (80006e8 <Flash_WriteWord+0x124>)
 80006a4:	4812      	ldr	r0, [pc, #72]	; (80006f0 <Flash_WriteWord+0x12c>)
 80006a6:	f000 f856 	bl	8000756 <vUARTSend>
        newline;
 80006aa:	4914      	ldr	r1, [pc, #80]	; (80006fc <Flash_WriteWord+0x138>)
 80006ac:	4810      	ldr	r0, [pc, #64]	; (80006f0 <Flash_WriteWord+0x12c>)
 80006ae:	f000 f852 	bl	8000756 <vUARTSend>
#endif /* !PRINT_DEBUG */
        if (status != HAL_OK)
 80006b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <Flash_WriteWord+0xfc>
        {
            return flash_status;
 80006ba:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80006be:	e00e      	b.n	80006de <Flash_WriteWord+0x11a>
        }
        ++index;
 80006c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c2:	3301      	adds	r3, #1
 80006c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        start_address += 4;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	3304      	adds	r3, #4
 80006ca:	60fb      	str	r3, [r7, #12]
    for (; data_length > 0; --data_length)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	3b01      	subs	r3, #1
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1a4      	bne.n	8000622 <Flash_WriteWord+0x5e>
    }

    HAL_FLASH_Lock();
 80006d8:	f000 febe 	bl	8001458 <HAL_FLASH_Lock>
    return FLASH_SUCCESS;
 80006dc:	2300      	movs	r3, #0
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3730      	adds	r7, #48	; 0x30
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bdb0      	pop	{r4, r5, r7, pc}
 80006e6:	bf00      	nop
 80006e8:	200000c0 	.word	0x200000c0
 80006ec:	08003388 	.word	0x08003388
 80006f0:	40004400 	.word	0x40004400
 80006f4:	0800339c 	.word	0x0800339c
 80006f8:	080033a4 	.word	0x080033a4
 80006fc:	080033b0 	.word	0x080033b0

08000700 <Flash_ReadAddress>:

uint32_t Flash_ReadAddress(uint32_t flash_address)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
    return *(volatile uint32_t *)(flash_address);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
}
 800070c:	4618      	mov	r0, r3
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000726:	2b40      	cmp	r3, #64	; 0x40
 8000728:	bf0c      	ite	eq
 800072a:	2301      	moveq	r3, #1
 800072c:	2300      	movne	r3, #0
 800072e:	b2db      	uxtb	r3, r3
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr

0800073a <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	460b      	mov	r3, r1
 8000744:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8000746:	78fa      	ldrb	r2, [r7, #3]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	605a      	str	r2, [r3, #4]
}
 800074c:	bf00      	nop
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr

08000756 <vUARTSend>:
}
#endif /* configHAL_UART */

#if defined(configLL_UART)
void vUARTSend(USART_TypeDef *USARTx, uint8_t *String)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b086      	sub	sp, #24
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	6039      	str	r1, [r7, #0]
	uint32_t ulStringLen = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
	uint32_t ulBlockTime = 10000;
 8000768:	f242 7310 	movw	r3, #10000	; 0x2710
 800076c:	60fb      	str	r3, [r7, #12]
	ulStringLen = strlen((char *)String);
 800076e:	6838      	ldr	r0, [r7, #0]
 8000770:	f7ff fcec 	bl	800014c <strlen>
 8000774:	6178      	str	r0, [r7, #20]

	while (ulStringLen)
 8000776:	e01a      	b.n	80007ae <vUARTSend+0x58>
	{
		LL_USART_TransmitData8(USARTx, (uint8_t)String[i]);
 8000778:	683a      	ldr	r2, [r7, #0]
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	4413      	add	r3, r2
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	4619      	mov	r1, r3
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ffd9 	bl	800073a <LL_USART_TransmitData8>
		i++;
 8000788:	693b      	ldr	r3, [r7, #16]
 800078a:	3301      	adds	r3, #1
 800078c:	613b      	str	r3, [r7, #16]
		ulStringLen--;
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3b01      	subs	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
		/* Check if transfer 1 byte completed */
		while (!LL_USART_IsActiveFlag_TC(USARTx))
 8000794:	e005      	b.n	80007a2 <vUARTSend+0x4c>
		{
			if ((ulBlockTime--) == 0)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	60fa      	str	r2, [r7, #12]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d100      	bne.n	80007a2 <vUARTSend+0x4c>
				break;
 80007a0:	e005      	b.n	80007ae <vUARTSend+0x58>
		while (!LL_USART_IsActiveFlag_TC(USARTx))
 80007a2:	6878      	ldr	r0, [r7, #4]
 80007a4:	f7ff ffb7 	bl	8000716 <LL_USART_IsActiveFlag_TC>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d0f3      	beq.n	8000796 <vUARTSend+0x40>
	while (ulStringLen)
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d1e1      	bne.n	8000778 <vUARTSend+0x22>
		}
	}
}
 80007b4:	bf00      	nop
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b084      	sub	sp, #16
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <HAL_MspInit+0x6c>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	4a18      	ldr	r2, [pc, #96]	; (8000828 <HAL_MspInit+0x6c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6193      	str	r3, [r2, #24]
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <HAL_MspInit+0x6c>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <HAL_MspInit+0x6c>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	4a12      	ldr	r2, [pc, #72]	; (8000828 <HAL_MspInit+0x6c>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	61d3      	str	r3, [r2, #28]
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <HAL_MspInit+0x6c>)
 80007e8:	69db      	ldr	r3, [r3, #28]
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2004      	movs	r0, #4
 80007f8:	f000 fc69 	bl	80010ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80007fc:	2004      	movs	r0, #4
 80007fe:	f000 fc82 	bl	8001106 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_MspInit+0x70>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_MspInit+0x70>)
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	40010000 	.word	0x40010000

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <HardFault_Handler+0x4>

08000842 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <MemManage_Handler+0x4>

08000848 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <BusFault_Handler+0x4>

0800084e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <UsageFault_Handler+0x4>

08000854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr

0800086c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000870:	bf00      	nop
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 fb12 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000888:	f000 fcc8 	bl	800121c <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800088c:	bf00      	nop
 800088e:	bd80      	pop	{r7, pc}

08000890 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr

0800089c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008b0:	4a14      	ldr	r2, [pc, #80]	; (8000904 <_sbrk+0x5c>)
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <_sbrk+0x60>)
 80008b4:	1ad3      	subs	r3, r2, r3
 80008b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <_sbrk+0x64>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008c4:	4b11      	ldr	r3, [pc, #68]	; (800090c <_sbrk+0x64>)
 80008c6:	4a12      	ldr	r2, [pc, #72]	; (8000910 <_sbrk+0x68>)
 80008c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <_sbrk+0x64>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4413      	add	r3, r2
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	d207      	bcs.n	80008e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d8:	f001 ffba 	bl	8002850 <__errno>
 80008dc:	4602      	mov	r2, r0
 80008de:	230c      	movs	r3, #12
 80008e0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80008e2:	f04f 33ff 	mov.w	r3, #4294967295
 80008e6:	e009      	b.n	80008fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008ee:	4b07      	ldr	r3, [pc, #28]	; (800090c <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <_sbrk+0x64>)
 80008f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008fa:	68fb      	ldr	r3, [r7, #12]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20005000 	.word	0x20005000
 8000908:	00000400 	.word	0x00000400
 800090c:	200000b4 	.word	0x200000b4
 8000910:	20000150 	.word	0x20000150

08000914 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <__NVIC_GetPriorityGrouping>:
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000924:	4b04      	ldr	r3, [pc, #16]	; (8000938 <__NVIC_GetPriorityGrouping+0x18>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	f003 0307 	and.w	r3, r3, #7
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <__NVIC_EnableIRQ>:
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	2b00      	cmp	r3, #0
 800094c:	db0b      	blt.n	8000966 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	f003 021f 	and.w	r2, r3, #31
 8000954:	4906      	ldr	r1, [pc, #24]	; (8000970 <__NVIC_EnableIRQ+0x34>)
 8000956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095a:	095b      	lsrs	r3, r3, #5
 800095c:	2001      	movs	r0, #1
 800095e:	fa00 f202 	lsl.w	r2, r0, r2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100

08000974 <__NVIC_SetPriority>:
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	; (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	; (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bc80      	pop	{r7}
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	; 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	; 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <LL_DMA_SetDataTransferDirection+0x44>)
 8000a3e:	5cd3      	ldrb	r3, [r2, r3]
 8000a40:	461a      	mov	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	4413      	add	r3, r2
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a4c:	f023 0310 	bic.w	r3, r3, #16
 8000a50:	68ba      	ldr	r2, [r7, #8]
 8000a52:	3a01      	subs	r2, #1
 8000a54:	4906      	ldr	r1, [pc, #24]	; (8000a70 <LL_DMA_SetDataTransferDirection+0x44>)
 8000a56:	5c8a      	ldrb	r2, [r1, r2]
 8000a58:	4611      	mov	r1, r2
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	440a      	add	r2, r1
 8000a5e:	4611      	mov	r1, r2
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8000a66:	bf00      	nop
 8000a68:	3714      	adds	r7, #20
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	080033e0 	.word	0x080033e0

08000a74 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	60f8      	str	r0, [r7, #12]
 8000a7c:	60b9      	str	r1, [r7, #8]
 8000a7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LL_DMA_SetMode+0x40>)
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4413      	add	r3, r2
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f023 0220 	bic.w	r2, r3, #32
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4906      	ldr	r1, [pc, #24]	; (8000ab4 <LL_DMA_SetMode+0x40>)
 8000a9a:	5ccb      	ldrb	r3, [r1, r3]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	440b      	add	r3, r1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	600b      	str	r3, [r1, #0]
             Mode);
}
 8000aaa:	bf00      	nop
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	080033e0 	.word	0x080033e0

08000ab8 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	4a0b      	ldr	r2, [pc, #44]	; (8000af8 <LL_DMA_SetPeriphIncMode+0x40>)
 8000aca:	5cd3      	ldrb	r3, [r2, r3]
 8000acc:	461a      	mov	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	4906      	ldr	r1, [pc, #24]	; (8000af8 <LL_DMA_SetPeriphIncMode+0x40>)
 8000ade:	5ccb      	ldrb	r3, [r1, r3]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	440b      	add	r3, r1
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8000aee:	bf00      	nop
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	080033e0 	.word	0x080033e0

08000afc <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <LL_DMA_SetMemoryIncMode+0x40>)
 8000b0e:	5cd3      	ldrb	r3, [r2, r3]
 8000b10:	461a      	mov	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	4413      	add	r3, r2
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	4906      	ldr	r1, [pc, #24]	; (8000b3c <LL_DMA_SetMemoryIncMode+0x40>)
 8000b22:	5ccb      	ldrb	r3, [r1, r3]
 8000b24:	4619      	mov	r1, r3
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	440b      	add	r3, r1
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	080033e0 	.word	0x080033e0

08000b40 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	60f8      	str	r0, [r7, #12]
 8000b48:	60b9      	str	r1, [r7, #8]
 8000b4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	4a0b      	ldr	r2, [pc, #44]	; (8000b80 <LL_DMA_SetPeriphSize+0x40>)
 8000b52:	5cd3      	ldrb	r3, [r2, r3]
 8000b54:	461a      	mov	r2, r3
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	4906      	ldr	r1, [pc, #24]	; (8000b80 <LL_DMA_SetPeriphSize+0x40>)
 8000b66:	5ccb      	ldrb	r3, [r1, r3]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	440b      	add	r3, r1
 8000b6e:	4619      	mov	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	080033e0 	.word	0x080033e0

08000b84 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LL_DMA_SetMemorySize+0x40>)
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	4413      	add	r3, r2
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	4906      	ldr	r1, [pc, #24]	; (8000bc4 <LL_DMA_SetMemorySize+0x40>)
 8000baa:	5ccb      	ldrb	r3, [r1, r3]
 8000bac:	4619      	mov	r1, r3
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	440b      	add	r3, r1
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8000bba:	bf00      	nop
 8000bbc:	3714      	adds	r7, #20
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	080033e0 	.word	0x080033e0

08000bc8 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	60f8      	str	r0, [r7, #12]
 8000bd0:	60b9      	str	r1, [r7, #8]
 8000bd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000bda:	5cd3      	ldrb	r3, [r2, r3]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	4413      	add	r3, r2
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	4906      	ldr	r1, [pc, #24]	; (8000c08 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000bee:	5ccb      	ldrb	r3, [r1, r3]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	600b      	str	r3, [r1, #0]
             Priority);
}
 8000bfe:	bf00      	nop
 8000c00:	3714      	adds	r7, #20
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	080033e0 	.word	0x080033e0

08000c0c <LL_USART_Enable>:
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	60da      	str	r2, [r3, #12]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr

08000c2a <LL_USART_ConfigAsyncMode>:
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	695b      	ldr	r3, [r3, #20]
 8000c42:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	615a      	str	r2, [r3, #20]
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c5e:	69da      	ldr	r2, [r3, #28]
 8000c60:	4907      	ldr	r1, [pc, #28]	; (8000c80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c6a:	69da      	ldr	r2, [r3, #28]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c72:	68fb      	ldr	r3, [r7, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c8e:	699a      	ldr	r2, [r3, #24]
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4313      	orrs	r3, r2
 8000c96:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c9a:	699a      	ldr	r2, [r3, #24]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000

08000cb4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08c      	sub	sp, #48	; 0x30
 8000cb8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
 8000cca:	615a      	str	r2, [r3, #20]
 8000ccc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000cdc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ce0:	f7ff ffb8 	bl	8000c54 <LL_APB1_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f7ff ffcd 	bl	8000c84 <LL_APB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000cea:	f240 4304 	movw	r3, #1028	; 0x404
 8000cee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000cf0:	2309      	movs	r3, #9
 8000cf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	482f      	ldr	r0, [pc, #188]	; (8000dc0 <MX_USART2_UART_Init+0x10c>)
 8000d02:	f001 fb41 	bl	8002388 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000d06:	f640 0308 	movw	r3, #2056	; 0x808
 8000d0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	482a      	ldr	r0, [pc, #168]	; (8000dc0 <MX_USART2_UART_Init+0x10c>)
 8000d16:	f001 fb37 	bl	8002388 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2106      	movs	r1, #6
 8000d1e:	4829      	ldr	r0, [pc, #164]	; (8000dc4 <MX_USART2_UART_Init+0x110>)
 8000d20:	f7ff fe84 	bl	8000a2c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2106      	movs	r1, #6
 8000d28:	4826      	ldr	r0, [pc, #152]	; (8000dc4 <MX_USART2_UART_Init+0x110>)
 8000d2a:	f7ff ff4d 	bl	8000bc8 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_CIRCULAR);
 8000d2e:	2220      	movs	r2, #32
 8000d30:	2106      	movs	r1, #6
 8000d32:	4824      	ldr	r0, [pc, #144]	; (8000dc4 <MX_USART2_UART_Init+0x110>)
 8000d34:	f7ff fe9e 	bl	8000a74 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2106      	movs	r1, #6
 8000d3c:	4821      	ldr	r0, [pc, #132]	; (8000dc4 <MX_USART2_UART_Init+0x110>)
 8000d3e:	f7ff febb 	bl	8000ab8 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8000d42:	2280      	movs	r2, #128	; 0x80
 8000d44:	2106      	movs	r1, #6
 8000d46:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <MX_USART2_UART_Init+0x110>)
 8000d48:	f7ff fed8 	bl	8000afc <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2106      	movs	r1, #6
 8000d50:	481c      	ldr	r0, [pc, #112]	; (8000dc4 <MX_USART2_UART_Init+0x110>)
 8000d52:	f7ff fef5 	bl	8000b40 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2106      	movs	r1, #6
 8000d5a:	481a      	ldr	r0, [pc, #104]	; (8000dc4 <MX_USART2_UART_Init+0x110>)
 8000d5c:	f7ff ff12 	bl	8000b84 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000d60:	f7ff fdde 	bl	8000920 <__NVIC_GetPriorityGrouping>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2200      	movs	r2, #0
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fe2c 	bl	80009c8 <NVIC_EncodePriority>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4619      	mov	r1, r3
 8000d74:	2026      	movs	r0, #38	; 0x26
 8000d76:	f7ff fdfd 	bl	8000974 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8000d7a:	2026      	movs	r0, #38	; 0x26
 8000d7c:	f7ff fdde 	bl	800093c <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8000d80:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000d84:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000d92:	230c      	movs	r3, #12
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_USART_Init(USART2, &USART_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <MX_USART2_UART_Init+0x114>)
 8000da6:	f001 fcf3 	bl	8002790 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_USART2_UART_Init+0x114>)
 8000dac:	f7ff ff3d 	bl	8000c2a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART2_UART_Init+0x114>)
 8000db2:	f7ff ff2b 	bl	8000c0c <LL_USART_Enable>

}
 8000db6:	bf00      	nop
 8000db8:	3730      	adds	r7, #48	; 0x30
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40010800 	.word	0x40010800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40004400 	.word	0x40004400

08000dcc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000dcc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000dce:	e003      	b.n	8000dd8 <LoopCopyDataInit>

08000dd0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000dd2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000dd4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dd6:	3104      	adds	r1, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000dd8:	480a      	ldr	r0, [pc, #40]	; (8000e04 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ddc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dde:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000de0:	d3f6      	bcc.n	8000dd0 <CopyDataInit>
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	; (8000e0c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000de4:	e002      	b.n	8000dec <LoopFillZerobss>

08000de6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000de8:	f842 3b04 	str.w	r3, [r2], #4

08000dec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000dec:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000dee:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000df0:	d3f9      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000df2:	f7ff fd8f 	bl	8000914 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df6:	f001 fd31 	bl	800285c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfa:	f7ff fab1 	bl	8000360 <main>
  bx lr
 8000dfe:	4770      	bx	lr
  ldr r3, =_sidata
 8000e00:	08003424 	.word	0x08003424
  ldr r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e08:	20000094 	.word	0x20000094
  ldr r2, =_sbss
 8000e0c:	20000098 	.word	0x20000098
  ldr r3, = _ebss
 8000e10:	2000014c 	.word	0x2000014c

08000e14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_2_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_Init+0x28>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <HAL_Init+0x28>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f945 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f000 f808 	bl	8000e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e34:	f7ff fcc2 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40022000 	.word	0x40022000

08000e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x58>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f95d 	bl	8001122 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f925 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x5c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000024 	.word	0x20000024
 8000e9c:	2000002c 	.word	0x2000002c
 8000ea0:	20000028 	.word	0x20000028

08000ea4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea8:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <HAL_IncTick+0x1c>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	2000002c 	.word	0x2000002c
 8000ec4:	20000124 	.word	0x20000124

08000ec8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <HAL_GetTick+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	20000124 	.word	0x20000124

08000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff fff0 	bl	8000ec8 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef4:	d005      	beq.n	8000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ef6:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <HAL_Delay+0x40>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	461a      	mov	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f02:	bf00      	nop
 8000f04:	f7ff ffe0 	bl	8000ec8 <HAL_GetTick>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d8f7      	bhi.n	8000f04 <HAL_Delay+0x28>
  {
  }
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000002c 	.word	0x2000002c

08000f20 <__NVIC_SetPriorityGrouping>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f52:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <__NVIC_SetPriorityGrouping+0x44>)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	60d3      	str	r3, [r2, #12]
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <__NVIC_GetPriorityGrouping>:
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <__NVIC_GetPriorityGrouping+0x18>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	0a1b      	lsrs	r3, r3, #8
 8000f72:	f003 0307 	and.w	r3, r3, #7
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_EnableIRQ>:
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	db0b      	blt.n	8000fae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	f003 021f 	and.w	r2, r3, #31
 8000f9c:	4906      	ldr	r1, [pc, #24]	; (8000fb8 <__NVIC_EnableIRQ+0x34>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	095b      	lsrs	r3, r3, #5
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	fa00 f202 	lsl.w	r2, r0, r2
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	; (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	; 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	; (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff90 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff2d 	bl	8000f20 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e0:	f7ff ff42 	bl	8000f68 <__NVIC_GetPriorityGrouping>
 80010e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	6978      	ldr	r0, [r7, #20]
 80010ec:	f7ff ff90 	bl	8001010 <NVIC_EncodePriority>
 80010f0:	4602      	mov	r2, r0
 80010f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff5f 	bl	8000fbc <__NVIC_SetPriority>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001110:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff35 	bl	8000f84 <__NVIC_EnableIRQ>
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffa2 	bl	8001074 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800113c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_FLASH_Program+0xd8>)
 8001158:	7e1b      	ldrb	r3, [r3, #24]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_FLASH_Program+0x26>
 800115e:	2302      	movs	r3, #2
 8001160:	e054      	b.n	800120c <HAL_FLASH_Program+0xd0>
 8001162:	4b2c      	ldr	r3, [pc, #176]	; (8001214 <HAL_FLASH_Program+0xd8>)
 8001164:	2201      	movs	r2, #1
 8001166:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001168:	f24c 3050 	movw	r0, #50000	; 0xc350
 800116c:	f000 f9a0 	bl	80014b0 <FLASH_WaitForLastOperation>
 8001170:	4603      	mov	r3, r0
 8001172:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d144      	bne.n	8001204 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d102      	bne.n	8001186 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001180:	2301      	movs	r3, #1
 8001182:	757b      	strb	r3, [r7, #21]
 8001184:	e007      	b.n	8001196 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2b02      	cmp	r3, #2
 800118a:	d102      	bne.n	8001192 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800118c:	2302      	movs	r3, #2
 800118e:	757b      	strb	r3, [r7, #21]
 8001190:	e001      	b.n	8001196 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8001192:	2304      	movs	r3, #4
 8001194:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001196:	2300      	movs	r3, #0
 8001198:	75bb      	strb	r3, [r7, #22]
 800119a:	e02d      	b.n	80011f8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800119c:	7dbb      	ldrb	r3, [r7, #22]
 800119e:	005a      	lsls	r2, r3, #1
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	eb02 0c03 	add.w	ip, r2, r3
 80011a6:	7dbb      	ldrb	r3, [r7, #22]
 80011a8:	0119      	lsls	r1, r3, #4
 80011aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011ae:	f1c1 0620 	rsb	r6, r1, #32
 80011b2:	f1a1 0020 	sub.w	r0, r1, #32
 80011b6:	fa22 f401 	lsr.w	r4, r2, r1
 80011ba:	fa03 f606 	lsl.w	r6, r3, r6
 80011be:	4334      	orrs	r4, r6
 80011c0:	fa23 f000 	lsr.w	r0, r3, r0
 80011c4:	4304      	orrs	r4, r0
 80011c6:	fa23 f501 	lsr.w	r5, r3, r1
 80011ca:	b2a3      	uxth	r3, r4
 80011cc:	4619      	mov	r1, r3
 80011ce:	4660      	mov	r0, ip
 80011d0:	f000 f952 	bl	8001478 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80011d8:	f000 f96a 	bl	80014b0 <FLASH_WaitForLastOperation>
 80011dc:	4603      	mov	r3, r0
 80011de:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80011e0:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <HAL_FLASH_Program+0xdc>)
 80011e2:	691b      	ldr	r3, [r3, #16]
 80011e4:	4a0c      	ldr	r2, [pc, #48]	; (8001218 <HAL_FLASH_Program+0xdc>)
 80011e6:	f023 0301 	bic.w	r3, r3, #1
 80011ea:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80011ec:	7dfb      	ldrb	r3, [r7, #23]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d107      	bne.n	8001202 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80011f2:	7dbb      	ldrb	r3, [r7, #22]
 80011f4:	3301      	adds	r3, #1
 80011f6:	75bb      	strb	r3, [r7, #22]
 80011f8:	7dba      	ldrb	r2, [r7, #22]
 80011fa:	7d7b      	ldrb	r3, [r7, #21]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d3cd      	bcc.n	800119c <HAL_FLASH_Program+0x60>
 8001200:	e000      	b.n	8001204 <HAL_FLASH_Program+0xc8>
      {
        break;
 8001202:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <HAL_FLASH_Program+0xd8>)
 8001206:	2200      	movs	r2, #0
 8001208:	761a      	strb	r2, [r3, #24]

  return status;
 800120a:	7dfb      	ldrb	r3, [r7, #23]
}
 800120c:	4618      	mov	r0, r3
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001214:	20000128 	.word	0x20000128
 8001218:	40022000 	.word	0x40022000

0800121c <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
  /* Check FLASH operation error flags */
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK1) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK1) || \
    (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2)))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001226:	4b6e      	ldr	r3, [pc, #440]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b00      	cmp	r3, #0
 8001230:	d105      	bne.n	800123e <HAL_FLASH_IRQHandler+0x22>
 8001232:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	f003 0304 	and.w	r3, r3, #4
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00e      	beq.n	800125c <HAL_FLASH_IRQHandler+0x40>
#endif /* FLASH_BANK2_END */
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 800123e:	4b69      	ldr	r3, [pc, #420]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8001244:	4b67      	ldr	r3, [pc, #412]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001246:	f04f 32ff 	mov.w	r2, #4294967295
 800124a:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 800124c:	f000 f976 	bl	800153c <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f8d2 	bl	80013fa <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001256:	4b63      	ldr	r3, [pc, #396]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP_BANK1))
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP_BANK1);
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800125c:	4b60      	ldr	r3, [pc, #384]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80a2 	beq.w	80013ae <HAL_FLASH_IRQHandler+0x192>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800126a:	4b5d      	ldr	r3, [pc, #372]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 800126c:	2220      	movs	r2, #32
 800126e:	60da      	str	r2, [r3, #12]
#endif /* FLASH_BANK2_END */
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8001270:	4b5c      	ldr	r3, [pc, #368]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8099 	beq.w	80013ae <HAL_FLASH_IRQHandler+0x192>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 800127c:	4b59      	ldr	r3, [pc, #356]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d12d      	bne.n	80012e2 <HAL_FLASH_IRQHandler+0xc6>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8001286:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	4a55      	ldr	r2, [pc, #340]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 800128e:	6053      	str	r3, [r2, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8001290:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d017      	beq.n	80012c8 <HAL_FLASH_IRQHandler+0xac>
        {
          addresstmp = pFlash.Address;
 8001298:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f8a2 	bl	80013e8 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 80012a4:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012ac:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 80012ae:	4a4d      	ldr	r2, [pc, #308]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6093      	str	r3, [r2, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012b4:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	4a49      	ldr	r2, [pc, #292]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 80012ba:	f023 0302 	bic.w	r3, r3, #2
 80012be:	6113      	str	r3, [r2, #16]

          FLASH_PageErase(addresstmp);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 fa13 	bl	80016ec <FLASH_PageErase>
 80012c6:	e072      	b.n	80013ae <HAL_FLASH_IRQHandler+0x192>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4a45      	ldr	r2, [pc, #276]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6093      	str	r3, [r2, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80012d4:	4b43      	ldr	r3, [pc, #268]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 f884 	bl	80013e8 <HAL_FLASH_EndOfOperationCallback>
 80012e0:	e065      	b.n	80013ae <HAL_FLASH_IRQHandler+0x192>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 80012e2:	4b40      	ldr	r3, [pc, #256]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d10c      	bne.n	8001306 <HAL_FLASH_IRQHandler+0xea>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012ec:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	4a3b      	ldr	r2, [pc, #236]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 80012f2:	f023 0304 	bic.w	r3, r3, #4
 80012f6:	6113      	str	r3, [r2, #16]
        if (HAL_IS_BIT_CLR(FLASH->CR2, FLASH_CR2_MER))
        {
#endif /* FLASH_BANK2_END */
          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0U);
 80012f8:	2000      	movs	r0, #0
 80012fa:	f000 f875 	bl	80013e8 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80012fe:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001300:	2200      	movs	r2, #0
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	e053      	b.n	80013ae <HAL_FLASH_IRQHandler+0x192>
      }
#endif /* FLASH_BANK2_END */
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8001306:	4b37      	ldr	r3, [pc, #220]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	4a35      	ldr	r2, [pc, #212]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 800130e:	6053      	str	r3, [r2, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8001310:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d026      	beq.n	8001366 <HAL_FLASH_IRQHandler+0x14a>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2U;
 8001318:	4b32      	ldr	r3, [pc, #200]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	3302      	adds	r3, #2
 800131e:	4a31      	ldr	r2, [pc, #196]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001320:	6093      	str	r3, [r2, #8]
          addresstmp = pFlash.Address;
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 800132a:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 800132e:	f04f 0300 	mov.w	r3, #0
 8001332:	f04f 0400 	mov.w	r4, #0
 8001336:	0c0b      	lsrs	r3, r1, #16
 8001338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800133c:	0c14      	lsrs	r4, r2, #16
 800133e:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001340:	e9c2 3404 	strd	r3, r4, [r2, #16]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	4a25      	ldr	r2, [pc, #148]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	6113      	str	r3, [r2, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8001350:	4b24      	ldr	r3, [pc, #144]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001352:	f103 0410 	add.w	r4, r3, #16
 8001356:	e9d4 3400 	ldrd	r3, r4, [r4]
 800135a:	b29b      	uxth	r3, r3
 800135c:	4619      	mov	r1, r3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f88a 	bl	8001478 <FLASH_Program_HalfWord>
 8001364:	e023      	b.n	80013ae <HAL_FLASH_IRQHandler+0x192>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8001366:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b03      	cmp	r3, #3
 800136e:	d105      	bne.n	800137c <HAL_FLASH_IRQHandler+0x160>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f837 	bl	80013e8 <HAL_FLASH_EndOfOperationCallback>
 800137a:	e011      	b.n	80013a0 <HAL_FLASH_IRQHandler+0x184>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b04      	cmp	r3, #4
 8001384:	d106      	bne.n	8001394 <HAL_FLASH_IRQHandler+0x178>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	3b02      	subs	r3, #2
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f82b 	bl	80013e8 <HAL_FLASH_EndOfOperationCallback>
 8001392:	e005      	b.n	80013a0 <HAL_FLASH_IRQHandler+0x184>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	3b06      	subs	r3, #6
 800139a:	4618      	mov	r0, r3
 800139c:	f000 f824 	bl	80013e8 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 80013a0:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 80013a2:	f04f 32ff 	mov.w	r2, #4294967295
 80013a6:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80013a8:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
      }
    }
  }
#endif 

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d10e      	bne.n	80013d6 <HAL_FLASH_IRQHandler+0x1ba>
  
    /* Disable End of FLASH Operation and Error source interrupts for both banks */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP_BANK1 | FLASH_IT_ERR_BANK1 | FLASH_IT_EOP_BANK2 | FLASH_IT_ERR_BANK2);
#else
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 80013b8:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	4a08      	ldr	r2, [pc, #32]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 80013be:	f023 0307 	bic.w	r3, r3, #7
 80013c2:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <HAL_FLASH_IRQHandler+0x1c4>)
 80013ca:	f423 53a0 	bic.w	r3, r3, #5120	; 0x1400
 80013ce:	6113      	str	r3, [r2, #16]
#endif /* FLASH_BANK2_END */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <HAL_FLASH_IRQHandler+0x1c8>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	761a      	strb	r2, [r3, #24]
  }
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd90      	pop	{r4, r7, pc}
 80013de:	bf00      	nop
 80013e0:	40022000 	.word	0x40022000
 80013e4:	20000128 	.word	0x20000128

080013e8 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr

080013fa <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001412:	2300      	movs	r3, #0
 8001414:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_FLASH_Unlock+0x40>)
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00d      	beq.n	800143e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <HAL_FLASH_Unlock+0x40>)
 8001424:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <HAL_FLASH_Unlock+0x44>)
 8001426:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_FLASH_Unlock+0x40>)
 800142a:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_FLASH_Unlock+0x48>)
 800142c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800142e:	4b07      	ldr	r3, [pc, #28]	; (800144c <HAL_FLASH_Unlock+0x40>)
 8001430:	691b      	ldr	r3, [r3, #16]
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800143e:	79fb      	ldrb	r3, [r7, #7]
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40022000 	.word	0x40022000
 8001450:	45670123 	.word	0x45670123
 8001454:	cdef89ab 	.word	0xcdef89ab

08001458 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800145c:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_FLASH_Lock+0x1c>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_FLASH_Lock+0x1c>)
 8001462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001466:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40022000 	.word	0x40022000

08001478 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <FLASH_Program_HalfWord+0x30>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <FLASH_Program_HalfWord+0x34>)
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	4a07      	ldr	r2, [pc, #28]	; (80014ac <FLASH_Program_HalfWord+0x34>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	887a      	ldrh	r2, [r7, #2]
 800149a:	801a      	strh	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000128 	.word	0x20000128
 80014ac:	40022000 	.word	0x40022000

080014b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80014b8:	f7ff fd06 	bl	8000ec8 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80014be:	e010      	b.n	80014e2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c6:	d00c      	beq.n	80014e2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d007      	beq.n	80014de <FLASH_WaitForLastOperation+0x2e>
 80014ce:	f7ff fcfb 	bl	8000ec8 <HAL_GetTick>
 80014d2:	4602      	mov	r2, r0
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d201      	bcs.n	80014e2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e025      	b.n	800152e <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <FLASH_WaitForLastOperation+0x88>)
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1e8      	bne.n	80014c0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80014ee:	4b12      	ldr	r3, [pc, #72]	; (8001538 <FLASH_WaitForLastOperation+0x88>)
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f003 0320 	and.w	r3, r3, #32
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <FLASH_WaitForLastOperation+0x88>)
 80014fc:	2220      	movs	r2, #32
 80014fe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001500:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <FLASH_WaitForLastOperation+0x88>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10b      	bne.n	8001524 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <FLASH_WaitForLastOperation+0x88>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001514:	2b00      	cmp	r3, #0
 8001516:	d105      	bne.n	8001524 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <FLASH_WaitForLastOperation+0x88>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001524:	f000 f80a 	bl	800153c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3710      	adds	r7, #16
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40022000 	.word	0x40022000

0800153c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <FLASH_SetErrorCode+0x98>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	2b00      	cmp	r3, #0
 8001550:	d009      	beq.n	8001566 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <FLASH_SetErrorCode+0x9c>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f043 0302 	orr.w	r3, r3, #2
 800155a:	4a1f      	ldr	r2, [pc, #124]	; (80015d8 <FLASH_SetErrorCode+0x9c>)
 800155c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f043 0310 	orr.w	r3, r3, #16
 8001564:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <FLASH_SetErrorCode+0x98>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <FLASH_SetErrorCode+0x9c>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <FLASH_SetErrorCode+0x9c>)
 800157c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <FLASH_SetErrorCode+0x98>)
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <FLASH_SetErrorCode+0x9c>)
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <FLASH_SetErrorCode+0x9c>)
 800159c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <FLASH_SetErrorCode+0x98>)
 80015a0:	69db      	ldr	r3, [r3, #28]
 80015a2:	4a0c      	ldr	r2, [pc, #48]	; (80015d4 <FLASH_SetErrorCode+0x98>)
 80015a4:	f023 0301 	bic.w	r3, r3, #1
 80015a8:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f240 1201 	movw	r2, #257	; 0x101
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d106      	bne.n	80015c2 <FLASH_SetErrorCode+0x86>
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <FLASH_SetErrorCode+0x98>)
 80015b6:	69db      	ldr	r3, [r3, #28]
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <FLASH_SetErrorCode+0x98>)
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	61d3      	str	r3, [r2, #28]
}  
 80015c0:	e002      	b.n	80015c8 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <FLASH_SetErrorCode+0x98>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	60d3      	str	r3, [r2, #12]
}  
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40022000 	.word	0x40022000
 80015d8:	20000128 	.word	0x20000128

080015dc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015ee:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_FLASHEx_Erase+0xd0>)
 80015f0:	7e1b      	ldrb	r3, [r3, #24]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_FLASHEx_Erase+0x1e>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e053      	b.n	80016a2 <HAL_FLASHEx_Erase+0xc6>
 80015fa:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <HAL_FLASHEx_Erase+0xd0>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d116      	bne.n	8001636 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001608:	f24c 3050 	movw	r0, #50000	; 0xc350
 800160c:	f7ff ff50 	bl	80014b0 <FLASH_WaitForLastOperation>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d141      	bne.n	800169a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001616:	2001      	movs	r0, #1
 8001618:	f000 f84c 	bl	80016b4 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800161c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001620:	f7ff ff46 	bl	80014b0 <FLASH_WaitForLastOperation>
 8001624:	4603      	mov	r3, r0
 8001626:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_FLASHEx_Erase+0xd4>)
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	4a20      	ldr	r2, [pc, #128]	; (80016b0 <HAL_FLASHEx_Erase+0xd4>)
 800162e:	f023 0304 	bic.w	r3, r3, #4
 8001632:	6113      	str	r3, [r2, #16]
 8001634:	e031      	b.n	800169a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001636:	f24c 3050 	movw	r0, #50000	; 0xc350
 800163a:	f7ff ff39 	bl	80014b0 <FLASH_WaitForLastOperation>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d12a      	bne.n	800169a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f04f 32ff 	mov.w	r2, #4294967295
 800164a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	e019      	b.n	8001688 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001654:	68b8      	ldr	r0, [r7, #8]
 8001656:	f000 f849 	bl	80016ec <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800165a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800165e:	f7ff ff27 	bl	80014b0 <FLASH_WaitForLastOperation>
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_FLASHEx_Erase+0xd4>)
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <HAL_FLASHEx_Erase+0xd4>)
 800166c:	f023 0302 	bic.w	r3, r3, #2
 8001670:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	68ba      	ldr	r2, [r7, #8]
 800167c:	601a      	str	r2, [r3, #0]
            break;
 800167e:	e00c      	b.n	800169a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001686:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	029a      	lsls	r2, r3, #10
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001694:	68ba      	ldr	r2, [r7, #8]
 8001696:	429a      	cmp	r2, r3
 8001698:	d3dc      	bcc.n	8001654 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800169a:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_FLASHEx_Erase+0xd0>)
 800169c:	2200      	movs	r2, #0
 800169e:	761a      	strb	r2, [r3, #24]

  return status;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000128 	.word	0x20000128
 80016b0:	40022000 	.word	0x40022000

080016b4 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <FLASH_MassErase+0x30>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <FLASH_MassErase+0x34>)
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <FLASH_MassErase+0x34>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <FLASH_MassErase+0x34>)
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	4a05      	ldr	r2, [pc, #20]	; (80016e8 <FLASH_MassErase+0x34>)
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000128 	.word	0x20000128
 80016e8:	40022000 	.word	0x40022000

080016ec <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <FLASH_PageErase+0x38>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <FLASH_PageErase+0x3c>)
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <FLASH_PageErase+0x3c>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001706:	4a08      	ldr	r2, [pc, #32]	; (8001728 <FLASH_PageErase+0x3c>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <FLASH_PageErase+0x3c>)
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	4a05      	ldr	r2, [pc, #20]	; (8001728 <FLASH_PageErase+0x3c>)
 8001712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001716:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000128 	.word	0x20000128
 8001728:	40022000 	.word	0x40022000

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b08b      	sub	sp, #44	; 0x2c
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173e:	e127      	b.n	8001990 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001740:	2201      	movs	r2, #1
 8001742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8116 	bne.w	800198a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b12      	cmp	r3, #18
 8001764:	d034      	beq.n	80017d0 <HAL_GPIO_Init+0xa4>
 8001766:	2b12      	cmp	r3, #18
 8001768:	d80d      	bhi.n	8001786 <HAL_GPIO_Init+0x5a>
 800176a:	2b02      	cmp	r3, #2
 800176c:	d02b      	beq.n	80017c6 <HAL_GPIO_Init+0x9a>
 800176e:	2b02      	cmp	r3, #2
 8001770:	d804      	bhi.n	800177c <HAL_GPIO_Init+0x50>
 8001772:	2b00      	cmp	r3, #0
 8001774:	d031      	beq.n	80017da <HAL_GPIO_Init+0xae>
 8001776:	2b01      	cmp	r3, #1
 8001778:	d01c      	beq.n	80017b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800177a:	e048      	b.n	800180e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800177c:	2b03      	cmp	r3, #3
 800177e:	d043      	beq.n	8001808 <HAL_GPIO_Init+0xdc>
 8001780:	2b11      	cmp	r3, #17
 8001782:	d01b      	beq.n	80017bc <HAL_GPIO_Init+0x90>
          break;
 8001784:	e043      	b.n	800180e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001786:	4a89      	ldr	r2, [pc, #548]	; (80019ac <HAL_GPIO_Init+0x280>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d026      	beq.n	80017da <HAL_GPIO_Init+0xae>
 800178c:	4a87      	ldr	r2, [pc, #540]	; (80019ac <HAL_GPIO_Init+0x280>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d806      	bhi.n	80017a0 <HAL_GPIO_Init+0x74>
 8001792:	4a87      	ldr	r2, [pc, #540]	; (80019b0 <HAL_GPIO_Init+0x284>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d020      	beq.n	80017da <HAL_GPIO_Init+0xae>
 8001798:	4a86      	ldr	r2, [pc, #536]	; (80019b4 <HAL_GPIO_Init+0x288>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01d      	beq.n	80017da <HAL_GPIO_Init+0xae>
          break;
 800179e:	e036      	b.n	800180e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80017a0:	4a85      	ldr	r2, [pc, #532]	; (80019b8 <HAL_GPIO_Init+0x28c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d019      	beq.n	80017da <HAL_GPIO_Init+0xae>
 80017a6:	4a85      	ldr	r2, [pc, #532]	; (80019bc <HAL_GPIO_Init+0x290>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d016      	beq.n	80017da <HAL_GPIO_Init+0xae>
 80017ac:	4a84      	ldr	r2, [pc, #528]	; (80019c0 <HAL_GPIO_Init+0x294>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0xae>
          break;
 80017b2:	e02c      	b.n	800180e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e028      	b.n	800180e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	3304      	adds	r3, #4
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e023      	b.n	800180e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	3308      	adds	r3, #8
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e01e      	b.n	800180e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	330c      	adds	r3, #12
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e019      	b.n	800180e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017e2:	2304      	movs	r3, #4
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e012      	b.n	800180e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	611a      	str	r2, [r3, #16]
          break;
 80017fa:	e008      	b.n	800180e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	615a      	str	r2, [r3, #20]
          break;
 8001806:	e002      	b.n	800180e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	2bff      	cmp	r3, #255	; 0xff
 8001812:	d801      	bhi.n	8001818 <HAL_GPIO_Init+0xec>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	e001      	b.n	800181c <HAL_GPIO_Init+0xf0>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3304      	adds	r3, #4
 800181c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2bff      	cmp	r3, #255	; 0xff
 8001822:	d802      	bhi.n	800182a <HAL_GPIO_Init+0xfe>
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x104>
 800182a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182c:	3b08      	subs	r3, #8
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	210f      	movs	r1, #15
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	fa01 f303 	lsl.w	r3, r1, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	401a      	ands	r2, r3
 8001842:	6a39      	ldr	r1, [r7, #32]
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	431a      	orrs	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	f000 8096 	beq.w	800198a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800185e:	4b59      	ldr	r3, [pc, #356]	; (80019c4 <HAL_GPIO_Init+0x298>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	4a58      	ldr	r2, [pc, #352]	; (80019c4 <HAL_GPIO_Init+0x298>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6193      	str	r3, [r2, #24]
 800186a:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_GPIO_Init+0x298>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001876:	4a54      	ldr	r2, [pc, #336]	; (80019c8 <HAL_GPIO_Init+0x29c>)
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	220f      	movs	r2, #15
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4013      	ands	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a4b      	ldr	r2, [pc, #300]	; (80019cc <HAL_GPIO_Init+0x2a0>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d013      	beq.n	80018ca <HAL_GPIO_Init+0x19e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a4a      	ldr	r2, [pc, #296]	; (80019d0 <HAL_GPIO_Init+0x2a4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d00d      	beq.n	80018c6 <HAL_GPIO_Init+0x19a>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a49      	ldr	r2, [pc, #292]	; (80019d4 <HAL_GPIO_Init+0x2a8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d007      	beq.n	80018c2 <HAL_GPIO_Init+0x196>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a48      	ldr	r2, [pc, #288]	; (80019d8 <HAL_GPIO_Init+0x2ac>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <HAL_GPIO_Init+0x192>
 80018ba:	2303      	movs	r3, #3
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x1a0>
 80018be:	2304      	movs	r3, #4
 80018c0:	e004      	b.n	80018cc <HAL_GPIO_Init+0x1a0>
 80018c2:	2302      	movs	r3, #2
 80018c4:	e002      	b.n	80018cc <HAL_GPIO_Init+0x1a0>
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_GPIO_Init+0x1a0>
 80018ca:	2300      	movs	r3, #0
 80018cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ce:	f002 0203 	and.w	r2, r2, #3
 80018d2:	0092      	lsls	r2, r2, #2
 80018d4:	4093      	lsls	r3, r2
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018dc:	493a      	ldr	r1, [pc, #232]	; (80019c8 <HAL_GPIO_Init+0x29c>)
 80018de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e0:	089b      	lsrs	r3, r3, #2
 80018e2:	3302      	adds	r3, #2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018f6:	4b39      	ldr	r3, [pc, #228]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	4938      	ldr	r1, [pc, #224]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
 8001902:	e006      	b.n	8001912 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	43db      	mvns	r3, r3
 800190c:	4933      	ldr	r1, [pc, #204]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 800190e:	4013      	ands	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d006      	beq.n	800192c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800191e:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	492e      	ldr	r1, [pc, #184]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	604b      	str	r3, [r1, #4]
 800192a:	e006      	b.n	800193a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	43db      	mvns	r3, r3
 8001934:	4929      	ldr	r1, [pc, #164]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001936:	4013      	ands	r3, r2
 8001938:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001946:	4b25      	ldr	r3, [pc, #148]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	4924      	ldr	r1, [pc, #144]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	608b      	str	r3, [r1, #8]
 8001952:	e006      	b.n	8001962 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001954:	4b21      	ldr	r3, [pc, #132]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	43db      	mvns	r3, r3
 800195c:	491f      	ldr	r1, [pc, #124]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 800195e:	4013      	ands	r3, r2
 8001960:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d006      	beq.n	800197c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800196e:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	491a      	ldr	r1, [pc, #104]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	60cb      	str	r3, [r1, #12]
 800197a:	e006      	b.n	800198a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800197c:	4b17      	ldr	r3, [pc, #92]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	43db      	mvns	r3, r3
 8001984:	4915      	ldr	r1, [pc, #84]	; (80019dc <HAL_GPIO_Init+0x2b0>)
 8001986:	4013      	ands	r3, r2
 8001988:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	3301      	adds	r3, #1
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001996:	fa22 f303 	lsr.w	r3, r2, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	f47f aed0 	bne.w	8001740 <HAL_GPIO_Init+0x14>
  }
}
 80019a0:	bf00      	nop
 80019a2:	372c      	adds	r7, #44	; 0x2c
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bc80      	pop	{r7}
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	10210000 	.word	0x10210000
 80019b0:	10110000 	.word	0x10110000
 80019b4:	10120000 	.word	0x10120000
 80019b8:	10310000 	.word	0x10310000
 80019bc:	10320000 	.word	0x10320000
 80019c0:	10220000 	.word	0x10220000
 80019c4:	40021000 	.word	0x40021000
 80019c8:	40010000 	.word	0x40010000
 80019cc:	40010800 	.word	0x40010800
 80019d0:	40010c00 	.word	0x40010c00
 80019d4:	40011000 	.word	0x40011000
 80019d8:	40011400 	.word	0x40011400
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	807b      	strh	r3, [r7, #2]
 80019ec:	4613      	mov	r3, r2
 80019ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019f0:	787b      	ldrb	r3, [r7, #1]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80019fc:	e003      	b.n	8001a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80019fe:	887b      	ldrh	r3, [r7, #2]
 8001a00:	041a      	lsls	r2, r3, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	611a      	str	r2, [r3, #16]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4013      	ands	r3, r2
 8001a28:	041a      	lsls	r2, r3, #16
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43d9      	mvns	r1, r3
 8001a2e:	887b      	ldrh	r3, [r7, #2]
 8001a30:	400b      	ands	r3, r1
 8001a32:	431a      	orrs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	611a      	str	r2, [r3, #16]
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
	...

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e26c      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 8087 	beq.w	8001b72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a64:	4b92      	ldr	r3, [pc, #584]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 030c 	and.w	r3, r3, #12
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d00c      	beq.n	8001a8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a70:	4b8f      	ldr	r3, [pc, #572]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 030c 	and.w	r3, r3, #12
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d112      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
 8001a7c:	4b8c      	ldr	r3, [pc, #560]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a88:	d10b      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d06c      	beq.n	8001b70 <HAL_RCC_OscConfig+0x12c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d168      	bne.n	8001b70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e246      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aaa:	d106      	bne.n	8001aba <HAL_RCC_OscConfig+0x76>
 8001aac:	4b80      	ldr	r3, [pc, #512]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a7f      	ldr	r2, [pc, #508]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	e02e      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10c      	bne.n	8001adc <HAL_RCC_OscConfig+0x98>
 8001ac2:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a7a      	ldr	r2, [pc, #488]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	4b78      	ldr	r3, [pc, #480]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a77      	ldr	r2, [pc, #476]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	e01d      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0xbc>
 8001ae6:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a71      	ldr	r2, [pc, #452]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a6e      	ldr	r2, [pc, #440]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0xd4>
 8001b00:	4b6b      	ldr	r3, [pc, #428]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6a      	ldr	r2, [pc, #424]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b68      	ldr	r3, [pc, #416]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a67      	ldr	r2, [pc, #412]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d013      	beq.n	8001b48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b20:	f7ff f9d2 	bl	8000ec8 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b28:	f7ff f9ce 	bl	8000ec8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b64      	cmp	r3, #100	; 0x64
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1fa      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	4b5d      	ldr	r3, [pc, #372]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0xe4>
 8001b46:	e014      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff f9be 	bl	8000ec8 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b50:	f7ff f9ba 	bl	8000ec8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b64      	cmp	r3, #100	; 0x64
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e1e6      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x10c>
 8001b6e:	e000      	b.n	8001b72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d063      	beq.n	8001c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 030c 	and.w	r3, r3, #12
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b8a:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	2b08      	cmp	r3, #8
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
 8001b96:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1ba      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4939      	ldr	r1, [pc, #228]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b36      	ldr	r3, [pc, #216]	; (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bde:	f7ff f973 	bl	8000ec8 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff f96f 	bl	8000ec8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e19b      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4927      	ldr	r1, [pc, #156]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c20:	f7ff f952 	bl	8000ec8 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff f94e 	bl	8000ec8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e17a      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d03a      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d019      	beq.n	8001c8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c60:	f7ff f932 	bl	8000ec8 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff f92e 	bl	8000ec8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e15a      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0d      	ldr	r3, [pc, #52]	; (8001cb0 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f000 faa8 	bl	80021dc <RCC_Delay>
 8001c8c:	e01c      	b.n	8001cc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_RCC_OscConfig+0x274>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7ff f918 	bl	8000ec8 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9a:	e00f      	b.n	8001cbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f914 	bl	8000ec8 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d908      	bls.n	8001cbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e140      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	42420000 	.word	0x42420000
 8001cb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbc:	4b9e      	ldr	r3, [pc, #632]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e9      	bne.n	8001c9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 80a6 	beq.w	8001e22 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b97      	ldr	r3, [pc, #604]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10d      	bne.n	8001d02 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b94      	ldr	r3, [pc, #592]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	4a93      	ldr	r2, [pc, #588]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	4b91      	ldr	r3, [pc, #580]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d02:	4b8e      	ldr	r3, [pc, #568]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d118      	bne.n	8001d40 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0e:	4b8b      	ldr	r3, [pc, #556]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a8a      	ldr	r2, [pc, #552]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d1a:	f7ff f8d5 	bl	8000ec8 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d22:	f7ff f8d1 	bl	8000ec8 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b64      	cmp	r3, #100	; 0x64
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0fd      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d34:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x4f8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x312>
 8001d48:	4b7b      	ldr	r3, [pc, #492]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	4a7a      	ldr	r2, [pc, #488]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6213      	str	r3, [r2, #32]
 8001d54:	e02d      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10c      	bne.n	8001d78 <HAL_RCC_OscConfig+0x334>
 8001d5e:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	4a75      	ldr	r2, [pc, #468]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6213      	str	r3, [r2, #32]
 8001d6a:	4b73      	ldr	r3, [pc, #460]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a72      	ldr	r2, [pc, #456]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	f023 0304 	bic.w	r3, r3, #4
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	e01c      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x356>
 8001d80:	4b6d      	ldr	r3, [pc, #436]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	4a6c      	ldr	r2, [pc, #432]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6213      	str	r3, [r2, #32]
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a69      	ldr	r2, [pc, #420]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	6213      	str	r3, [r2, #32]
 8001d98:	e00b      	b.n	8001db2 <HAL_RCC_OscConfig+0x36e>
 8001d9a:	4b67      	ldr	r3, [pc, #412]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4a66      	ldr	r2, [pc, #408]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	f023 0301 	bic.w	r3, r3, #1
 8001da4:	6213      	str	r3, [r2, #32]
 8001da6:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4a63      	ldr	r2, [pc, #396]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	f023 0304 	bic.w	r3, r3, #4
 8001db0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d015      	beq.n	8001de6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dba:	f7ff f885 	bl	8000ec8 <HAL_GetTick>
 8001dbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc0:	e00a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc2:	f7ff f881 	bl	8000ec8 <HAL_GetTick>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e0ab      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd8:	4b57      	ldr	r3, [pc, #348]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ee      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x37e>
 8001de4:	e014      	b.n	8001e10 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001de6:	f7ff f86f 	bl	8000ec8 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dec:	e00a      	b.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff f86b 	bl	8000ec8 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e095      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ee      	bne.n	8001dee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e10:	7dfb      	ldrb	r3, [r7, #23]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4b48      	ldr	r3, [pc, #288]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 8081 	beq.w	8001f2e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e2c:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d061      	beq.n	8001efc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d146      	bne.n	8001ece <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e40:	4b3f      	ldr	r3, [pc, #252]	; (8001f40 <HAL_RCC_OscConfig+0x4fc>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e46:	f7ff f83f 	bl	8000ec8 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7ff f83b 	bl	8000ec8 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e067      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e74:	d108      	bne.n	8001e88 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e76:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	492d      	ldr	r1, [pc, #180]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a19      	ldr	r1, [r3, #32]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	430b      	orrs	r3, r1
 8001e9a:	4927      	ldr	r1, [pc, #156]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea0:	4b27      	ldr	r3, [pc, #156]	; (8001f40 <HAL_RCC_OscConfig+0x4fc>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7ff f80f 	bl	8000ec8 <HAL_GetTick>
 8001eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eae:	f7ff f80b 	bl	8000ec8 <HAL_GetTick>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e037      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0f0      	beq.n	8001eae <HAL_RCC_OscConfig+0x46a>
 8001ecc:	e02f      	b.n	8001f2e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ece:	4b1c      	ldr	r3, [pc, #112]	; (8001f40 <HAL_RCC_OscConfig+0x4fc>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fff8 	bl	8000ec8 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe fff4 	bl	8000ec8 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e020      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x498>
 8001efa:	e018      	b.n	8001f2e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e013      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d001      	beq.n	8001f2e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	42420060 	.word	0x42420060

08001f44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e0d0      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f58:	4b6a      	ldr	r3, [pc, #424]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d910      	bls.n	8001f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f66:	4b67      	ldr	r3, [pc, #412]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f023 0207 	bic.w	r2, r3, #7
 8001f6e:	4965      	ldr	r1, [pc, #404]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f76:	4b63      	ldr	r3, [pc, #396]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d001      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e0b8      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fa0:	4b59      	ldr	r3, [pc, #356]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a58      	ldr	r2, [pc, #352]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001faa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fb8:	4b53      	ldr	r3, [pc, #332]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fc2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc4:	4b50      	ldr	r3, [pc, #320]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	494d      	ldr	r1, [pc, #308]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d040      	beq.n	8002064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d115      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e07f      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002002:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e073      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	4b3d      	ldr	r3, [pc, #244]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e06b      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002022:	4b39      	ldr	r3, [pc, #228]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f023 0203 	bic.w	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4936      	ldr	r1, [pc, #216]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002034:	f7fe ff48 	bl	8000ec8 <HAL_GetTick>
 8002038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7fe ff44 	bl	8000ec8 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e053      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 020c 	and.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1eb      	bne.n	800203c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d210      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4922      	ldr	r1, [pc, #136]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e032      	b.n	80020fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b19      	ldr	r3, [pc, #100]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4916      	ldr	r1, [pc, #88]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	490e      	ldr	r1, [pc, #56]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020d2:	f000 f821 	bl	8002118 <HAL_RCC_GetSysClockFreq>
 80020d6:	4601      	mov	r1, r0
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <HAL_RCC_ClockConfig+0x1c8>)
 80020e4:	5cd3      	ldrb	r3, [r2, r3]
 80020e6:	fa21 f303 	lsr.w	r3, r1, r3
 80020ea:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_RCC_ClockConfig+0x1cc>)
 80020ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_ClockConfig+0x1d0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fea6 	bl	8000e44 <HAL_InitTick>

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40022000 	.word	0x40022000
 8002108:	40021000 	.word	0x40021000
 800210c:	080033c8 	.word	0x080033c8
 8002110:	20000024 	.word	0x20000024
 8002114:	20000028 	.word	0x20000028

08002118 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002118:	b490      	push	{r4, r7}
 800211a:	b08a      	sub	sp, #40	; 0x28
 800211c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800211e:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002120:	1d3c      	adds	r4, r7, #4
 8002122:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002128:	4b28      	ldr	r3, [pc, #160]	; (80021cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002142:	4b23      	ldr	r3, [pc, #140]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b04      	cmp	r3, #4
 8002150:	d002      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x40>
 8002152:	2b08      	cmp	r3, #8
 8002154:	d003      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x46>
 8002156:	e02d      	b.n	80021b4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800215a:	623b      	str	r3, [r7, #32]
      break;
 800215c:	e02d      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	0c9b      	lsrs	r3, r3, #18
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800216a:	4413      	add	r3, r2
 800216c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002170:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800217c:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	0c5b      	lsrs	r3, r3, #17
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800218a:	4413      	add	r3, r2
 800218c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002190:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	4a0f      	ldr	r2, [pc, #60]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002196:	fb02 f203 	mul.w	r2, r2, r3
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
 80021a2:	e004      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021a8:	fb02 f303 	mul.w	r3, r2, r3
 80021ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b0:	623b      	str	r3, [r7, #32]
      break;
 80021b2:	e002      	b.n	80021ba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021b6:	623b      	str	r3, [r7, #32]
      break;
 80021b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ba:	6a3b      	ldr	r3, [r7, #32]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3728      	adds	r7, #40	; 0x28
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc90      	pop	{r4, r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	080033b4 	.word	0x080033b4
 80021cc:	080033c4 	.word	0x080033c4
 80021d0:	40021000 	.word	0x40021000
 80021d4:	007a1200 	.word	0x007a1200
 80021d8:	003d0900 	.word	0x003d0900

080021dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <RCC_Delay+0x34>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <RCC_Delay+0x38>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	0a5b      	lsrs	r3, r3, #9
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	fb02 f303 	mul.w	r3, r2, r3
 80021f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021f8:	bf00      	nop
  }
  while (Delay --);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1e5a      	subs	r2, r3, #1
 80021fe:	60fa      	str	r2, [r7, #12]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f9      	bne.n	80021f8 <RCC_Delay+0x1c>
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000024 	.word	0x20000024
 8002214:	10624dd3 	.word	0x10624dd3

08002218 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002218:	b490      	push	{r4, r7}
 800221a:	b088      	sub	sp, #32
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	461a      	mov	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	0e1b      	lsrs	r3, r3, #24
 800222c:	4413      	add	r3, r2
 800222e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002230:	6822      	ldr	r2, [r4, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	210f      	movs	r1, #15
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	401a      	ands	r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	61bb      	str	r3, [r7, #24]
  return result;
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	fab3 f383 	clz	r3, r3
 8002264:	b2db      	uxtb	r3, r3
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	fa01 f303 	lsl.w	r3, r1, r3
 800226e:	4313      	orrs	r3, r2
 8002270:	6023      	str	r3, [r4, #0]
}
 8002272:	bf00      	nop
 8002274:	3720      	adds	r7, #32
 8002276:	46bd      	mov	sp, r7
 8002278:	bc90      	pop	{r4, r7}
 800227a:	4770      	bx	lr

0800227c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800227c:	b490      	push	{r4, r7}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	461a      	mov	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	0e1b      	lsrs	r3, r3, #24
 8002290:	4413      	add	r3, r2
 8002292:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 8002294:	6822      	ldr	r2, [r4, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	613b      	str	r3, [r7, #16]
  return result;
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	2103      	movs	r1, #3
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	401a      	ands	r2, r3
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa93 f3a3 	rbit	r3, r3
 80022c0:	61bb      	str	r3, [r7, #24]
  return result;
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	4313      	orrs	r3, r2
 80022d4:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 80022d6:	bf00      	nop
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc90      	pop	{r4, r7}
 80022de:	4770      	bx	lr

080022e0 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 80022e0:	b490      	push	{r4, r7}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	461a      	mov	r2, r3
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	0e1b      	lsrs	r3, r3, #24
 80022f4:	4413      	add	r3, r2
 80022f6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 80022f8:	6822      	ldr	r2, [r4, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	613b      	str	r3, [r7, #16]
  return result;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	2104      	movs	r1, #4
 8002312:	fa01 f303 	lsl.w	r3, r1, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	401a      	ands	r2, r3
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa93 f3a3 	rbit	r3, r3
 8002324:	61bb      	str	r3, [r7, #24]
  return result;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	4313      	orrs	r3, r2
 8002338:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 800233a:	bf00      	nop
 800233c:	3720      	adds	r7, #32
 800233e:	46bd      	mov	sp, r7
 8002340:	bc90      	pop	{r4, r7}
 8002342:	4770      	bx	lr

08002344 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002344:	b480      	push	{r7}
 8002346:	b087      	sub	sp, #28
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	43db      	mvns	r3, r3
 800235a:	401a      	ands	r2, r3
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	613b      	str	r3, [r7, #16]
  return result;
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	fab3 f383 	clz	r3, r3
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	408b      	lsls	r3, r1
 8002378:	431a      	orrs	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	60da      	str	r2, [r3, #12]
}
 800237e:	bf00      	nop
 8002380:	371c      	adds	r7, #28
 8002382:	46bd      	mov	sp, r7
 8002384:	bc80      	pop	{r7}
 8002386:	4770      	bx	lr

08002388 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	60fb      	str	r3, [r7, #12]
  return result;
 80023a8:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80023b2:	e040      	b.n	8002436 <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80023b4:	2201      	movs	r2, #1
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	409a      	lsls	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d036      	beq.n	8002430 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	2b07      	cmp	r3, #7
 80023c6:	d806      	bhi.n	80023d6 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80023c8:	f240 1201 	movw	r2, #257	; 0x101
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	61bb      	str	r3, [r7, #24]
 80023d4:	e008      	b.n	80023e8 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b08      	subs	r3, #8
 80023da:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023e6:	61bb      	str	r3, [r7, #24]

      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d003      	beq.n	80023f8 <LL_GPIO_Init+0x70>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	d10d      	bne.n	8002414 <LL_GPIO_Init+0x8c>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	461a      	mov	r2, r3
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f7ff ff3b 	bl	800227c <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	461a      	mov	r2, r3
 800240c:	69b9      	ldr	r1, [r7, #24]
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff ff66 	bl	80022e0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	461a      	mov	r2, r3
 800241a:	69b9      	ldr	r1, [r7, #24]
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff91 	bl	8002344 <LL_GPIO_SetPinPull>

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	461a      	mov	r2, r3
 8002428:	69b9      	ldr	r1, [r7, #24]
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fef4 	bl	8002218 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	3301      	adds	r3, #1
 8002434:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	fa22 f303 	lsr.w	r3, r2, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1b8      	bne.n	80023b4 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <LL_RCC_GetSysClkSource+0x14>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 030c 	and.w	r3, r3, #12
}
 8002458:	4618      	mov	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr
 8002460:	40021000 	.word	0x40021000

08002464 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002468:	4b03      	ldr	r3, [pc, #12]	; (8002478 <LL_RCC_GetAHBPrescaler+0x14>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000

0800247c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr
 8002490:	40021000 	.word	0x40021000

08002494 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002498:	4b03      	ldr	r3, [pc, #12]	; (80024a8 <LL_RCC_GetAPB2Prescaler+0x14>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr
 80024a8:	40021000 	.word	0x40021000

080024ac <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <LL_RCC_PLL_GetMainSource+0x14>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr
 80024c0:	40021000 	.word	0x40021000

080024c4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr
 80024d8:	40021000 	.word	0x40021000

080024dc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <LL_RCC_PLL_GetPrediv+0x18>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	0c5b      	lsrs	r3, r3, #17
 80024e6:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002500:	f000 f820 	bl	8002544 <RCC_GetSystemClockFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f83a 	bl	8002588 <RCC_GetHCLKClockFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f000 f848 	bl	80025b4 <RCC_GetPCLK1ClockFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f854 	bl	80025dc <RCC_GetPCLK2ClockFreq>
 8002534:	4602      	mov	r2, r0
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60da      	str	r2, [r3, #12]
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800254e:	f7ff ff7d 	bl	800244c <LL_RCC_GetSysClkSource>
 8002552:	4603      	mov	r3, r0
 8002554:	2b04      	cmp	r3, #4
 8002556:	d006      	beq.n	8002566 <RCC_GetSystemClockFreq+0x22>
 8002558:	2b08      	cmp	r3, #8
 800255a:	d007      	beq.n	800256c <RCC_GetSystemClockFreq+0x28>
 800255c:	2b00      	cmp	r3, #0
 800255e:	d109      	bne.n	8002574 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <RCC_GetSystemClockFreq+0x40>)
 8002562:	607b      	str	r3, [r7, #4]
      break;
 8002564:	e009      	b.n	800257a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002566:	4b07      	ldr	r3, [pc, #28]	; (8002584 <RCC_GetSystemClockFreq+0x40>)
 8002568:	607b      	str	r3, [r7, #4]
      break;
 800256a:	e006      	b.n	800257a <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800256c:	f000 f84a 	bl	8002604 <RCC_PLL_GetFreqDomain_SYS>
 8002570:	6078      	str	r0, [r7, #4]
      break;
 8002572:	e002      	b.n	800257a <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <RCC_GetSystemClockFreq+0x40>)
 8002576:	607b      	str	r3, [r7, #4]
      break;
 8002578:	bf00      	nop
  }

  return frequency;
 800257a:	687b      	ldr	r3, [r7, #4]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	007a1200 	.word	0x007a1200

08002588 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002590:	f7ff ff68 	bl	8002464 <LL_RCC_GetAHBPrescaler>
 8002594:	4603      	mov	r3, r0
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 030f 	and.w	r3, r3, #15
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <RCC_GetHCLKClockFreq+0x28>)
 800259e:	5cd3      	ldrb	r3, [r2, r3]
 80025a0:	461a      	mov	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	40d3      	lsrs	r3, r2
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	080033c8 	.word	0x080033c8

080025b4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80025bc:	f7ff ff5e 	bl	800247c <LL_RCC_GetAPB1Prescaler>
 80025c0:	4603      	mov	r3, r0
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <RCC_GetPCLK1ClockFreq+0x24>)
 80025c6:	5cd3      	ldrb	r3, [r2, r3]
 80025c8:	461a      	mov	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	40d3      	lsrs	r3, r2
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	080033d8 	.word	0x080033d8

080025dc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80025e4:	f7ff ff56 	bl	8002494 <LL_RCC_GetAPB2Prescaler>
 80025e8:	4603      	mov	r3, r0
 80025ea:	0adb      	lsrs	r3, r3, #11
 80025ec:	4a04      	ldr	r2, [pc, #16]	; (8002600 <RCC_GetPCLK2ClockFreq+0x24>)
 80025ee:	5cd3      	ldrb	r3, [r2, r3]
 80025f0:	461a      	mov	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	40d3      	lsrs	r3, r2
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	080033d8 	.word	0x080033d8

08002604 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002612:	f7ff ff4b 	bl	80024ac <LL_RCC_PLL_GetMainSource>
 8002616:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800261e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002622:	d003      	beq.n	800262c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8002624:	e00b      	b.n	800263e <RCC_PLL_GetFreqDomain_SYS+0x3a>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8002628:	607b      	str	r3, [r7, #4]
      break;
 800262a:	e00b      	b.n	8002644 <RCC_PLL_GetFreqDomain_SYS+0x40>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 800262c:	f7ff ff56 	bl	80024dc <LL_RCC_PLL_GetPrediv>
 8002630:	4603      	mov	r3, r0
 8002632:	3301      	adds	r3, #1
 8002634:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 8002636:	fbb2 f3f3 	udiv	r3, r2, r3
 800263a:	607b      	str	r3, [r7, #4]
      break;
 800263c:	e002      	b.n	8002644 <RCC_PLL_GetFreqDomain_SYS+0x40>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 800263e:	4b07      	ldr	r3, [pc, #28]	; (800265c <RCC_PLL_GetFreqDomain_SYS+0x58>)
 8002640:	607b      	str	r3, [r7, #4]
      break;
 8002642:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 8002644:	f7ff ff3e 	bl	80024c4 <LL_RCC_PLL_GetMultiplicator>
 8002648:	4603      	mov	r3, r0
 800264a:	0c9b      	lsrs	r3, r3, #18
 800264c:	3302      	adds	r3, #2
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	fb02 f303 	mul.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	003d0900 	.word	0x003d0900
 8002660:	007a1200 	.word	0x007a1200

08002664 <LL_USART_IsEnabled>:
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002678:	bf0c      	ite	eq
 800267a:	2301      	moveq	r3, #1
 800267c:	2300      	movne	r3, #0
 800267e:	b2db      	uxtb	r3, r3
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <LL_USART_SetStopBitsLength>:
{
 800268a:	b480      	push	{r7}
 800268c:	b083      	sub	sp, #12
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	611a      	str	r2, [r3, #16]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <LL_USART_SetHWFlowCtrl>:
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
 80026b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	615a      	str	r2, [r3, #20]
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
	...

080026d4 <LL_USART_SetBaudRate>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	009a      	lsls	r2, r3, #2
 80026ea:	441a      	add	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	4a25      	ldr	r2, [pc, #148]	; (800278c <LL_USART_SetBaudRate+0xb8>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	b299      	uxth	r1, r3
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	009a      	lsls	r2, r3, #2
 800270c:	441a      	add	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	fbb2 f2f3 	udiv	r2, r2, r3
 8002716:	4b1d      	ldr	r3, [pc, #116]	; (800278c <LL_USART_SetBaudRate+0xb8>)
 8002718:	fba3 0302 	umull	r0, r3, r3, r2
 800271c:	095b      	lsrs	r3, r3, #5
 800271e:	2064      	movs	r0, #100	; 0x64
 8002720:	fb00 f303 	mul.w	r3, r0, r3
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	3332      	adds	r3, #50	; 0x32
 800272a:	4a18      	ldr	r2, [pc, #96]	; (800278c <LL_USART_SetBaudRate+0xb8>)
 800272c:	fba2 2303 	umull	r2, r3, r2, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	b29b      	uxth	r3, r3
 8002734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002738:	b29b      	uxth	r3, r3
 800273a:	440b      	add	r3, r1
 800273c:	b299      	uxth	r1, r3
 800273e:	68ba      	ldr	r2, [r7, #8]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	009a      	lsls	r2, r3, #2
 8002748:	441a      	add	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <LL_USART_SetBaudRate+0xb8>)
 8002754:	fba3 0302 	umull	r0, r3, r3, r2
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	2064      	movs	r0, #100	; 0x64
 800275c:	fb00 f303 	mul.w	r3, r0, r3
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	3332      	adds	r3, #50	; 0x32
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <LL_USART_SetBaudRate+0xb8>)
 8002768:	fba2 2303 	umull	r2, r3, r2, r3
 800276c:	095b      	lsrs	r3, r3, #5
 800276e:	b29b      	uxth	r3, r3
 8002770:	f003 030f 	and.w	r3, r3, #15
 8002774:	b29b      	uxth	r3, r3
 8002776:	440b      	add	r3, r1
 8002778:	b29b      	uxth	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	609a      	str	r2, [r3, #8]
}
 8002780:	bf00      	nop
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	bc80      	pop	{r7}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	51eb851f 	.word	0x51eb851f

08002790 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800279e:	2300      	movs	r3, #0
 80027a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ff5e 	bl	8002664 <LL_USART_IsEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d145      	bne.n	800283a <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027b6:	f023 030c 	bic.w	r3, r3, #12
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	6851      	ldr	r1, [r2, #4]
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	4311      	orrs	r1, r2
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	6912      	ldr	r2, [r2, #16]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4619      	mov	r1, r3
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ff57 	bl	800268a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	4619      	mov	r1, r3
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ff63 	bl	80026ae <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80027e8:	f107 0308 	add.w	r3, r7, #8
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fe83 	bl	80024f8 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a13      	ldr	r2, [pc, #76]	; (8002844 <LL_USART_Init+0xb4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d102      	bne.n	8002800 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	e00c      	b.n	800281a <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a11      	ldr	r2, [pc, #68]	; (8002848 <LL_USART_Init+0xb8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d102      	bne.n	800280e <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	61bb      	str	r3, [r7, #24]
 800280c:	e005      	b.n	800281a <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a0e      	ldr	r2, [pc, #56]	; (800284c <LL_USART_Init+0xbc>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d101      	bne.n	800281a <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00c      	beq.n	800283a <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d008      	beq.n	800283a <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 8002828:	2300      	movs	r3, #0
 800282a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	69b9      	ldr	r1, [r7, #24]
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ff4d 	bl	80026d4 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800283a:	7ffb      	ldrb	r3, [r7, #31]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3720      	adds	r7, #32
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40013800 	.word	0x40013800
 8002848:	40004400 	.word	0x40004400
 800284c:	40004800 	.word	0x40004800

08002850 <__errno>:
 8002850:	4b01      	ldr	r3, [pc, #4]	; (8002858 <__errno+0x8>)
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000030 	.word	0x20000030

0800285c <__libc_init_array>:
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	2500      	movs	r5, #0
 8002860:	4e0c      	ldr	r6, [pc, #48]	; (8002894 <__libc_init_array+0x38>)
 8002862:	4c0d      	ldr	r4, [pc, #52]	; (8002898 <__libc_init_array+0x3c>)
 8002864:	1ba4      	subs	r4, r4, r6
 8002866:	10a4      	asrs	r4, r4, #2
 8002868:	42a5      	cmp	r5, r4
 800286a:	d109      	bne.n	8002880 <__libc_init_array+0x24>
 800286c:	f000 fc36 	bl	80030dc <_init>
 8002870:	2500      	movs	r5, #0
 8002872:	4e0a      	ldr	r6, [pc, #40]	; (800289c <__libc_init_array+0x40>)
 8002874:	4c0a      	ldr	r4, [pc, #40]	; (80028a0 <__libc_init_array+0x44>)
 8002876:	1ba4      	subs	r4, r4, r6
 8002878:	10a4      	asrs	r4, r4, #2
 800287a:	42a5      	cmp	r5, r4
 800287c:	d105      	bne.n	800288a <__libc_init_array+0x2e>
 800287e:	bd70      	pop	{r4, r5, r6, pc}
 8002880:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002884:	4798      	blx	r3
 8002886:	3501      	adds	r5, #1
 8002888:	e7ee      	b.n	8002868 <__libc_init_array+0xc>
 800288a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800288e:	4798      	blx	r3
 8002890:	3501      	adds	r5, #1
 8002892:	e7f2      	b.n	800287a <__libc_init_array+0x1e>
 8002894:	0800341c 	.word	0x0800341c
 8002898:	0800341c 	.word	0x0800341c
 800289c:	0800341c 	.word	0x0800341c
 80028a0:	08003420 	.word	0x08003420

080028a4 <memcpy>:
 80028a4:	b510      	push	{r4, lr}
 80028a6:	1e43      	subs	r3, r0, #1
 80028a8:	440a      	add	r2, r1
 80028aa:	4291      	cmp	r1, r2
 80028ac:	d100      	bne.n	80028b0 <memcpy+0xc>
 80028ae:	bd10      	pop	{r4, pc}
 80028b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028b8:	e7f7      	b.n	80028aa <memcpy+0x6>

080028ba <memset>:
 80028ba:	4603      	mov	r3, r0
 80028bc:	4402      	add	r2, r0
 80028be:	4293      	cmp	r3, r2
 80028c0:	d100      	bne.n	80028c4 <memset+0xa>
 80028c2:	4770      	bx	lr
 80028c4:	f803 1b01 	strb.w	r1, [r3], #1
 80028c8:	e7f9      	b.n	80028be <memset+0x4>
	...

080028cc <siprintf>:
 80028cc:	b40e      	push	{r1, r2, r3}
 80028ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028d2:	b500      	push	{lr}
 80028d4:	b09c      	sub	sp, #112	; 0x70
 80028d6:	ab1d      	add	r3, sp, #116	; 0x74
 80028d8:	9002      	str	r0, [sp, #8]
 80028da:	9006      	str	r0, [sp, #24]
 80028dc:	9107      	str	r1, [sp, #28]
 80028de:	9104      	str	r1, [sp, #16]
 80028e0:	4808      	ldr	r0, [pc, #32]	; (8002904 <siprintf+0x38>)
 80028e2:	4909      	ldr	r1, [pc, #36]	; (8002908 <siprintf+0x3c>)
 80028e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80028e8:	9105      	str	r1, [sp, #20]
 80028ea:	6800      	ldr	r0, [r0, #0]
 80028ec:	a902      	add	r1, sp, #8
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	f000 f866 	bl	80029c0 <_svfiprintf_r>
 80028f4:	2200      	movs	r2, #0
 80028f6:	9b02      	ldr	r3, [sp, #8]
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	b01c      	add	sp, #112	; 0x70
 80028fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002900:	b003      	add	sp, #12
 8002902:	4770      	bx	lr
 8002904:	20000030 	.word	0x20000030
 8002908:	ffff0208 	.word	0xffff0208

0800290c <__ssputs_r>:
 800290c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002910:	688e      	ldr	r6, [r1, #8]
 8002912:	4682      	mov	sl, r0
 8002914:	429e      	cmp	r6, r3
 8002916:	460c      	mov	r4, r1
 8002918:	4690      	mov	r8, r2
 800291a:	4699      	mov	r9, r3
 800291c:	d837      	bhi.n	800298e <__ssputs_r+0x82>
 800291e:	898a      	ldrh	r2, [r1, #12]
 8002920:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002924:	d031      	beq.n	800298a <__ssputs_r+0x7e>
 8002926:	2302      	movs	r3, #2
 8002928:	6825      	ldr	r5, [r4, #0]
 800292a:	6909      	ldr	r1, [r1, #16]
 800292c:	1a6f      	subs	r7, r5, r1
 800292e:	6965      	ldr	r5, [r4, #20]
 8002930:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002934:	fb95 f5f3 	sdiv	r5, r5, r3
 8002938:	f109 0301 	add.w	r3, r9, #1
 800293c:	443b      	add	r3, r7
 800293e:	429d      	cmp	r5, r3
 8002940:	bf38      	it	cc
 8002942:	461d      	movcc	r5, r3
 8002944:	0553      	lsls	r3, r2, #21
 8002946:	d530      	bpl.n	80029aa <__ssputs_r+0x9e>
 8002948:	4629      	mov	r1, r5
 800294a:	f000 fb2d 	bl	8002fa8 <_malloc_r>
 800294e:	4606      	mov	r6, r0
 8002950:	b950      	cbnz	r0, 8002968 <__ssputs_r+0x5c>
 8002952:	230c      	movs	r3, #12
 8002954:	f04f 30ff 	mov.w	r0, #4294967295
 8002958:	f8ca 3000 	str.w	r3, [sl]
 800295c:	89a3      	ldrh	r3, [r4, #12]
 800295e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002962:	81a3      	strh	r3, [r4, #12]
 8002964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002968:	463a      	mov	r2, r7
 800296a:	6921      	ldr	r1, [r4, #16]
 800296c:	f7ff ff9a 	bl	80028a4 <memcpy>
 8002970:	89a3      	ldrh	r3, [r4, #12]
 8002972:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800297a:	81a3      	strh	r3, [r4, #12]
 800297c:	6126      	str	r6, [r4, #16]
 800297e:	443e      	add	r6, r7
 8002980:	6026      	str	r6, [r4, #0]
 8002982:	464e      	mov	r6, r9
 8002984:	6165      	str	r5, [r4, #20]
 8002986:	1bed      	subs	r5, r5, r7
 8002988:	60a5      	str	r5, [r4, #8]
 800298a:	454e      	cmp	r6, r9
 800298c:	d900      	bls.n	8002990 <__ssputs_r+0x84>
 800298e:	464e      	mov	r6, r9
 8002990:	4632      	mov	r2, r6
 8002992:	4641      	mov	r1, r8
 8002994:	6820      	ldr	r0, [r4, #0]
 8002996:	f000 faa1 	bl	8002edc <memmove>
 800299a:	68a3      	ldr	r3, [r4, #8]
 800299c:	2000      	movs	r0, #0
 800299e:	1b9b      	subs	r3, r3, r6
 80029a0:	60a3      	str	r3, [r4, #8]
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	441e      	add	r6, r3
 80029a6:	6026      	str	r6, [r4, #0]
 80029a8:	e7dc      	b.n	8002964 <__ssputs_r+0x58>
 80029aa:	462a      	mov	r2, r5
 80029ac:	f000 fb56 	bl	800305c <_realloc_r>
 80029b0:	4606      	mov	r6, r0
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d1e2      	bne.n	800297c <__ssputs_r+0x70>
 80029b6:	6921      	ldr	r1, [r4, #16]
 80029b8:	4650      	mov	r0, sl
 80029ba:	f000 faa9 	bl	8002f10 <_free_r>
 80029be:	e7c8      	b.n	8002952 <__ssputs_r+0x46>

080029c0 <_svfiprintf_r>:
 80029c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c4:	461d      	mov	r5, r3
 80029c6:	898b      	ldrh	r3, [r1, #12]
 80029c8:	b09d      	sub	sp, #116	; 0x74
 80029ca:	061f      	lsls	r7, r3, #24
 80029cc:	4680      	mov	r8, r0
 80029ce:	460c      	mov	r4, r1
 80029d0:	4616      	mov	r6, r2
 80029d2:	d50f      	bpl.n	80029f4 <_svfiprintf_r+0x34>
 80029d4:	690b      	ldr	r3, [r1, #16]
 80029d6:	b96b      	cbnz	r3, 80029f4 <_svfiprintf_r+0x34>
 80029d8:	2140      	movs	r1, #64	; 0x40
 80029da:	f000 fae5 	bl	8002fa8 <_malloc_r>
 80029de:	6020      	str	r0, [r4, #0]
 80029e0:	6120      	str	r0, [r4, #16]
 80029e2:	b928      	cbnz	r0, 80029f0 <_svfiprintf_r+0x30>
 80029e4:	230c      	movs	r3, #12
 80029e6:	f8c8 3000 	str.w	r3, [r8]
 80029ea:	f04f 30ff 	mov.w	r0, #4294967295
 80029ee:	e0c8      	b.n	8002b82 <_svfiprintf_r+0x1c2>
 80029f0:	2340      	movs	r3, #64	; 0x40
 80029f2:	6163      	str	r3, [r4, #20]
 80029f4:	2300      	movs	r3, #0
 80029f6:	9309      	str	r3, [sp, #36]	; 0x24
 80029f8:	2320      	movs	r3, #32
 80029fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80029fe:	2330      	movs	r3, #48	; 0x30
 8002a00:	f04f 0b01 	mov.w	fp, #1
 8002a04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a08:	9503      	str	r5, [sp, #12]
 8002a0a:	4637      	mov	r7, r6
 8002a0c:	463d      	mov	r5, r7
 8002a0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002a12:	b10b      	cbz	r3, 8002a18 <_svfiprintf_r+0x58>
 8002a14:	2b25      	cmp	r3, #37	; 0x25
 8002a16:	d13e      	bne.n	8002a96 <_svfiprintf_r+0xd6>
 8002a18:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a1c:	d00b      	beq.n	8002a36 <_svfiprintf_r+0x76>
 8002a1e:	4653      	mov	r3, sl
 8002a20:	4632      	mov	r2, r6
 8002a22:	4621      	mov	r1, r4
 8002a24:	4640      	mov	r0, r8
 8002a26:	f7ff ff71 	bl	800290c <__ssputs_r>
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	f000 80a4 	beq.w	8002b78 <_svfiprintf_r+0x1b8>
 8002a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a32:	4453      	add	r3, sl
 8002a34:	9309      	str	r3, [sp, #36]	; 0x24
 8002a36:	783b      	ldrb	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 809d 	beq.w	8002b78 <_svfiprintf_r+0x1b8>
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f04f 32ff 	mov.w	r2, #4294967295
 8002a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a48:	9304      	str	r3, [sp, #16]
 8002a4a:	9307      	str	r3, [sp, #28]
 8002a4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a50:	931a      	str	r3, [sp, #104]	; 0x68
 8002a52:	462f      	mov	r7, r5
 8002a54:	2205      	movs	r2, #5
 8002a56:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002a5a:	4850      	ldr	r0, [pc, #320]	; (8002b9c <_svfiprintf_r+0x1dc>)
 8002a5c:	f000 fa30 	bl	8002ec0 <memchr>
 8002a60:	9b04      	ldr	r3, [sp, #16]
 8002a62:	b9d0      	cbnz	r0, 8002a9a <_svfiprintf_r+0xda>
 8002a64:	06d9      	lsls	r1, r3, #27
 8002a66:	bf44      	itt	mi
 8002a68:	2220      	movmi	r2, #32
 8002a6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a6e:	071a      	lsls	r2, r3, #28
 8002a70:	bf44      	itt	mi
 8002a72:	222b      	movmi	r2, #43	; 0x2b
 8002a74:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a78:	782a      	ldrb	r2, [r5, #0]
 8002a7a:	2a2a      	cmp	r2, #42	; 0x2a
 8002a7c:	d015      	beq.n	8002aaa <_svfiprintf_r+0xea>
 8002a7e:	462f      	mov	r7, r5
 8002a80:	2000      	movs	r0, #0
 8002a82:	250a      	movs	r5, #10
 8002a84:	9a07      	ldr	r2, [sp, #28]
 8002a86:	4639      	mov	r1, r7
 8002a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a8c:	3b30      	subs	r3, #48	; 0x30
 8002a8e:	2b09      	cmp	r3, #9
 8002a90:	d94d      	bls.n	8002b2e <_svfiprintf_r+0x16e>
 8002a92:	b1b8      	cbz	r0, 8002ac4 <_svfiprintf_r+0x104>
 8002a94:	e00f      	b.n	8002ab6 <_svfiprintf_r+0xf6>
 8002a96:	462f      	mov	r7, r5
 8002a98:	e7b8      	b.n	8002a0c <_svfiprintf_r+0x4c>
 8002a9a:	4a40      	ldr	r2, [pc, #256]	; (8002b9c <_svfiprintf_r+0x1dc>)
 8002a9c:	463d      	mov	r5, r7
 8002a9e:	1a80      	subs	r0, r0, r2
 8002aa0:	fa0b f000 	lsl.w	r0, fp, r0
 8002aa4:	4318      	orrs	r0, r3
 8002aa6:	9004      	str	r0, [sp, #16]
 8002aa8:	e7d3      	b.n	8002a52 <_svfiprintf_r+0x92>
 8002aaa:	9a03      	ldr	r2, [sp, #12]
 8002aac:	1d11      	adds	r1, r2, #4
 8002aae:	6812      	ldr	r2, [r2, #0]
 8002ab0:	9103      	str	r1, [sp, #12]
 8002ab2:	2a00      	cmp	r2, #0
 8002ab4:	db01      	blt.n	8002aba <_svfiprintf_r+0xfa>
 8002ab6:	9207      	str	r2, [sp, #28]
 8002ab8:	e004      	b.n	8002ac4 <_svfiprintf_r+0x104>
 8002aba:	4252      	negs	r2, r2
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	9207      	str	r2, [sp, #28]
 8002ac2:	9304      	str	r3, [sp, #16]
 8002ac4:	783b      	ldrb	r3, [r7, #0]
 8002ac6:	2b2e      	cmp	r3, #46	; 0x2e
 8002ac8:	d10c      	bne.n	8002ae4 <_svfiprintf_r+0x124>
 8002aca:	787b      	ldrb	r3, [r7, #1]
 8002acc:	2b2a      	cmp	r3, #42	; 0x2a
 8002ace:	d133      	bne.n	8002b38 <_svfiprintf_r+0x178>
 8002ad0:	9b03      	ldr	r3, [sp, #12]
 8002ad2:	3702      	adds	r7, #2
 8002ad4:	1d1a      	adds	r2, r3, #4
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	9203      	str	r2, [sp, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bfb8      	it	lt
 8002ade:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ae2:	9305      	str	r3, [sp, #20]
 8002ae4:	4d2e      	ldr	r5, [pc, #184]	; (8002ba0 <_svfiprintf_r+0x1e0>)
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	7839      	ldrb	r1, [r7, #0]
 8002aea:	4628      	mov	r0, r5
 8002aec:	f000 f9e8 	bl	8002ec0 <memchr>
 8002af0:	b138      	cbz	r0, 8002b02 <_svfiprintf_r+0x142>
 8002af2:	2340      	movs	r3, #64	; 0x40
 8002af4:	1b40      	subs	r0, r0, r5
 8002af6:	fa03 f000 	lsl.w	r0, r3, r0
 8002afa:	9b04      	ldr	r3, [sp, #16]
 8002afc:	3701      	adds	r7, #1
 8002afe:	4303      	orrs	r3, r0
 8002b00:	9304      	str	r3, [sp, #16]
 8002b02:	7839      	ldrb	r1, [r7, #0]
 8002b04:	2206      	movs	r2, #6
 8002b06:	4827      	ldr	r0, [pc, #156]	; (8002ba4 <_svfiprintf_r+0x1e4>)
 8002b08:	1c7e      	adds	r6, r7, #1
 8002b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b0e:	f000 f9d7 	bl	8002ec0 <memchr>
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d038      	beq.n	8002b88 <_svfiprintf_r+0x1c8>
 8002b16:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <_svfiprintf_r+0x1e8>)
 8002b18:	bb13      	cbnz	r3, 8002b60 <_svfiprintf_r+0x1a0>
 8002b1a:	9b03      	ldr	r3, [sp, #12]
 8002b1c:	3307      	adds	r3, #7
 8002b1e:	f023 0307 	bic.w	r3, r3, #7
 8002b22:	3308      	adds	r3, #8
 8002b24:	9303      	str	r3, [sp, #12]
 8002b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b28:	444b      	add	r3, r9
 8002b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8002b2c:	e76d      	b.n	8002a0a <_svfiprintf_r+0x4a>
 8002b2e:	fb05 3202 	mla	r2, r5, r2, r3
 8002b32:	2001      	movs	r0, #1
 8002b34:	460f      	mov	r7, r1
 8002b36:	e7a6      	b.n	8002a86 <_svfiprintf_r+0xc6>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	250a      	movs	r5, #10
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	3701      	adds	r7, #1
 8002b40:	9305      	str	r3, [sp, #20]
 8002b42:	4638      	mov	r0, r7
 8002b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b48:	3a30      	subs	r2, #48	; 0x30
 8002b4a:	2a09      	cmp	r2, #9
 8002b4c:	d903      	bls.n	8002b56 <_svfiprintf_r+0x196>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0c8      	beq.n	8002ae4 <_svfiprintf_r+0x124>
 8002b52:	9105      	str	r1, [sp, #20]
 8002b54:	e7c6      	b.n	8002ae4 <_svfiprintf_r+0x124>
 8002b56:	fb05 2101 	mla	r1, r5, r1, r2
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	4607      	mov	r7, r0
 8002b5e:	e7f0      	b.n	8002b42 <_svfiprintf_r+0x182>
 8002b60:	ab03      	add	r3, sp, #12
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4622      	mov	r2, r4
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <_svfiprintf_r+0x1ec>)
 8002b68:	a904      	add	r1, sp, #16
 8002b6a:	4640      	mov	r0, r8
 8002b6c:	f3af 8000 	nop.w
 8002b70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b74:	4681      	mov	r9, r0
 8002b76:	d1d6      	bne.n	8002b26 <_svfiprintf_r+0x166>
 8002b78:	89a3      	ldrh	r3, [r4, #12]
 8002b7a:	065b      	lsls	r3, r3, #25
 8002b7c:	f53f af35 	bmi.w	80029ea <_svfiprintf_r+0x2a>
 8002b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b82:	b01d      	add	sp, #116	; 0x74
 8002b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b88:	ab03      	add	r3, sp, #12
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	4622      	mov	r2, r4
 8002b8e:	4b07      	ldr	r3, [pc, #28]	; (8002bac <_svfiprintf_r+0x1ec>)
 8002b90:	a904      	add	r1, sp, #16
 8002b92:	4640      	mov	r0, r8
 8002b94:	f000 f882 	bl	8002c9c <_printf_i>
 8002b98:	e7ea      	b.n	8002b70 <_svfiprintf_r+0x1b0>
 8002b9a:	bf00      	nop
 8002b9c:	080033e7 	.word	0x080033e7
 8002ba0:	080033ed 	.word	0x080033ed
 8002ba4:	080033f1 	.word	0x080033f1
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	0800290d 	.word	0x0800290d

08002bb0 <_printf_common>:
 8002bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bb4:	4691      	mov	r9, r2
 8002bb6:	461f      	mov	r7, r3
 8002bb8:	688a      	ldr	r2, [r1, #8]
 8002bba:	690b      	ldr	r3, [r1, #16]
 8002bbc:	4606      	mov	r6, r0
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	bfb8      	it	lt
 8002bc2:	4613      	movlt	r3, r2
 8002bc4:	f8c9 3000 	str.w	r3, [r9]
 8002bc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bcc:	460c      	mov	r4, r1
 8002bce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bd2:	b112      	cbz	r2, 8002bda <_printf_common+0x2a>
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f8c9 3000 	str.w	r3, [r9]
 8002bda:	6823      	ldr	r3, [r4, #0]
 8002bdc:	0699      	lsls	r1, r3, #26
 8002bde:	bf42      	ittt	mi
 8002be0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002be4:	3302      	addmi	r3, #2
 8002be6:	f8c9 3000 	strmi.w	r3, [r9]
 8002bea:	6825      	ldr	r5, [r4, #0]
 8002bec:	f015 0506 	ands.w	r5, r5, #6
 8002bf0:	d107      	bne.n	8002c02 <_printf_common+0x52>
 8002bf2:	f104 0a19 	add.w	sl, r4, #25
 8002bf6:	68e3      	ldr	r3, [r4, #12]
 8002bf8:	f8d9 2000 	ldr.w	r2, [r9]
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	42ab      	cmp	r3, r5
 8002c00:	dc29      	bgt.n	8002c56 <_printf_common+0xa6>
 8002c02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c06:	6822      	ldr	r2, [r4, #0]
 8002c08:	3300      	adds	r3, #0
 8002c0a:	bf18      	it	ne
 8002c0c:	2301      	movne	r3, #1
 8002c0e:	0692      	lsls	r2, r2, #26
 8002c10:	d42e      	bmi.n	8002c70 <_printf_common+0xc0>
 8002c12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c16:	4639      	mov	r1, r7
 8002c18:	4630      	mov	r0, r6
 8002c1a:	47c0      	blx	r8
 8002c1c:	3001      	adds	r0, #1
 8002c1e:	d021      	beq.n	8002c64 <_printf_common+0xb4>
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	68e5      	ldr	r5, [r4, #12]
 8002c24:	f003 0306 	and.w	r3, r3, #6
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	bf18      	it	ne
 8002c2c:	2500      	movne	r5, #0
 8002c2e:	f8d9 2000 	ldr.w	r2, [r9]
 8002c32:	f04f 0900 	mov.w	r9, #0
 8002c36:	bf08      	it	eq
 8002c38:	1aad      	subeq	r5, r5, r2
 8002c3a:	68a3      	ldr	r3, [r4, #8]
 8002c3c:	6922      	ldr	r2, [r4, #16]
 8002c3e:	bf08      	it	eq
 8002c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c44:	4293      	cmp	r3, r2
 8002c46:	bfc4      	itt	gt
 8002c48:	1a9b      	subgt	r3, r3, r2
 8002c4a:	18ed      	addgt	r5, r5, r3
 8002c4c:	341a      	adds	r4, #26
 8002c4e:	454d      	cmp	r5, r9
 8002c50:	d11a      	bne.n	8002c88 <_printf_common+0xd8>
 8002c52:	2000      	movs	r0, #0
 8002c54:	e008      	b.n	8002c68 <_printf_common+0xb8>
 8002c56:	2301      	movs	r3, #1
 8002c58:	4652      	mov	r2, sl
 8002c5a:	4639      	mov	r1, r7
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	47c0      	blx	r8
 8002c60:	3001      	adds	r0, #1
 8002c62:	d103      	bne.n	8002c6c <_printf_common+0xbc>
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c6c:	3501      	adds	r5, #1
 8002c6e:	e7c2      	b.n	8002bf6 <_printf_common+0x46>
 8002c70:	2030      	movs	r0, #48	; 0x30
 8002c72:	18e1      	adds	r1, r4, r3
 8002c74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c7e:	4422      	add	r2, r4
 8002c80:	3302      	adds	r3, #2
 8002c82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c86:	e7c4      	b.n	8002c12 <_printf_common+0x62>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	4622      	mov	r2, r4
 8002c8c:	4639      	mov	r1, r7
 8002c8e:	4630      	mov	r0, r6
 8002c90:	47c0      	blx	r8
 8002c92:	3001      	adds	r0, #1
 8002c94:	d0e6      	beq.n	8002c64 <_printf_common+0xb4>
 8002c96:	f109 0901 	add.w	r9, r9, #1
 8002c9a:	e7d8      	b.n	8002c4e <_printf_common+0x9e>

08002c9c <_printf_i>:
 8002c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ca0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	7e09      	ldrb	r1, [r1, #24]
 8002ca8:	b085      	sub	sp, #20
 8002caa:	296e      	cmp	r1, #110	; 0x6e
 8002cac:	4617      	mov	r7, r2
 8002cae:	4606      	mov	r6, r0
 8002cb0:	4698      	mov	r8, r3
 8002cb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002cb4:	f000 80b3 	beq.w	8002e1e <_printf_i+0x182>
 8002cb8:	d822      	bhi.n	8002d00 <_printf_i+0x64>
 8002cba:	2963      	cmp	r1, #99	; 0x63
 8002cbc:	d036      	beq.n	8002d2c <_printf_i+0x90>
 8002cbe:	d80a      	bhi.n	8002cd6 <_printf_i+0x3a>
 8002cc0:	2900      	cmp	r1, #0
 8002cc2:	f000 80b9 	beq.w	8002e38 <_printf_i+0x19c>
 8002cc6:	2958      	cmp	r1, #88	; 0x58
 8002cc8:	f000 8083 	beq.w	8002dd2 <_printf_i+0x136>
 8002ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002cd4:	e032      	b.n	8002d3c <_printf_i+0xa0>
 8002cd6:	2964      	cmp	r1, #100	; 0x64
 8002cd8:	d001      	beq.n	8002cde <_printf_i+0x42>
 8002cda:	2969      	cmp	r1, #105	; 0x69
 8002cdc:	d1f6      	bne.n	8002ccc <_printf_i+0x30>
 8002cde:	6820      	ldr	r0, [r4, #0]
 8002ce0:	6813      	ldr	r3, [r2, #0]
 8002ce2:	0605      	lsls	r5, r0, #24
 8002ce4:	f103 0104 	add.w	r1, r3, #4
 8002ce8:	d52a      	bpl.n	8002d40 <_printf_i+0xa4>
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6011      	str	r1, [r2, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	da03      	bge.n	8002cfa <_printf_i+0x5e>
 8002cf2:	222d      	movs	r2, #45	; 0x2d
 8002cf4:	425b      	negs	r3, r3
 8002cf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002cfa:	486f      	ldr	r0, [pc, #444]	; (8002eb8 <_printf_i+0x21c>)
 8002cfc:	220a      	movs	r2, #10
 8002cfe:	e039      	b.n	8002d74 <_printf_i+0xd8>
 8002d00:	2973      	cmp	r1, #115	; 0x73
 8002d02:	f000 809d 	beq.w	8002e40 <_printf_i+0x1a4>
 8002d06:	d808      	bhi.n	8002d1a <_printf_i+0x7e>
 8002d08:	296f      	cmp	r1, #111	; 0x6f
 8002d0a:	d020      	beq.n	8002d4e <_printf_i+0xb2>
 8002d0c:	2970      	cmp	r1, #112	; 0x70
 8002d0e:	d1dd      	bne.n	8002ccc <_printf_i+0x30>
 8002d10:	6823      	ldr	r3, [r4, #0]
 8002d12:	f043 0320 	orr.w	r3, r3, #32
 8002d16:	6023      	str	r3, [r4, #0]
 8002d18:	e003      	b.n	8002d22 <_printf_i+0x86>
 8002d1a:	2975      	cmp	r1, #117	; 0x75
 8002d1c:	d017      	beq.n	8002d4e <_printf_i+0xb2>
 8002d1e:	2978      	cmp	r1, #120	; 0x78
 8002d20:	d1d4      	bne.n	8002ccc <_printf_i+0x30>
 8002d22:	2378      	movs	r3, #120	; 0x78
 8002d24:	4865      	ldr	r0, [pc, #404]	; (8002ebc <_printf_i+0x220>)
 8002d26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d2a:	e055      	b.n	8002dd8 <_printf_i+0x13c>
 8002d2c:	6813      	ldr	r3, [r2, #0]
 8002d2e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d32:	1d19      	adds	r1, r3, #4
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6011      	str	r1, [r2, #0]
 8002d38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e08c      	b.n	8002e5a <_printf_i+0x1be>
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d46:	6011      	str	r1, [r2, #0]
 8002d48:	bf18      	it	ne
 8002d4a:	b21b      	sxthne	r3, r3
 8002d4c:	e7cf      	b.n	8002cee <_printf_i+0x52>
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	6825      	ldr	r5, [r4, #0]
 8002d52:	1d18      	adds	r0, r3, #4
 8002d54:	6010      	str	r0, [r2, #0]
 8002d56:	0628      	lsls	r0, r5, #24
 8002d58:	d501      	bpl.n	8002d5e <_printf_i+0xc2>
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	e002      	b.n	8002d64 <_printf_i+0xc8>
 8002d5e:	0668      	lsls	r0, r5, #25
 8002d60:	d5fb      	bpl.n	8002d5a <_printf_i+0xbe>
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	296f      	cmp	r1, #111	; 0x6f
 8002d66:	bf14      	ite	ne
 8002d68:	220a      	movne	r2, #10
 8002d6a:	2208      	moveq	r2, #8
 8002d6c:	4852      	ldr	r0, [pc, #328]	; (8002eb8 <_printf_i+0x21c>)
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d74:	6865      	ldr	r5, [r4, #4]
 8002d76:	2d00      	cmp	r5, #0
 8002d78:	60a5      	str	r5, [r4, #8]
 8002d7a:	f2c0 8095 	blt.w	8002ea8 <_printf_i+0x20c>
 8002d7e:	6821      	ldr	r1, [r4, #0]
 8002d80:	f021 0104 	bic.w	r1, r1, #4
 8002d84:	6021      	str	r1, [r4, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d13d      	bne.n	8002e06 <_printf_i+0x16a>
 8002d8a:	2d00      	cmp	r5, #0
 8002d8c:	f040 808e 	bne.w	8002eac <_printf_i+0x210>
 8002d90:	4665      	mov	r5, ip
 8002d92:	2a08      	cmp	r2, #8
 8002d94:	d10b      	bne.n	8002dae <_printf_i+0x112>
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	07db      	lsls	r3, r3, #31
 8002d9a:	d508      	bpl.n	8002dae <_printf_i+0x112>
 8002d9c:	6923      	ldr	r3, [r4, #16]
 8002d9e:	6862      	ldr	r2, [r4, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	bfde      	ittt	le
 8002da4:	2330      	movle	r3, #48	; 0x30
 8002da6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002daa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002dae:	ebac 0305 	sub.w	r3, ip, r5
 8002db2:	6123      	str	r3, [r4, #16]
 8002db4:	f8cd 8000 	str.w	r8, [sp]
 8002db8:	463b      	mov	r3, r7
 8002dba:	aa03      	add	r2, sp, #12
 8002dbc:	4621      	mov	r1, r4
 8002dbe:	4630      	mov	r0, r6
 8002dc0:	f7ff fef6 	bl	8002bb0 <_printf_common>
 8002dc4:	3001      	adds	r0, #1
 8002dc6:	d14d      	bne.n	8002e64 <_printf_i+0x1c8>
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dcc:	b005      	add	sp, #20
 8002dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dd2:	4839      	ldr	r0, [pc, #228]	; (8002eb8 <_printf_i+0x21c>)
 8002dd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002dd8:	6813      	ldr	r3, [r2, #0]
 8002dda:	6821      	ldr	r1, [r4, #0]
 8002ddc:	1d1d      	adds	r5, r3, #4
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6015      	str	r5, [r2, #0]
 8002de2:	060a      	lsls	r2, r1, #24
 8002de4:	d50b      	bpl.n	8002dfe <_printf_i+0x162>
 8002de6:	07ca      	lsls	r2, r1, #31
 8002de8:	bf44      	itt	mi
 8002dea:	f041 0120 	orrmi.w	r1, r1, #32
 8002dee:	6021      	strmi	r1, [r4, #0]
 8002df0:	b91b      	cbnz	r3, 8002dfa <_printf_i+0x15e>
 8002df2:	6822      	ldr	r2, [r4, #0]
 8002df4:	f022 0220 	bic.w	r2, r2, #32
 8002df8:	6022      	str	r2, [r4, #0]
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	e7b7      	b.n	8002d6e <_printf_i+0xd2>
 8002dfe:	064d      	lsls	r5, r1, #25
 8002e00:	bf48      	it	mi
 8002e02:	b29b      	uxthmi	r3, r3
 8002e04:	e7ef      	b.n	8002de6 <_printf_i+0x14a>
 8002e06:	4665      	mov	r5, ip
 8002e08:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e0c:	fb02 3311 	mls	r3, r2, r1, r3
 8002e10:	5cc3      	ldrb	r3, [r0, r3]
 8002e12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e16:	460b      	mov	r3, r1
 8002e18:	2900      	cmp	r1, #0
 8002e1a:	d1f5      	bne.n	8002e08 <_printf_i+0x16c>
 8002e1c:	e7b9      	b.n	8002d92 <_printf_i+0xf6>
 8002e1e:	6813      	ldr	r3, [r2, #0]
 8002e20:	6825      	ldr	r5, [r4, #0]
 8002e22:	1d18      	adds	r0, r3, #4
 8002e24:	6961      	ldr	r1, [r4, #20]
 8002e26:	6010      	str	r0, [r2, #0]
 8002e28:	0628      	lsls	r0, r5, #24
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	d501      	bpl.n	8002e32 <_printf_i+0x196>
 8002e2e:	6019      	str	r1, [r3, #0]
 8002e30:	e002      	b.n	8002e38 <_printf_i+0x19c>
 8002e32:	066a      	lsls	r2, r5, #25
 8002e34:	d5fb      	bpl.n	8002e2e <_printf_i+0x192>
 8002e36:	8019      	strh	r1, [r3, #0]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	4665      	mov	r5, ip
 8002e3c:	6123      	str	r3, [r4, #16]
 8002e3e:	e7b9      	b.n	8002db4 <_printf_i+0x118>
 8002e40:	6813      	ldr	r3, [r2, #0]
 8002e42:	1d19      	adds	r1, r3, #4
 8002e44:	6011      	str	r1, [r2, #0]
 8002e46:	681d      	ldr	r5, [r3, #0]
 8002e48:	6862      	ldr	r2, [r4, #4]
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	f000 f837 	bl	8002ec0 <memchr>
 8002e52:	b108      	cbz	r0, 8002e58 <_printf_i+0x1bc>
 8002e54:	1b40      	subs	r0, r0, r5
 8002e56:	6060      	str	r0, [r4, #4]
 8002e58:	6863      	ldr	r3, [r4, #4]
 8002e5a:	6123      	str	r3, [r4, #16]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e62:	e7a7      	b.n	8002db4 <_printf_i+0x118>
 8002e64:	6923      	ldr	r3, [r4, #16]
 8002e66:	462a      	mov	r2, r5
 8002e68:	4639      	mov	r1, r7
 8002e6a:	4630      	mov	r0, r6
 8002e6c:	47c0      	blx	r8
 8002e6e:	3001      	adds	r0, #1
 8002e70:	d0aa      	beq.n	8002dc8 <_printf_i+0x12c>
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	079b      	lsls	r3, r3, #30
 8002e76:	d413      	bmi.n	8002ea0 <_printf_i+0x204>
 8002e78:	68e0      	ldr	r0, [r4, #12]
 8002e7a:	9b03      	ldr	r3, [sp, #12]
 8002e7c:	4298      	cmp	r0, r3
 8002e7e:	bfb8      	it	lt
 8002e80:	4618      	movlt	r0, r3
 8002e82:	e7a3      	b.n	8002dcc <_printf_i+0x130>
 8002e84:	2301      	movs	r3, #1
 8002e86:	464a      	mov	r2, r9
 8002e88:	4639      	mov	r1, r7
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	47c0      	blx	r8
 8002e8e:	3001      	adds	r0, #1
 8002e90:	d09a      	beq.n	8002dc8 <_printf_i+0x12c>
 8002e92:	3501      	adds	r5, #1
 8002e94:	68e3      	ldr	r3, [r4, #12]
 8002e96:	9a03      	ldr	r2, [sp, #12]
 8002e98:	1a9b      	subs	r3, r3, r2
 8002e9a:	42ab      	cmp	r3, r5
 8002e9c:	dcf2      	bgt.n	8002e84 <_printf_i+0x1e8>
 8002e9e:	e7eb      	b.n	8002e78 <_printf_i+0x1dc>
 8002ea0:	2500      	movs	r5, #0
 8002ea2:	f104 0919 	add.w	r9, r4, #25
 8002ea6:	e7f5      	b.n	8002e94 <_printf_i+0x1f8>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ac      	bne.n	8002e06 <_printf_i+0x16a>
 8002eac:	7803      	ldrb	r3, [r0, #0]
 8002eae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002eb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002eb6:	e76c      	b.n	8002d92 <_printf_i+0xf6>
 8002eb8:	080033f8 	.word	0x080033f8
 8002ebc:	08003409 	.word	0x08003409

08002ec0 <memchr>:
 8002ec0:	b510      	push	{r4, lr}
 8002ec2:	b2c9      	uxtb	r1, r1
 8002ec4:	4402      	add	r2, r0
 8002ec6:	4290      	cmp	r0, r2
 8002ec8:	4603      	mov	r3, r0
 8002eca:	d101      	bne.n	8002ed0 <memchr+0x10>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e003      	b.n	8002ed8 <memchr+0x18>
 8002ed0:	781c      	ldrb	r4, [r3, #0]
 8002ed2:	3001      	adds	r0, #1
 8002ed4:	428c      	cmp	r4, r1
 8002ed6:	d1f6      	bne.n	8002ec6 <memchr+0x6>
 8002ed8:	4618      	mov	r0, r3
 8002eda:	bd10      	pop	{r4, pc}

08002edc <memmove>:
 8002edc:	4288      	cmp	r0, r1
 8002ede:	b510      	push	{r4, lr}
 8002ee0:	eb01 0302 	add.w	r3, r1, r2
 8002ee4:	d807      	bhi.n	8002ef6 <memmove+0x1a>
 8002ee6:	1e42      	subs	r2, r0, #1
 8002ee8:	4299      	cmp	r1, r3
 8002eea:	d00a      	beq.n	8002f02 <memmove+0x26>
 8002eec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ef0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002ef4:	e7f8      	b.n	8002ee8 <memmove+0xc>
 8002ef6:	4283      	cmp	r3, r0
 8002ef8:	d9f5      	bls.n	8002ee6 <memmove+0xa>
 8002efa:	1881      	adds	r1, r0, r2
 8002efc:	1ad2      	subs	r2, r2, r3
 8002efe:	42d3      	cmn	r3, r2
 8002f00:	d100      	bne.n	8002f04 <memmove+0x28>
 8002f02:	bd10      	pop	{r4, pc}
 8002f04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f0c:	e7f7      	b.n	8002efe <memmove+0x22>
	...

08002f10 <_free_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4605      	mov	r5, r0
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d043      	beq.n	8002fa0 <_free_r+0x90>
 8002f18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f1c:	1f0c      	subs	r4, r1, #4
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bfb8      	it	lt
 8002f22:	18e4      	addlt	r4, r4, r3
 8002f24:	f000 f8d0 	bl	80030c8 <__malloc_lock>
 8002f28:	4a1e      	ldr	r2, [pc, #120]	; (8002fa4 <_free_r+0x94>)
 8002f2a:	6813      	ldr	r3, [r2, #0]
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	b933      	cbnz	r3, 8002f3e <_free_r+0x2e>
 8002f30:	6063      	str	r3, [r4, #4]
 8002f32:	6014      	str	r4, [r2, #0]
 8002f34:	4628      	mov	r0, r5
 8002f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f3a:	f000 b8c6 	b.w	80030ca <__malloc_unlock>
 8002f3e:	42a3      	cmp	r3, r4
 8002f40:	d90b      	bls.n	8002f5a <_free_r+0x4a>
 8002f42:	6821      	ldr	r1, [r4, #0]
 8002f44:	1862      	adds	r2, r4, r1
 8002f46:	4293      	cmp	r3, r2
 8002f48:	bf01      	itttt	eq
 8002f4a:	681a      	ldreq	r2, [r3, #0]
 8002f4c:	685b      	ldreq	r3, [r3, #4]
 8002f4e:	1852      	addeq	r2, r2, r1
 8002f50:	6022      	streq	r2, [r4, #0]
 8002f52:	6063      	str	r3, [r4, #4]
 8002f54:	6004      	str	r4, [r0, #0]
 8002f56:	e7ed      	b.n	8002f34 <_free_r+0x24>
 8002f58:	4613      	mov	r3, r2
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	b10a      	cbz	r2, 8002f62 <_free_r+0x52>
 8002f5e:	42a2      	cmp	r2, r4
 8002f60:	d9fa      	bls.n	8002f58 <_free_r+0x48>
 8002f62:	6819      	ldr	r1, [r3, #0]
 8002f64:	1858      	adds	r0, r3, r1
 8002f66:	42a0      	cmp	r0, r4
 8002f68:	d10b      	bne.n	8002f82 <_free_r+0x72>
 8002f6a:	6820      	ldr	r0, [r4, #0]
 8002f6c:	4401      	add	r1, r0
 8002f6e:	1858      	adds	r0, r3, r1
 8002f70:	4282      	cmp	r2, r0
 8002f72:	6019      	str	r1, [r3, #0]
 8002f74:	d1de      	bne.n	8002f34 <_free_r+0x24>
 8002f76:	6810      	ldr	r0, [r2, #0]
 8002f78:	6852      	ldr	r2, [r2, #4]
 8002f7a:	4401      	add	r1, r0
 8002f7c:	6019      	str	r1, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	e7d8      	b.n	8002f34 <_free_r+0x24>
 8002f82:	d902      	bls.n	8002f8a <_free_r+0x7a>
 8002f84:	230c      	movs	r3, #12
 8002f86:	602b      	str	r3, [r5, #0]
 8002f88:	e7d4      	b.n	8002f34 <_free_r+0x24>
 8002f8a:	6820      	ldr	r0, [r4, #0]
 8002f8c:	1821      	adds	r1, r4, r0
 8002f8e:	428a      	cmp	r2, r1
 8002f90:	bf01      	itttt	eq
 8002f92:	6811      	ldreq	r1, [r2, #0]
 8002f94:	6852      	ldreq	r2, [r2, #4]
 8002f96:	1809      	addeq	r1, r1, r0
 8002f98:	6021      	streq	r1, [r4, #0]
 8002f9a:	6062      	str	r2, [r4, #4]
 8002f9c:	605c      	str	r4, [r3, #4]
 8002f9e:	e7c9      	b.n	8002f34 <_free_r+0x24>
 8002fa0:	bd38      	pop	{r3, r4, r5, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200000b8 	.word	0x200000b8

08002fa8 <_malloc_r>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	1ccd      	adds	r5, r1, #3
 8002fac:	f025 0503 	bic.w	r5, r5, #3
 8002fb0:	3508      	adds	r5, #8
 8002fb2:	2d0c      	cmp	r5, #12
 8002fb4:	bf38      	it	cc
 8002fb6:	250c      	movcc	r5, #12
 8002fb8:	2d00      	cmp	r5, #0
 8002fba:	4606      	mov	r6, r0
 8002fbc:	db01      	blt.n	8002fc2 <_malloc_r+0x1a>
 8002fbe:	42a9      	cmp	r1, r5
 8002fc0:	d903      	bls.n	8002fca <_malloc_r+0x22>
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	6033      	str	r3, [r6, #0]
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	bd70      	pop	{r4, r5, r6, pc}
 8002fca:	f000 f87d 	bl	80030c8 <__malloc_lock>
 8002fce:	4a21      	ldr	r2, [pc, #132]	; (8003054 <_malloc_r+0xac>)
 8002fd0:	6814      	ldr	r4, [r2, #0]
 8002fd2:	4621      	mov	r1, r4
 8002fd4:	b991      	cbnz	r1, 8002ffc <_malloc_r+0x54>
 8002fd6:	4c20      	ldr	r4, [pc, #128]	; (8003058 <_malloc_r+0xb0>)
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	b91b      	cbnz	r3, 8002fe4 <_malloc_r+0x3c>
 8002fdc:	4630      	mov	r0, r6
 8002fde:	f000 f863 	bl	80030a8 <_sbrk_r>
 8002fe2:	6020      	str	r0, [r4, #0]
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f000 f85e 	bl	80030a8 <_sbrk_r>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	d124      	bne.n	800303a <_malloc_r+0x92>
 8002ff0:	230c      	movs	r3, #12
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	6033      	str	r3, [r6, #0]
 8002ff6:	f000 f868 	bl	80030ca <__malloc_unlock>
 8002ffa:	e7e4      	b.n	8002fc6 <_malloc_r+0x1e>
 8002ffc:	680b      	ldr	r3, [r1, #0]
 8002ffe:	1b5b      	subs	r3, r3, r5
 8003000:	d418      	bmi.n	8003034 <_malloc_r+0x8c>
 8003002:	2b0b      	cmp	r3, #11
 8003004:	d90f      	bls.n	8003026 <_malloc_r+0x7e>
 8003006:	600b      	str	r3, [r1, #0]
 8003008:	18cc      	adds	r4, r1, r3
 800300a:	50cd      	str	r5, [r1, r3]
 800300c:	4630      	mov	r0, r6
 800300e:	f000 f85c 	bl	80030ca <__malloc_unlock>
 8003012:	f104 000b 	add.w	r0, r4, #11
 8003016:	1d23      	adds	r3, r4, #4
 8003018:	f020 0007 	bic.w	r0, r0, #7
 800301c:	1ac3      	subs	r3, r0, r3
 800301e:	d0d3      	beq.n	8002fc8 <_malloc_r+0x20>
 8003020:	425a      	negs	r2, r3
 8003022:	50e2      	str	r2, [r4, r3]
 8003024:	e7d0      	b.n	8002fc8 <_malloc_r+0x20>
 8003026:	684b      	ldr	r3, [r1, #4]
 8003028:	428c      	cmp	r4, r1
 800302a:	bf16      	itet	ne
 800302c:	6063      	strne	r3, [r4, #4]
 800302e:	6013      	streq	r3, [r2, #0]
 8003030:	460c      	movne	r4, r1
 8003032:	e7eb      	b.n	800300c <_malloc_r+0x64>
 8003034:	460c      	mov	r4, r1
 8003036:	6849      	ldr	r1, [r1, #4]
 8003038:	e7cc      	b.n	8002fd4 <_malloc_r+0x2c>
 800303a:	1cc4      	adds	r4, r0, #3
 800303c:	f024 0403 	bic.w	r4, r4, #3
 8003040:	42a0      	cmp	r0, r4
 8003042:	d005      	beq.n	8003050 <_malloc_r+0xa8>
 8003044:	1a21      	subs	r1, r4, r0
 8003046:	4630      	mov	r0, r6
 8003048:	f000 f82e 	bl	80030a8 <_sbrk_r>
 800304c:	3001      	adds	r0, #1
 800304e:	d0cf      	beq.n	8002ff0 <_malloc_r+0x48>
 8003050:	6025      	str	r5, [r4, #0]
 8003052:	e7db      	b.n	800300c <_malloc_r+0x64>
 8003054:	200000b8 	.word	0x200000b8
 8003058:	200000bc 	.word	0x200000bc

0800305c <_realloc_r>:
 800305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305e:	4607      	mov	r7, r0
 8003060:	4614      	mov	r4, r2
 8003062:	460e      	mov	r6, r1
 8003064:	b921      	cbnz	r1, 8003070 <_realloc_r+0x14>
 8003066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800306a:	4611      	mov	r1, r2
 800306c:	f7ff bf9c 	b.w	8002fa8 <_malloc_r>
 8003070:	b922      	cbnz	r2, 800307c <_realloc_r+0x20>
 8003072:	f7ff ff4d 	bl	8002f10 <_free_r>
 8003076:	4625      	mov	r5, r4
 8003078:	4628      	mov	r0, r5
 800307a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800307c:	f000 f826 	bl	80030cc <_malloc_usable_size_r>
 8003080:	42a0      	cmp	r0, r4
 8003082:	d20f      	bcs.n	80030a4 <_realloc_r+0x48>
 8003084:	4621      	mov	r1, r4
 8003086:	4638      	mov	r0, r7
 8003088:	f7ff ff8e 	bl	8002fa8 <_malloc_r>
 800308c:	4605      	mov	r5, r0
 800308e:	2800      	cmp	r0, #0
 8003090:	d0f2      	beq.n	8003078 <_realloc_r+0x1c>
 8003092:	4631      	mov	r1, r6
 8003094:	4622      	mov	r2, r4
 8003096:	f7ff fc05 	bl	80028a4 <memcpy>
 800309a:	4631      	mov	r1, r6
 800309c:	4638      	mov	r0, r7
 800309e:	f7ff ff37 	bl	8002f10 <_free_r>
 80030a2:	e7e9      	b.n	8003078 <_realloc_r+0x1c>
 80030a4:	4635      	mov	r5, r6
 80030a6:	e7e7      	b.n	8003078 <_realloc_r+0x1c>

080030a8 <_sbrk_r>:
 80030a8:	b538      	push	{r3, r4, r5, lr}
 80030aa:	2300      	movs	r3, #0
 80030ac:	4c05      	ldr	r4, [pc, #20]	; (80030c4 <_sbrk_r+0x1c>)
 80030ae:	4605      	mov	r5, r0
 80030b0:	4608      	mov	r0, r1
 80030b2:	6023      	str	r3, [r4, #0]
 80030b4:	f7fd fbf8 	bl	80008a8 <_sbrk>
 80030b8:	1c43      	adds	r3, r0, #1
 80030ba:	d102      	bne.n	80030c2 <_sbrk_r+0x1a>
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	b103      	cbz	r3, 80030c2 <_sbrk_r+0x1a>
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	bd38      	pop	{r3, r4, r5, pc}
 80030c4:	20000148 	.word	0x20000148

080030c8 <__malloc_lock>:
 80030c8:	4770      	bx	lr

080030ca <__malloc_unlock>:
 80030ca:	4770      	bx	lr

080030cc <_malloc_usable_size_r>:
 80030cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030d0:	1f18      	subs	r0, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bfbc      	itt	lt
 80030d6:	580b      	ldrlt	r3, [r1, r0]
 80030d8:	18c0      	addlt	r0, r0, r3
 80030da:	4770      	bx	lr

080030dc <_init>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	bf00      	nop
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr

080030e8 <_fini>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr
